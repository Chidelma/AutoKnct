
(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
var app = (function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function validate_store(store, name) {
        if (!store || typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, callback) {
        const unsub = store.subscribe(callback);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, fn) {
        return definition[1]
            ? assign({}, assign(ctx.$$scope.ctx, definition[1](fn ? fn(ctx) : {})))
            : ctx.$$scope.ctx;
    }
    function get_slot_changes(definition, ctx, changed, fn) {
        return definition[1]
            ? assign({}, assign(ctx.$$scope.changed || {}, definition[1](fn ? fn(changed) : {})))
            : ctx.$$scope.changed || {};
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    let running = false;
    function run_tasks() {
        tasks.forEach(task => {
            if (!task[0](now())) {
                tasks.delete(task);
                task[1]();
            }
        });
        running = tasks.size > 0;
        if (running)
            raf(run_tasks);
    }
    function loop(fn) {
        let task;
        if (!running) {
            running = true;
            raf(run_tasks);
        }
        return {
            promise: new Promise(fulfil => {
                tasks.add(task = [fn, fulfil]);
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else
            node.setAttribute(attribute, value);
    }
    function to_number(value) {
        return value === '' ? undefined : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        if (value != null || input.value) {
            input.value = value;
        }
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let stylesheet;
    let active = 0;
    let current_rules = {};
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        if (!current_rules[name]) {
            if (!stylesheet) {
                const style = element('style');
                document.head.appendChild(style);
                stylesheet = style.sheet;
            }
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        node.style.animation = (node.style.animation || '')
            .split(', ')
            .filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        )
            .join(', ');
        if (name && !--active)
            clear_rules();
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            let i = stylesheet.cssRules.length;
            while (i--)
                stylesheet.deleteRule(i);
            current_rules = {};
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error(`Function called outside component initialization`);
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function flush() {
        const seen_callbacks = new Set();
        do {
            // first, call beforeUpdate functions
            // and update components
            while (dirty_components.length) {
                const component = dirty_components.shift();
                set_current_component(component);
                update(component.$$);
            }
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    callback();
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
    }
    function update($$) {
        if ($$.fragment) {
            $$.update($$.dirty);
            run_all($$.before_update);
            $$.fragment.p($$.dirty, $$.ctx);
            $$.dirty = null;
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        let config = fn(node, params);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config();
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }

    const globals = (typeof window !== 'undefined' ? window : global);
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        if (component.$$.fragment) {
            run_all(component.$$.on_destroy);
            component.$$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            component.$$.on_destroy = component.$$.fragment = null;
            component.$$.ctx = {};
        }
    }
    function make_dirty(component, key) {
        if (!component.$$.dirty) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty = blank_object();
        }
        component.$$.dirty[key] = true;
    }
    function init(component, options, instance, create_fragment, not_equal, prop_names) {
        const parent_component = current_component;
        set_current_component(component);
        const props = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props: prop_names,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty: null
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, props, (key, ret, value = ret) => {
                if ($$.ctx && not_equal($$.ctx[key], $$.ctx[key] = value)) {
                    if ($$.bound[key])
                        $$.bound[key](value);
                    if (ready)
                        make_dirty(component, key);
                }
                return ret;
            })
            : props;
        $$.update();
        ready = true;
        run_all($$.before_update);
        $$.fragment = create_fragment($$.ctx);
        if (options.target) {
            if (options.hydrate) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment.l(children(options.target));
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    let SvelteElement;
    if (typeof HTMLElement !== 'undefined') {
        SvelteElement = class extends HTMLElement {
            constructor() {
                super();
                this.attachShadow({ mode: 'open' });
            }
            connectedCallback() {
                // @ts-ignore todo: improve typings
                for (const key in this.$$.slotted) {
                    // @ts-ignore todo: improve typings
                    this.appendChild(this.$$.slotted[key]);
                }
            }
            attributeChangedCallback(attr, _oldValue, newValue) {
                this[attr] = newValue;
            }
            $destroy() {
                destroy_component(this, 1);
                this.$destroy = noop;
            }
            $on(type, callback) {
                // TODO should this delegate to addEventListener?
                const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
                callbacks.push(callback);
                return () => {
                    const index = callbacks.indexOf(callback);
                    if (index !== -1)
                        callbacks.splice(index, 1);
                };
            }
            $set() {
                // overridden by instance, if it has props
            }
        };
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set() {
            // overridden by instance, if it has props
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, detail));
    }
    function append_dev(target, node) {
        dispatch_dev("SvelteDOMInsert", { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev("SvelteDOMInsert", { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev("SvelteDOMRemove", { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev("SvelteDOMAddEventListener", { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev("SvelteDOMRemoveEventListener", { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev("SvelteDOMRemoveAttribute", { node, attribute });
        else
            dispatch_dev("SvelteDOMSetAttribute", { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev("SvelteDOMSetProperty", { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        dispatch_dev("SvelteDOMSetData", { node: text, data });
        text.data = data;
    }
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error(`'target' is a required option`);
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn(`Component was already destroyed`); // eslint-disable-line no-console
            };
        }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */
    var byteToHex = [];
    for (var i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 0x100).toString(16).substr(1);
    }

    function bytesToUuid(buf, offset) {
      var i = offset || 0;
      var bth = byteToHex;
      // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
      return ([bth[buf[i++]], bth[buf[i++]], 
    	bth[buf[i++]], bth[buf[i++]], '-',
    	bth[buf[i++]], bth[buf[i++]], '-',
    	bth[buf[i++]], bth[buf[i++]], '-',
    	bth[buf[i++]], bth[buf[i++]], '-',
    	bth[buf[i++]], bth[buf[i++]],
    	bth[buf[i++]], bth[buf[i++]],
    	bth[buf[i++]], bth[buf[i++]]]).join('');
    }

    var bytesToUuid_1 = bytesToUuid;

    function uuidToBytes(uuid) {
      // Note: We assume we're being passed a valid uuid string
      var bytes = [];
      uuid.replace(/[a-fA-F0-9]{2}/g, function(hex) {
        bytes.push(parseInt(hex, 16));
      });

      return bytes;
    }

    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str)); // UTF8 escape
      var bytes = new Array(str.length);
      for (var i = 0; i < str.length; i++) {
        bytes[i] = str.charCodeAt(i);
      }
      return bytes;
    }

    var v35 = function(name, version, hashfunc) {
      var generateUUID = function(value, namespace, buf, offset) {
        var off = buf && offset || 0;

        if (typeof(value) == 'string') value = stringToBytes(value);
        if (typeof(namespace) == 'string') namespace = uuidToBytes(namespace);

        if (!Array.isArray(value)) throw TypeError('value must be an array of bytes');
        if (!Array.isArray(namespace) || namespace.length !== 16) throw TypeError('namespace must be uuid string or an Array of 16 byte values');

        // Per 4.3
        var bytes = hashfunc(namespace.concat(value));
        bytes[6] = (bytes[6] & 0x0f) | version;
        bytes[8] = (bytes[8] & 0x3f) | 0x80;

        if (buf) {
          for (var idx = 0; idx < 16; ++idx) {
            buf[off+idx] = bytes[idx];
          }
        }

        return buf || bytesToUuid_1(bytes);
      };

      // Function#name is not settable on some platforms (#270)
      try {
        generateUUID.name = name;
      } catch (err) {
      }

      // Pre-defined namespaces, per Appendix C
      generateUUID.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
      generateUUID.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';

      return generateUUID;
    };

    // Adapted from Chris Veness' SHA1 code at

    function f(s, x, y, z) {
      switch (s) {
        case 0: return (x & y) ^ (~x & z);
        case 1: return x ^ y ^ z;
        case 2: return (x & y) ^ (x & z) ^ (y & z);
        case 3: return x ^ y ^ z;
      }
    }

    function ROTL(x, n) {
      return (x << n) | (x>>> (32 - n));
    }

    function sha1(bytes) {
      var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
      var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

      if (typeof(bytes) == 'string') {
        var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape
        bytes = new Array(msg.length);
        for (var i = 0; i < msg.length; i++) bytes[i] = msg.charCodeAt(i);
      }

      bytes.push(0x80);

      var l = bytes.length/4 + 2;
      var N = Math.ceil(l/16);
      var M = new Array(N);

      for (var i=0; i<N; i++) {
        M[i] = new Array(16);
        for (var j=0; j<16; j++) {
          M[i][j] =
            bytes[i * 64 + j * 4] << 24 |
            bytes[i * 64 + j * 4 + 1] << 16 |
            bytes[i * 64 + j * 4 + 2] << 8 |
            bytes[i * 64 + j * 4 + 3];
        }
      }

      M[N - 1][14] = ((bytes.length - 1) * 8) /
        Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]);
      M[N - 1][15] = ((bytes.length - 1) * 8) & 0xffffffff;

      for (var i=0; i<N; i++) {
        var W = new Array(80);

        for (var t=0; t<16; t++) W[t] = M[i][t];
        for (var t=16; t<80; t++) {
          W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
        }

        var a = H[0];
        var b = H[1];
        var c = H[2];
        var d = H[3];
        var e = H[4];

        for (var t=0; t<80; t++) {
          var s = Math.floor(t/20);
          var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
          e = d;
          d = c;
          c = ROTL(b, 30) >>> 0;
          b = a;
          a = T;
        }

        H[0] = (H[0] + a) >>> 0;
        H[1] = (H[1] + b) >>> 0;
        H[2] = (H[2] + c) >>> 0;
        H[3] = (H[3] + d) >>> 0;
        H[4] = (H[4] + e) >>> 0;
      }

      return [
        H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff,
        H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff,
        H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff,
        H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff,
        H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff
      ];
    }

    var sha1Browser = sha1;

    var v5 = v35('v5', 0x50, sha1Browser);

    const storageKey = v5(window.location.hostname, v5.DNS);

    const showFilter = writable(false), showResults = writable(false);

    const tabIndex = writable(0), garageIndex = writable(0);

    window.onbeforeunload = async function() {

        const indexes = {};

        tabIndex.update(state => {
            indexes.tab = state;
            return state;
        });

        acctTab$1.update(state => {
            indexes.user = state;
            return state;
        });

        sessionStorage.setItem('idx', JSON.stringify(indexes));

        const cache = await caches.open('autoknct');
        await cache.delete('/bundle.js');
        await cache.delete('/bundle.css');
    };

    window.onload = async function() {
        if (sessionStorage.getItem('idx') != null && sessionStorage.getItem(storageKey) != null) {

            const indexes = await JSON.parse(sessionStorage.getItem('idx'));
            
            await tabIndex.set(indexes.tab);

            await acctTab$1.set(indexes.user);

            sessionStorage.removeItem('idx');
        }
        
        inactivityTime(); 
        const cache = await caches.open('autoknct');
        await cache.addAll(['/bundle.js', '/bundle.css']);
    };

    let inactivityTime = function () {
        let time;
        window.onload = resetTimer;
        // DOM Events
        document.onmousemove = resetTimer;
        document.onkeypress = resetTimer;
        document.onload = resetTimer;
        document.onmousemove = resetTimer;
        document.onmousedown = resetTimer; // touchscreen presses
        document.ontouchstart = resetTimer;
        document.onclick = resetTimer;     // touchpad clicks
        document.onscroll = resetTimer;    // scrolling with arrow keys
        document.onkeypress = resetTimer;

        function logout() {
            resetStates();
        }

        function resetTimer() {
            clearTimeout(time);
            time = setTimeout(logout, 1800000);
        }
    };

    const garageTab = writable({
        saved : false,
        shared : [],
        compare : [],
        owned : [],
    });

    const acctTab$1 = writable({
        userType : null,
        keyCode : '',
        isAuth : false,
        picture : null,
        uuid : '',
        username : '',
        name : '',
        email : '',
        tokens : null,
        users : []
    });

    const homeTab = writable({
        saved : false,
        week : [],
        next : [],
    });

    const searchTab = writable({
        saved : false,
        results : [],
        prevResults : [],
        count : 0,
        userInput : '',
        sort : 'Model',
        order : 'asc',
        filter : {
            startYear : '', endYear : '',
            CYL : '',
            Status : '',
            startDate : '', endDate : '',
            minMile : '', maxMile : '',
            minBid : '', maxBid : ''
        },
        xValues : [], xValuesPrev : [],
        leftYValues : [], leftYValuesPrev : [],
        rightYValues : [], rightYValuesPrev : []
    });

    function convertToCurrency(num) {
        return (num).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')
    }

    function invokeLambda(api, load) {
        return new Promise((resolve, reject) => {

            load.env = window.location.hostname;

            acctTab$1.update(state => {
                load.tokens = state.tokens || null;
                load.type = state.userType;
                return state;
            });
            
            if(typeof load.id == "undefined") {
                acctTab$1.update(state => {
                    load.id = state.uuid || sessionStorage.getItem(storageKey);
                    return state;
                });
            }

            fetch(api, {
                method: 'post',
                body: JSON.stringify(load),
                headers: { 'Content-Type': 'application/json' },
                'Access-Control-Allow-Origin' : '*'
            })
            .then(res =>
                res.json()
            )
            .then(json => {
                resolve(json);
            })
            .catch(err => 
                reject(err)
            );
        });
    }

    function updateGarage(garage) {
        garageTab.update(state => {
            state.saved = true;
            state.owned = garage.owned;
            state.compare = garage.compare;
            state.shared = garage.shared;
            return state;
        });
    }

    function resetStates() {

        sessionStorage.removeItem(storageKey);

        acctTab$1.set({
            userType : '',
            keyCode : '',
            isAuth : false,
            picture : null,
            uuid : '',
            username : '',
            name : '',
            email : '',
        });

        garageTab.set({
            saved : false,
            count : 0,
            shared : [],
            compare : [],
            owned : [],
        });

        searchTab.set({
            saved : false,
            results : [],
            prevResults : [],
            count : 0,
            userInput : '',
            sort : 'Model',
            order : 'asc',
            filter : {
                Year : '',
                CYL : '',
                Status : '',
                date : '',
                MinBid : '',
                MaxBid : '',
                MinMile : '',
                MaxMile : '',
            }
        });

        homeTab.set({
            saved : false,
            results : [],
            date : '',
        });

        tabIndex.set(0); garageIndex.set(0);
    }

    let id = 1;

    function getId() {
      return `svelte-tabs-${id++}`;
    }

    /* node_modules/svelte-tabs/src/Tabs.svelte generated by Svelte v3.12.1 */

    const file = "node_modules/svelte-tabs/src/Tabs.svelte";

    function create_fragment(ctx) {
    	var div, current, dispose;

    	const default_slot_template = ctx.$$slots.default;
    	const default_slot = create_slot(default_slot_template, ctx, null);

    	const block = {
    		c: function create() {
    			div = element("div");

    			if (default_slot) default_slot.c();

    			attr_dev(div, "class", "svelte-tabs");
    			add_location(div, file, 97, 0, 2405);
    			dispose = listen_dev(div, "keydown", ctx.handleKeyDown);
    		},

    		l: function claim(nodes) {
    			if (default_slot) default_slot.l(div_nodes);
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (default_slot && default_slot.p && changed.$$scope) {
    				default_slot.p(
    					get_slot_changes(default_slot_template, ctx, changed, null),
    					get_slot_context(default_slot_template, ctx, null)
    				);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			if (default_slot) default_slot.d(detaching);
    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
    	return block;
    }

    const TABS = {};

    function removeAndUpdateSelected(arr, item, selectedStore) {
      const index = arr.indexOf(item);
      arr.splice(index, 1);
      selectedStore.update(selected => selected === item ? (arr[index] || arr[arr.length - 1]) : selected);
    }

    function registerItem(arr, item, selectedStore) {
      arr.push(item);
      selectedStore.update(selected => selected || item);
      onDestroy(() => removeAndUpdateSelected(arr, item, selectedStore));
    }

    function instance($$self, $$props, $$invalidate) {
    	let $selectedTab;

    	

      let { initialSelectedIndex = 0 } = $$props;

      const tabElements = [];
      const tabs = [];
      const panels = [];

      const controls = writable({});
      const labeledBy = writable({});

      const selectedTab = writable(null); validate_store(selectedTab, 'selectedTab'); component_subscribe($$self, selectedTab, $$value => { $selectedTab = $$value; $$invalidate('$selectedTab', $selectedTab); });
      const selectedPanel = writable(null);

      function selectTab(tab) {
        const index = tabs.indexOf(tab);
        selectedTab.set(tab);
        selectedPanel.set(panels[index]);
      }

      setContext(TABS, {
        registerTab(tab) {
          registerItem(tabs, tab, selectedTab);
        },

        registerTabElement(tabElement) {
          tabElements.push(tabElement);
        },

        registerPanel(panel) {
          registerItem(panels, panel, selectedPanel);
        },

        selectTab,

        selectedTab,
        selectedPanel,

        controls,
        labeledBy
      });

      onMount(() => {
        selectTab(tabs[initialSelectedIndex]);
      });

      afterUpdate(() => {
        for (let i = 0; i < tabs.length; i++) {
          controls.update(controlsData => ({...controlsData, [tabs[i].id]: panels[i].id}));
          labeledBy.update(labeledByData => ({...labeledByData, [panels[i].id]: tabs[i].id}));
        }
      });

      async function handleKeyDown(event) {
        if (event.target.classList.contains('svelte-tabs__tab')) {
          let selectedIndex = tabs.indexOf($selectedTab);

          switch (event.key) {
            case 'ArrowRight':
              selectedIndex += 1;
              if (selectedIndex > tabs.length - 1) {
                selectedIndex = 0;
              }
              selectTab(tabs[selectedIndex]);
              tabElements[selectedIndex].focus();
              break;

            case 'ArrowLeft':
              selectedIndex -= 1;
              if (selectedIndex < 0) {
                selectedIndex = tabs.length - 1;
              }
              selectTab(tabs[selectedIndex]);
              tabElements[selectedIndex].focus();
          }
        }
      }

    	const writable_props = ['initialSelectedIndex'];
    	Object.keys($$props).forEach(key => {
    		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Tabs> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$props => {
    		if ('initialSelectedIndex' in $$props) $$invalidate('initialSelectedIndex', initialSelectedIndex = $$props.initialSelectedIndex);
    		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => {
    		return { initialSelectedIndex, $selectedTab };
    	};

    	$$self.$inject_state = $$props => {
    		if ('initialSelectedIndex' in $$props) $$invalidate('initialSelectedIndex', initialSelectedIndex = $$props.initialSelectedIndex);
    		if ('$selectedTab' in $$props) selectedTab.set($selectedTab);
    	};

    	return {
    		initialSelectedIndex,
    		selectedTab,
    		handleKeyDown,
    		$$slots,
    		$$scope
    	};
    }

    class Tabs extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, ["initialSelectedIndex"]);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Tabs", options, id: create_fragment.name });
    	}

    	get initialSelectedIndex() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set initialSelectedIndex(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-tabs/src/Tab.svelte generated by Svelte v3.12.1 */

    const file$1 = "node_modules/svelte-tabs/src/Tab.svelte";

    function create_fragment$1(ctx) {
    	var li, li_aria_controls_value, li_tabindex_value, current, dispose;

    	const default_slot_template = ctx.$$slots.default;
    	const default_slot = create_slot(default_slot_template, ctx, null);

    	const block = {
    		c: function create() {
    			li = element("li");

    			if (default_slot) default_slot.c();

    			attr_dev(li, "role", "tab");
    			attr_dev(li, "id", ctx.tab.id);
    			attr_dev(li, "aria-controls", li_aria_controls_value = ctx.$controls[ctx.tab.id]);
    			attr_dev(li, "aria-selected", ctx.isSelected);
    			attr_dev(li, "tabindex", li_tabindex_value = ctx.isSelected ? 0 : -1);
    			attr_dev(li, "class", "svelte-tabs__tab svelte-1fbofsd");
    			toggle_class(li, "svelte-tabs__selected", ctx.isSelected);
    			add_location(li, file$1, 45, 0, 812);
    			dispose = listen_dev(li, "click", ctx.click_handler);
    		},

    		l: function claim(nodes) {
    			if (default_slot) default_slot.l(li_nodes);
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);

    			if (default_slot) {
    				default_slot.m(li, null);
    			}

    			ctx.li_binding(li);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (default_slot && default_slot.p && changed.$$scope) {
    				default_slot.p(
    					get_slot_changes(default_slot_template, ctx, changed, null),
    					get_slot_context(default_slot_template, ctx, null)
    				);
    			}

    			if ((!current || changed.$controls) && li_aria_controls_value !== (li_aria_controls_value = ctx.$controls[ctx.tab.id])) {
    				attr_dev(li, "aria-controls", li_aria_controls_value);
    			}

    			if (!current || changed.isSelected) {
    				attr_dev(li, "aria-selected", ctx.isSelected);
    			}

    			if ((!current || changed.isSelected) && li_tabindex_value !== (li_tabindex_value = ctx.isSelected ? 0 : -1)) {
    				attr_dev(li, "tabindex", li_tabindex_value);
    			}

    			if (changed.isSelected) {
    				toggle_class(li, "svelte-tabs__selected", ctx.isSelected);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(li);
    			}

    			if (default_slot) default_slot.d(detaching);
    			ctx.li_binding(null);
    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$1.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $selectedTab, $controls;

    	

      let tabEl;

      const tab = {
        id: getId()
      };
      const { registerTab, registerTabElement, selectTab, selectedTab, controls } = getContext(TABS); validate_store(selectedTab, 'selectedTab'); component_subscribe($$self, selectedTab, $$value => { $selectedTab = $$value; $$invalidate('$selectedTab', $selectedTab); }); validate_store(controls, 'controls'); component_subscribe($$self, controls, $$value => { $controls = $$value; $$invalidate('$controls', $controls); });

      let isSelected;

      registerTab(tab);

      onMount(async () => {
        await tick();
        registerTabElement(tabEl);
      });

    	let { $$slots = {}, $$scope } = $$props;

    	function li_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			$$invalidate('tabEl', tabEl = $$value);
    		});
    	}

    	const click_handler = () => selectTab(tab);

    	$$self.$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('tabEl' in $$props) $$invalidate('tabEl', tabEl = $$props.tabEl);
    		if ('isSelected' in $$props) $$invalidate('isSelected', isSelected = $$props.isSelected);
    		if ('$selectedTab' in $$props) selectedTab.set($selectedTab);
    		if ('$controls' in $$props) controls.set($controls);
    	};

    	$$self.$$.update = ($$dirty = { $selectedTab: 1 }) => {
    		if ($$dirty.$selectedTab) { $$invalidate('isSelected', isSelected = $selectedTab === tab); }
    	};

    	return {
    		tabEl,
    		tab,
    		selectTab,
    		selectedTab,
    		controls,
    		isSelected,
    		$controls,
    		li_binding,
    		click_handler,
    		$$slots,
    		$$scope
    	};
    }

    class Tab extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Tab", options, id: create_fragment$1.name });
    	}
    }

    /* node_modules/svelte-tabs/src/TabList.svelte generated by Svelte v3.12.1 */

    const file$2 = "node_modules/svelte-tabs/src/TabList.svelte";

    function create_fragment$2(ctx) {
    	var ul, current;

    	const default_slot_template = ctx.$$slots.default;
    	const default_slot = create_slot(default_slot_template, ctx, null);

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			if (default_slot) default_slot.c();

    			attr_dev(ul, "role", "tablist");
    			attr_dev(ul, "class", "svelte-tabs__tab-list svelte-12yby2a");
    			add_location(ul, file$2, 8, 0, 116);
    		},

    		l: function claim(nodes) {
    			if (default_slot) default_slot.l(ul_nodes);
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			if (default_slot) {
    				default_slot.m(ul, null);
    			}

    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (default_slot && default_slot.p && changed.$$scope) {
    				default_slot.p(
    					get_slot_changes(default_slot_template, ctx, changed, null),
    					get_slot_context(default_slot_template, ctx, null)
    				);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(ul);
    			}

    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$2.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {};

    	return { $$slots, $$scope };
    }

    class TabList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "TabList", options, id: create_fragment$2.name });
    	}
    }

    /* node_modules/svelte-tabs/src/TabPanel.svelte generated by Svelte v3.12.1 */

    const file$3 = "node_modules/svelte-tabs/src/TabPanel.svelte";

    // (26:2) {#if $selectedPanel === panel}
    function create_if_block(ctx) {
    	var current;

    	const default_slot_template = ctx.$$slots.default;
    	const default_slot = create_slot(default_slot_template, ctx, null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},

    		l: function claim(nodes) {
    			if (default_slot) default_slot.l(nodes);
    		},

    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (default_slot && default_slot.p && changed.$$scope) {
    				default_slot.p(
    					get_slot_changes(default_slot_template, ctx, changed, null),
    					get_slot_context(default_slot_template, ctx, null)
    				);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block.name, type: "if", source: "(26:2) {#if $selectedPanel === panel}", ctx });
    	return block;
    }

    function create_fragment$3(ctx) {
    	var div, div_aria_labelledby_value, current;

    	var if_block = (ctx.$selectedPanel === ctx.panel) && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "id", ctx.panel.id);
    			attr_dev(div, "aria-labelledby", div_aria_labelledby_value = ctx.$labeledBy[ctx.panel.id]);
    			attr_dev(div, "class", "svelte-tabs__tab-panel svelte-epfyet");
    			attr_dev(div, "role", "tabpanel");
    			add_location(div, file$3, 20, 0, 338);
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (ctx.$selectedPanel === ctx.panel) {
    				if (if_block) {
    					if_block.p(changed, ctx);
    					transition_in(if_block, 1);
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();
    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});
    				check_outros();
    			}

    			if ((!current || changed.$labeledBy) && div_aria_labelledby_value !== (div_aria_labelledby_value = ctx.$labeledBy[ctx.panel.id])) {
    				attr_dev(div, "aria-labelledby", div_aria_labelledby_value);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			if (if_block) if_block.d();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$3.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let $labeledBy, $selectedPanel;

    	

      const panel = {
        id: getId()
      };
      const { registerPanel, selectedPanel, labeledBy } = getContext(TABS); validate_store(selectedPanel, 'selectedPanel'); component_subscribe($$self, selectedPanel, $$value => { $selectedPanel = $$value; $$invalidate('$selectedPanel', $selectedPanel); }); validate_store(labeledBy, 'labeledBy'); component_subscribe($$self, labeledBy, $$value => { $labeledBy = $$value; $$invalidate('$labeledBy', $labeledBy); });

      registerPanel(panel);

    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('$labeledBy' in $$props) labeledBy.set($labeledBy);
    		if ('$selectedPanel' in $$props) selectedPanel.set($selectedPanel);
    	};

    	return {
    		panel,
    		selectedPanel,
    		labeledBy,
    		$labeledBy,
    		$selectedPanel,
    		$$slots,
    		$$scope
    	};
    }

    class TabPanel extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "TabPanel", options, id: create_fragment$3.name });
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 }) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const transform = style.transform === 'none' ? '' : style.transform;
        const od = target_opacity * (1 - opacity);
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
        };
    }

    /* src/Components/Shared/Modal.svelte generated by Svelte v3.12.1 */

    const file$4 = "src/Components/Shared/Modal.svelte";

    function create_fragment$4(ctx) {
    	var div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "id", "opaque");
    			attr_dev(div, "class", "svelte-l27uvn");
    			add_location(div, file$4, 1, 0, 1);
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},

    		p: noop,
    		i: noop,
    		o: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$4.name, type: "component", source: "", ctx });
    	return block;
    }

    class Modal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, null, create_fragment$4, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Modal", options, id: create_fragment$4.name });
    	}
    }

    /* src/Components/Shared/statusMsg.svelte generated by Svelte v3.12.1 */

    const file$5 = "src/Components/Shared/statusMsg.svelte";

    function create_fragment$5(ctx) {
    	var div, h5, t0, t1, p, t2;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h5 = element("h5");
    			t0 = text(ctx.heading);
    			t1 = space();
    			p = element("p");
    			t2 = text(ctx.message);
    			attr_dev(h5, "id", "heading");
    			attr_dev(h5, "class", "svelte-1mgwsig");
    			add_location(h5, file$5, 7, 4, 156);
    			attr_dev(p, "id", "body");
    			attr_dev(p, "class", "svelte-1mgwsig");
    			add_location(p, file$5, 8, 4, 192);
    			attr_dev(div, "id", "errtemp");
    			attr_dev(div, "class", "svelte-1mgwsig");
    			add_location(div, file$5, 6, 0, 133);
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h5);
    			append_dev(h5, t0);
    			append_dev(div, t1);
    			append_dev(div, p);
    			append_dev(p, t2);
    		},

    		p: function update(changed, ctx) {
    			if (changed.heading) {
    				set_data_dev(t0, ctx.heading);
    			}

    			if (changed.message) {
    				set_data_dev(t2, ctx.message);
    			}
    		},

    		i: noop,
    		o: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$5.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { heading, message, status } = $$props;

        document.documentElement.style.setProperty('--msg-color', status);

    	const writable_props = ['heading', 'message', 'status'];
    	Object.keys($$props).forEach(key => {
    		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<StatusMsg> was created with unknown prop '${key}'`);
    	});

    	$$self.$set = $$props => {
    		if ('heading' in $$props) $$invalidate('heading', heading = $$props.heading);
    		if ('message' in $$props) $$invalidate('message', message = $$props.message);
    		if ('status' in $$props) $$invalidate('status', status = $$props.status);
    	};

    	$$self.$capture_state = () => {
    		return { heading, message, status };
    	};

    	$$self.$inject_state = $$props => {
    		if ('heading' in $$props) $$invalidate('heading', heading = $$props.heading);
    		if ('message' in $$props) $$invalidate('message', message = $$props.message);
    		if ('status' in $$props) $$invalidate('status', status = $$props.status);
    	};

    	return { heading, message, status };
    }

    class StatusMsg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$5, safe_not_equal, ["heading", "message", "status"]);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "StatusMsg", options, id: create_fragment$5.name });

    		const { ctx } = this.$$;
    		const props = options.props || {};
    		if (ctx.heading === undefined && !('heading' in props)) {
    			console.warn("<StatusMsg> was created without expected prop 'heading'");
    		}
    		if (ctx.message === undefined && !('message' in props)) {
    			console.warn("<StatusMsg> was created without expected prop 'message'");
    		}
    		if (ctx.status === undefined && !('status' in props)) {
    			console.warn("<StatusMsg> was created without expected prop 'status'");
    		}
    	}

    	get heading() {
    		throw new Error("<StatusMsg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set heading(value) {
    		throw new Error("<StatusMsg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get message() {
    		throw new Error("<StatusMsg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set message(value) {
    		throw new Error("<StatusMsg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get status() {
    		throw new Error("<StatusMsg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set status(value) {
    		throw new Error("<StatusMsg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const lambda = {
    	nodeAPI: "https://uxjpplnkm9.execute-api.us-east-1.amazonaws.com/dev/",
    	pythonAPI: "https://jd0srmrxrh.execute-api.us-east-1.amazonaws.com/dev/"
    };
    var env = {
    	lambda: lambda
    };

    /* src/Components/Account/SearchUsers.svelte generated by Svelte v3.12.1 */

    const file$6 = "src/Components/Account/SearchUsers.svelte";

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.user = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.cat = list[i];
    	return child_ctx;
    }

    function get_each_context(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.cat = list[i];
    	return child_ctx;
    }

    // (244:0) {#if showMsg}
    function create_if_block_10(ctx) {
    	var div, div_intro, div_outro, current;

    	var message_1 = new StatusMsg({
    		props: {
    		heading: ctx.heading,
    		message: ctx.message,
    		status: ctx.statusColor
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			div = element("div");
    			message_1.$$.fragment.c();
    			attr_dev(div, "id", "status");
    			attr_dev(div, "class", "container-fluid");
    			add_location(div, file$6, 244, 4, 6899);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(message_1, div, null);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var message_1_changes = {};
    			if (changed.heading) message_1_changes.heading = ctx.heading;
    			if (changed.message) message_1_changes.message = ctx.message;
    			if (changed.statusColor) message_1_changes.status = ctx.statusColor;
    			message_1.$set(message_1_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(message_1.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				if (!div_intro) div_intro = create_in_transition(div, fly, { x:200, duration:500 });
    				div_intro.start();
    			});

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(message_1.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();

    			div_outro = create_out_transition(div, fly, { x:200, duration:500 });

    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			destroy_component(message_1);

    			if (detaching) {
    				if (div_outro) div_outro.end();
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_10.name, type: "if", source: "(244:0) {#if showMsg}", ctx });
    	return block;
    }

    // (275:0) {:else}
    function create_else_block(ctx) {
    	var t0, select, option, t2, input, t3, if_block1_anchor, dispose;

    	function select_block_type_1(changed, ctx) {
    		if (ctx.$acctTab.email == 'admin@autoknct.com') return create_if_block_9;
    		return create_else_block_4;
    	}

    	var current_block_type = select_block_type_1(null, ctx);
    	var if_block0 = current_block_type(ctx);

    	let each_value_2 = ctx.catList;

    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	function select_block_type_2(changed, ctx) {
    		if (ctx.count == 0) return create_if_block_2;
    		return create_else_block_1;
    	}

    	var current_block_type_1 = select_block_type_2(null, ctx);
    	var if_block1 = current_block_type_1(ctx);

    	const block = {
    		c: function create() {
    			if_block0.c();
    			t0 = space();
    			select = element("select");
    			option = element("option");
    			option.textContent = "Category";

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			input = element("input");
    			t3 = space();
    			if_block1.c();
    			if_block1_anchor = empty();
    			option.__value = "";
    			option.value = option.__value;
    			option.disabled = true;
    			option.selected = true;
    			add_location(option, file$6, 282, 8, 8794);
    			if (ctx.currCat === void 0) add_render_callback(() => ctx.select_change_handler_1.call(select));
    			attr_dev(select, "class", "form-control filterInput svelte-xxpu2v");
    			add_location(select, file$6, 281, 4, 8694);
    			attr_dev(input, "id", "userSearch");
    			attr_dev(input, "class", "form-control svelte-xxpu2v");
    			attr_dev(input, "placeholder", "Search Users");
    			add_location(input, file$6, 288, 4, 8968);

    			dispose = [
    				listen_dev(select, "change", ctx.select_change_handler_1),
    				listen_dev(select, "change", ctx.filterUsers),
    				listen_dev(input, "input", ctx.input_input_handler_1),
    				listen_dev(input, "keyup", ctx.searchUser)
    			];
    		},

    		m: function mount(target, anchor) {
    			if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, select, anchor);
    			append_dev(select, option);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select, null);
    			}

    			select_option(select, ctx.currCat);

    			insert_dev(target, t2, anchor);
    			insert_dev(target, input, anchor);

    			set_input_value(input, ctx.userInput);

    			insert_dev(target, t3, anchor);
    			if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (current_block_type !== (current_block_type = select_block_type_1(changed, ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);
    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			}

    			if (changed.catList) {
    				each_value_2 = ctx.catList;

    				let i;
    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    					} else {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}
    				each_blocks.length = each_value_2.length;
    			}

    			if (changed.currCat) select_option(select, ctx.currCat);
    			if (changed.userInput && (input.value !== ctx.userInput)) set_input_value(input, ctx.userInput);

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_2(changed, ctx)) && if_block1) {
    				if_block1.p(changed, ctx);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);
    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			}
    		},

    		d: function destroy(detaching) {
    			if_block0.d(detaching);

    			if (detaching) {
    				detach_dev(t0);
    				detach_dev(select);
    			}

    			destroy_each(each_blocks, detaching);

    			if (detaching) {
    				detach_dev(t2);
    				detach_dev(input);
    				detach_dev(t3);
    			}

    			if_block1.d(detaching);

    			if (detaching) {
    				detach_dev(if_block1_anchor);
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block.name, type: "else", source: "(275:0) {:else}", ctx });
    	return block;
    }

    // (250:0) {#if addUser}
    function create_if_block$1(ctx) {
    	var div1, h3, t1, input0, t2, input1, t3, input2, t4, input3, t5, select, option, t7, t8, div0, button, t9, i, dispose;

    	let each_value = ctx.catList;

    	let each_blocks = [];

    	for (let i_1 = 0; i_1 < each_value.length; i_1 += 1) {
    		each_blocks[i_1] = create_each_block(get_each_context(ctx, each_value, i_1));
    	}

    	var if_block = (ctx.currCat[0] == 'C' || ctx.currCat[0] == 'B') && create_if_block_1(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h3 = element("h3");
    			h3.textContent = "Add User";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			input1 = element("input");
    			t3 = space();
    			input2 = element("input");
    			t4 = space();
    			input3 = element("input");
    			t5 = space();
    			select = element("select");
    			option = element("option");
    			option.textContent = "Category";

    			for (let i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
    				each_blocks[i_1].c();
    			}

    			t7 = space();
    			if (if_block) if_block.c();
    			t8 = space();
    			div0 = element("div");
    			button = element("button");
    			t9 = text("Add User ");
    			i = element("i");
    			set_style(h3, "text-align", "center");
    			set_style(h3, "margin-top", "10px");
    			add_location(h3, file$6, 251, 8, 7167);
    			attr_dev(input0, "class", "userform form-control svelte-xxpu2v");
    			attr_dev(input0, "placeholder", "First Name");
    			add_location(input0, file$6, 253, 8, 7239);
    			attr_dev(input1, "class", "userform form-control svelte-xxpu2v");
    			attr_dev(input1, "placeholder", "Middle Name");
    			add_location(input1, file$6, 254, 8, 7337);
    			attr_dev(input2, "class", "userform form-control svelte-xxpu2v");
    			attr_dev(input2, "placeholder", "Last Name");
    			add_location(input2, file$6, 255, 8, 7434);
    			attr_dev(input3, "onfocus", "this.type='Date'");
    			attr_dev(input3, "class", "userform form-control svelte-xxpu2v");
    			attr_dev(input3, "placeholder", "D.O.B.");
    			add_location(input3, file$6, 257, 8, 7540);
    			option.__value = "";
    			option.value = option.__value;
    			option.disabled = true;
    			option.selected = true;
    			add_location(option, file$6, 260, 12, 7758);
    			if (ctx.currCat === void 0) add_render_callback(() => ctx.select_change_handler.call(select));
    			attr_dev(select, "class", "form-control userform svelte-xxpu2v");
    			add_location(select, file$6, 259, 8, 7657);
    			attr_dev(i, "class", "fa fa-user-plus svelte-xxpu2v");
    			add_location(i, file$6, 271, 113, 8256);
    			set_style(button, "margin-left", "60px");
    			set_style(button, "width", "25%");
    			attr_dev(button, "class", "btn btn-success svelte-xxpu2v");
    			add_location(button, file$6, 271, 12, 8155);
    			set_style(div0, "width", "100%");
    			add_location(div0, file$6, 270, 8, 8116);
    			set_style(div1, "float", "right");
    			add_location(div1, file$6, 250, 4, 7131);

    			dispose = [
    				listen_dev(input0, "input", ctx.input0_input_handler),
    				listen_dev(input1, "input", ctx.input1_input_handler),
    				listen_dev(input2, "input", ctx.input2_input_handler),
    				listen_dev(input3, "input", ctx.input3_input_handler),
    				listen_dev(select, "change", ctx.select_change_handler),
    				listen_dev(select, "change", ctx.filterUsers),
    				listen_dev(button, "click", ctx.createUser)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h3);
    			append_dev(div1, t1);
    			append_dev(div1, input0);

    			set_input_value(input0, ctx.firstName);

    			append_dev(div1, t2);
    			append_dev(div1, input1);

    			set_input_value(input1, ctx.midName);

    			append_dev(div1, t3);
    			append_dev(div1, input2);

    			set_input_value(input2, ctx.lastName);

    			append_dev(div1, t4);
    			append_dev(div1, input3);

    			set_input_value(input3, ctx.dob);

    			append_dev(div1, t5);
    			append_dev(div1, select);
    			append_dev(select, option);

    			for (let i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
    				each_blocks[i_1].m(select, null);
    			}

    			select_option(select, ctx.currCat);

    			append_dev(div1, t7);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t8);
    			append_dev(div1, div0);
    			append_dev(div0, button);
    			append_dev(button, t9);
    			append_dev(button, i);
    		},

    		p: function update(changed, ctx) {
    			if (changed.firstName && (input0.value !== ctx.firstName)) set_input_value(input0, ctx.firstName);
    			if (changed.midName && (input1.value !== ctx.midName)) set_input_value(input1, ctx.midName);
    			if (changed.lastName && (input2.value !== ctx.lastName)) set_input_value(input2, ctx.lastName);
    			if (changed.dob && (input3.value !== ctx.dob)) set_input_value(input3, ctx.dob);

    			if (changed.catList) {
    				each_value = ctx.catList;

    				let i_1;
    				for (i_1 = 0; i_1 < each_value.length; i_1 += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i_1);

    					if (each_blocks[i_1]) {
    						each_blocks[i_1].p(changed, child_ctx);
    					} else {
    						each_blocks[i_1] = create_each_block(child_ctx);
    						each_blocks[i_1].c();
    						each_blocks[i_1].m(select, null);
    					}
    				}

    				for (; i_1 < each_blocks.length; i_1 += 1) {
    					each_blocks[i_1].d(1);
    				}
    				each_blocks.length = each_value.length;
    			}

    			if (changed.currCat) select_option(select, ctx.currCat);

    			if (ctx.currCat[0] == 'C' || ctx.currCat[0] == 'B') {
    				if (if_block) {
    					if_block.p(changed, ctx);
    				} else {
    					if_block = create_if_block_1(ctx);
    					if_block.c();
    					if_block.m(div1, t8);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div1);
    			}

    			destroy_each(each_blocks, detaching);

    			if (if_block) if_block.d();
    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$1.name, type: "if", source: "(250:0) {#if addUser}", ctx });
    	return block;
    }

    // (278:4) {:else}
    function create_else_block_4(ctx) {
    	var button, dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Reset";
    			set_style(button, "float", "right");
    			set_style(button, "margin-top", "20px");
    			attr_dev(button, "class", "btn btn-primary svelte-xxpu2v");
    			add_location(button, file$6, 278, 8, 8568);
    			dispose = listen_dev(button, "click", ctx.resetUsers);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_4.name, type: "else", source: "(278:4) {:else}", ctx });
    	return block;
    }

    // (276:4) {#if $acctTab.email == 'admin@autoknct.com'}
    function create_if_block_9(ctx) {
    	var button, t, i, dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text("Add User ");
    			i = element("i");
    			attr_dev(i, "class", "fa fa-user-plus svelte-xxpu2v");
    			add_location(i, file$6, 276, 120, 8505);
    			set_style(button, "float", "right");
    			set_style(button, "margin-top", "20px");
    			attr_dev(button, "class", "btn btn-primary svelte-xxpu2v");
    			add_location(button, file$6, 276, 8, 8393);
    			dispose = listen_dev(button, "click", ctx.click_handler);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);
    			append_dev(button, i);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_9.name, type: "if", source: "(276:4) {#if $acctTab.email == 'admin@autoknct.com'}", ctx });
    	return block;
    }

    // (284:8) {#each catList as cat}
    function create_each_block_2(ctx) {
    	var option, t_value = ctx.cat + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.cat;
    			option.value = option.__value;
    			add_location(option, file$6, 284, 12, 8892);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_2.name, type: "each", source: "(284:8) {#each catList as cat}", ctx });
    	return block;
    }

    // (296:4) {:else}
    function create_else_block_1(ctx) {
    	var each_1_anchor;

    	let each_value_1 = ctx.users;

    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.$acctTab || changed.users) {
    				each_value_1 = ctx.users;

    				let i;
    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}
    				each_blocks.length = each_value_1.length;
    			}
    		},

    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);

    			if (detaching) {
    				detach_dev(each_1_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_1.name, type: "else", source: "(296:4) {:else}", ctx });
    	return block;
    }

    // (291:4) {#if count == 0}
    function create_if_block_2(ctx) {
    	var div, img, t, h6;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			t = space();
    			h6 = element("h6");
    			h6.textContent = "Loading...";
    			attr_dev(img, "src", "https://autoarch.blob.core.windows.net/resources/loader.gif");
    			attr_dev(img, "alt", "Loader");
    			add_location(img, file$6, 292, 12, 9162);
    			attr_dev(div, "class", "text-center");
    			add_location(div, file$6, 291, 8, 9123);
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$6, 294, 8, 9273);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			insert_dev(target, t, anchor);
    			insert_dev(target, h6, anchor);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    				detach_dev(t);
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2.name, type: "if", source: "(291:4) {#if count == 0}", ctx });
    	return block;
    }

    // (304:28) {:else}
    function create_else_block_3(ctx) {
    	var img, img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "alt", "picture");
    			attr_dev(img, "src", img_src_value = ctx.user.Picture);
    			set_style(img, "width", "85px");
    			set_style(img, "height", "85px");
    			set_style(img, "border-radius", "0.4rem");
    			set_style(img, "outline", "none");
    			add_location(img, file$6, 304, 32, 9872);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.users) && img_src_value !== (img_src_value = ctx.user.Picture)) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_3.name, type: "else", source: "(304:28) {:else}", ctx });
    	return block;
    }

    // (302:28) {#if user.Picture == null}
    function create_if_block_8(ctx) {
    	var img;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "alt", "picture");
    			attr_dev(img, "src", 'https://source.unsplash.com/900x900/?automobile');
    			set_style(img, "width", "85px");
    			set_style(img, "height", "85px");
    			set_style(img, "border-radius", "0.4rem");
    			set_style(img, "outline", "none");
    			add_location(img, file$6, 302, 32, 9658);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_8.name, type: "if", source: "(302:28) {#if user.Picture == null}", ctx });
    	return block;
    }

    // (320:24) {:else}
    function create_else_block_2(ctx) {
    	var p, t, b;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text("Category: ");
    			b = element("b");
    			b.textContent = "Customer";
    			add_location(b, file$6, 320, 41, 10705);
    			add_location(p, file$6, 320, 28, 10692);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    			append_dev(p, b);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(p);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_2.name, type: "else", source: "(320:24) {:else}", ctx });
    	return block;
    }

    // (318:54) 
    function create_if_block_7(ctx) {
    	var p, t, b;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text("Category: ");
    			b = element("b");
    			b.textContent = "Business";
    			add_location(b, file$6, 318, 41, 10610);
    			add_location(p, file$6, 318, 28, 10597);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    			append_dev(p, b);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(p);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_7.name, type: "if", source: "(318:54) ", ctx });
    	return block;
    }

    // (316:24) {#if user.Type[0] == 'A'}
    function create_if_block_6(ctx) {
    	var p, t, b;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text("Category: ");
    			b = element("b");
    			b.textContent = "Administrator";
    			add_location(b, file$6, 316, 41, 10487);
    			add_location(p, file$6, 316, 28, 10474);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    			append_dev(p, b);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(p);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_6.name, type: "if", source: "(316:24) {#if user.Type[0] == 'A'}", ctx });
    	return block;
    }

    // (326:24) {#if $acctTab.uuid != user.id}
    function create_if_block_3(ctx) {
    	var button, t0, i, t1, if_block_anchor;

    	function select_block_type_5(changed, ctx) {
    		if (ctx.user.Type[0] != 'A') return create_if_block_4;
    		if (ctx.user.Type[0] == 'A' && ctx.$acctTab.email == 'admin@autoknct.com') return create_if_block_5;
    	}

    	var current_block_type = select_block_type_5(null, ctx);
    	var if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			button = element("button");
    			t0 = text("Email User ");
    			i = element("i");
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(i, "class", "fa fa-envelope");
    			add_location(i, file$6, 326, 110, 11125);
    			set_style(button, "margin-bottom", "10px");
    			set_style(button, "width", "100%");
    			attr_dev(button, "class", "btn btn-success svelte-xxpu2v");
    			add_location(button, file$6, 326, 28, 11043);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			append_dev(button, i);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (current_block_type === (current_block_type = select_block_type_5(changed, ctx)) && if_block) {
    				if_block.p(changed, ctx);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);
    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    				detach_dev(t1);
    			}

    			if (if_block) if_block.d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_3.name, type: "if", source: "(326:24) {#if $acctTab.uuid != user.id}", ctx });
    	return block;
    }

    // (331:100) 
    function create_if_block_5(ctx) {
    	var button0, t0, i0, button0_disabled_value, t1, button1, t2, i1, dispose;

    	function click_handler_3() {
    		return ctx.click_handler_3(ctx);
    	}

    	function click_handler_4() {
    		return ctx.click_handler_4(ctx);
    	}

    	const block = {
    		c: function create() {
    			button0 = element("button");
    			t0 = text("Disable User ");
    			i0 = element("i");
    			t1 = space();
    			button1 = element("button");
    			t2 = text("Delete User ");
    			i1 = element("i");
    			attr_dev(i0, "class", "fa fa-ban");
    			add_location(i0, file$6, 331, 212, 11989);
    			set_style(button0, "margin-bottom", "10px");
    			set_style(button0, "width", "100%");
    			attr_dev(button0, "class", "btn btn-warning svelte-xxpu2v");
    			button0.disabled = button0_disabled_value = !ctx.user.Enabled;
    			add_location(button0, file$6, 331, 32, 11809);
    			attr_dev(i1, "class", "fa fa-user-times svelte-xxpu2v");
    			add_location(i1, file$6, 332, 163, 12188);
    			set_style(button1, "width", "100%");
    			attr_dev(button1, "class", "btn btn-danger svelte-xxpu2v");
    			add_location(button1, file$6, 332, 32, 12057);

    			dispose = [
    				listen_dev(button0, "click", click_handler_3),
    				listen_dev(button1, "click", click_handler_4)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button0, anchor);
    			append_dev(button0, t0);
    			append_dev(button0, i0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button1, anchor);
    			append_dev(button1, t2);
    			append_dev(button1, i1);
    		},

    		p: function update(changed, new_ctx) {
    			ctx = new_ctx;
    			if ((changed.users) && button0_disabled_value !== (button0_disabled_value = !ctx.user.Enabled)) {
    				prop_dev(button0, "disabled", button0_disabled_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button0);
    				detach_dev(t1);
    				detach_dev(button1);
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_5.name, type: "if", source: "(331:100) ", ctx });
    	return block;
    }

    // (328:28) {#if user.Type[0] != 'A'}
    function create_if_block_4(ctx) {
    	var button0, t0, i0, button0_disabled_value, t1, button1, t2, i1, dispose;

    	function click_handler_1() {
    		return ctx.click_handler_1(ctx);
    	}

    	function click_handler_2() {
    		return ctx.click_handler_2(ctx);
    	}

    	const block = {
    		c: function create() {
    			button0 = element("button");
    			t0 = text("Disable User ");
    			i0 = element("i");
    			t1 = space();
    			button1 = element("button");
    			t2 = text("Delete User ");
    			i1 = element("i");
    			attr_dev(i0, "class", "fa fa-ban");
    			add_location(i0, file$6, 328, 212, 11433);
    			set_style(button0, "margin-bottom", "10px");
    			set_style(button0, "width", "100%");
    			attr_dev(button0, "class", "btn btn-warning svelte-xxpu2v");
    			button0.disabled = button0_disabled_value = !ctx.user.Enabled;
    			add_location(button0, file$6, 328, 32, 11253);
    			attr_dev(i1, "class", "fa fa-user-times svelte-xxpu2v");
    			add_location(i1, file$6, 329, 163, 11632);
    			set_style(button1, "width", "100%");
    			attr_dev(button1, "class", "btn btn-danger svelte-xxpu2v");
    			add_location(button1, file$6, 329, 32, 11501);

    			dispose = [
    				listen_dev(button0, "click", click_handler_1),
    				listen_dev(button1, "click", click_handler_2)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button0, anchor);
    			append_dev(button0, t0);
    			append_dev(button0, i0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button1, anchor);
    			append_dev(button1, t2);
    			append_dev(button1, i1);
    		},

    		p: function update(changed, new_ctx) {
    			ctx = new_ctx;
    			if ((changed.users) && button0_disabled_value !== (button0_disabled_value = !ctx.user.Enabled)) {
    				prop_dev(button0, "disabled", button0_disabled_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button0);
    				detach_dev(t1);
    				detach_dev(button1);
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_4.name, type: "if", source: "(328:28) {#if user.Type[0] != 'A'}", ctx });
    	return block;
    }

    // (297:8) {#each users as user}
    function create_each_block_1(ctx) {
    	var table, tr, td0, div, t0, td1, p0, t1, b0, t2_value = ctx.user.Name + "", t2, t3, p1, t4, b1, t5_value = ctx.user.Username + "", t5, t6, p2, t7, b2, t8_value = ctx.user.Email + "", t8, t9, td2, p3, t10, b3, t11_value = ctx.user.Status + "", t11, t12, t13, p4, t14, b4, t15_value = ctx.user.Garage.Owned.length + ctx.user.Garage.Shared.length + ctx.user.Garage.Compare.length + "", t15, t16, td3, t17;

    	function select_block_type_3(changed, ctx) {
    		if (ctx.user.Picture == null) return create_if_block_8;
    		return create_else_block_3;
    	}

    	var current_block_type = select_block_type_3(null, ctx);
    	var if_block0 = current_block_type(ctx);

    	function select_block_type_4(changed, ctx) {
    		if (ctx.user.Type[0] == 'A') return create_if_block_6;
    		if (ctx.user.Type[0] == 'B') return create_if_block_7;
    		return create_else_block_2;
    	}

    	var current_block_type_1 = select_block_type_4(null, ctx);
    	var if_block1 = current_block_type_1(ctx);

    	var if_block2 = (ctx.$acctTab.uuid != ctx.user.id) && create_if_block_3(ctx);

    	const block = {
    		c: function create() {
    			table = element("table");
    			tr = element("tr");
    			td0 = element("td");
    			div = element("div");
    			if_block0.c();
    			t0 = space();
    			td1 = element("td");
    			p0 = element("p");
    			t1 = text("Name: ");
    			b0 = element("b");
    			t2 = text(t2_value);
    			t3 = space();
    			p1 = element("p");
    			t4 = text("Username: ");
    			b1 = element("b");
    			t5 = text(t5_value);
    			t6 = space();
    			p2 = element("p");
    			t7 = text("Email: ");
    			b2 = element("b");
    			t8 = text(t8_value);
    			t9 = space();
    			td2 = element("td");
    			p3 = element("p");
    			t10 = text("Status: ");
    			b3 = element("b");
    			t11 = text(t11_value);
    			t12 = space();
    			if_block1.c();
    			t13 = space();
    			p4 = element("p");
    			t14 = text("Garage Count: ");
    			b4 = element("b");
    			t15 = text(t15_value);
    			t16 = space();
    			td3 = element("td");
    			if (if_block2) if_block2.c();
    			t17 = space();
    			attr_dev(div, "id", "pic");
    			attr_dev(div, "class", "svelte-xxpu2v");
    			add_location(div, file$6, 300, 24, 9554);
    			attr_dev(td0, "align", "center");
    			attr_dev(td0, "width", "100px");
    			add_location(td0, file$6, 299, 20, 9495);
    			add_location(b0, file$6, 309, 33, 10133);
    			add_location(p0, file$6, 309, 24, 10124);
    			add_location(b1, file$6, 310, 37, 10194);
    			add_location(p1, file$6, 310, 24, 10181);
    			add_location(b2, file$6, 311, 34, 10256);
    			add_location(p2, file$6, 311, 24, 10246);
    			add_location(td1, file$6, 308, 20, 10094);
    			add_location(b3, file$6, 314, 35, 10369);
    			add_location(p3, file$6, 314, 24, 10358);
    			add_location(b4, file$6, 322, 41, 10798);
    			add_location(p4, file$6, 322, 24, 10781);
    			add_location(td2, file$6, 313, 20, 10328);
    			attr_dev(td3, "width", "25%");
    			add_location(td3, file$6, 324, 20, 10941);
    			add_location(tr, file$6, 298, 16, 9469);
    			attr_dev(table, "cellpadding", "10");
    			attr_dev(table, "class", "user svelte-xxpu2v");
    			attr_dev(table, "width", "90%");
    			attr_dev(table, "align", "right");
    			attr_dev(table, "border", "0");
    			add_location(table, file$6, 297, 12, 9377);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, tr);
    			append_dev(tr, td0);
    			append_dev(td0, div);
    			if_block0.m(div, null);
    			append_dev(tr, t0);
    			append_dev(tr, td1);
    			append_dev(td1, p0);
    			append_dev(p0, t1);
    			append_dev(p0, b0);
    			append_dev(b0, t2);
    			append_dev(td1, t3);
    			append_dev(td1, p1);
    			append_dev(p1, t4);
    			append_dev(p1, b1);
    			append_dev(b1, t5);
    			append_dev(td1, t6);
    			append_dev(td1, p2);
    			append_dev(p2, t7);
    			append_dev(p2, b2);
    			append_dev(b2, t8);
    			append_dev(tr, t9);
    			append_dev(tr, td2);
    			append_dev(td2, p3);
    			append_dev(p3, t10);
    			append_dev(p3, b3);
    			append_dev(b3, t11);
    			append_dev(td2, t12);
    			if_block1.m(td2, null);
    			append_dev(td2, t13);
    			append_dev(td2, p4);
    			append_dev(p4, t14);
    			append_dev(p4, b4);
    			append_dev(b4, t15);
    			append_dev(tr, t16);
    			append_dev(tr, td3);
    			if (if_block2) if_block2.m(td3, null);
    			append_dev(table, t17);
    		},

    		p: function update(changed, ctx) {
    			if (current_block_type === (current_block_type = select_block_type_3(changed, ctx)) && if_block0) {
    				if_block0.p(changed, ctx);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);
    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div, null);
    				}
    			}

    			if ((changed.users) && t2_value !== (t2_value = ctx.user.Name + "")) {
    				set_data_dev(t2, t2_value);
    			}

    			if ((changed.users) && t5_value !== (t5_value = ctx.user.Username + "")) {
    				set_data_dev(t5, t5_value);
    			}

    			if ((changed.users) && t8_value !== (t8_value = ctx.user.Email + "")) {
    				set_data_dev(t8, t8_value);
    			}

    			if ((changed.users) && t11_value !== (t11_value = ctx.user.Status + "")) {
    				set_data_dev(t11, t11_value);
    			}

    			if (current_block_type_1 !== (current_block_type_1 = select_block_type_4(changed, ctx))) {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);
    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(td2, t13);
    				}
    			}

    			if ((changed.users) && t15_value !== (t15_value = ctx.user.Garage.Owned.length + ctx.user.Garage.Shared.length + ctx.user.Garage.Compare.length + "")) {
    				set_data_dev(t15, t15_value);
    			}

    			if (ctx.$acctTab.uuid != ctx.user.id) {
    				if (if_block2) {
    					if_block2.p(changed, ctx);
    				} else {
    					if_block2 = create_if_block_3(ctx);
    					if_block2.c();
    					if_block2.m(td3, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(table);
    			}

    			if_block0.d();
    			if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_1.name, type: "each", source: "(297:8) {#each users as user}", ctx });
    	return block;
    }

    // (262:12) {#each catList as cat}
    function create_each_block(ctx) {
    	var option, t_value = ctx.cat + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.cat;
    			option.value = option.__value;
    			add_location(option, file$6, 262, 16, 7864);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block.name, type: "each", source: "(262:12) {#each catList as cat}", ctx });
    	return block;
    }

    // (267:8) {#if currCat[0] == 'C' || currCat[0] == 'B'}
    function create_if_block_1(ctx) {
    	var input, dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "class", "userform form-control svelte-xxpu2v");
    			attr_dev(input, "placeholder", "Email");
    			add_location(input, file$6, 267, 12, 8010);
    			dispose = listen_dev(input, "input", ctx.input_input_handler);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);

    			set_input_value(input, ctx.email);
    		},

    		p: function update(changed, ctx) {
    			if (changed.email && (input.value !== ctx.email)) set_input_value(input, ctx.email);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(input);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1.name, type: "if", source: "(267:8) {#if currCat[0] == 'C' || currCat[0] == 'B'}", ctx });
    	return block;
    }

    function create_fragment$6(ctx) {
    	var t, if_block1_anchor, current;

    	var if_block0 = (ctx.showMsg) && create_if_block_10(ctx);

    	function select_block_type(changed, ctx) {
    		if (ctx.addUser) return create_if_block$1;
    		return create_else_block;
    	}

    	var current_block_type = select_block_type(null, ctx);
    	var if_block1 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t = space();
    			if_block1.c();
    			if_block1_anchor = empty();
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t, anchor);
    			if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (ctx.showMsg) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    					transition_in(if_block0, 1);
    				} else {
    					if_block0 = create_if_block_10(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t.parentNode, t);
    				}
    			} else if (if_block0) {
    				group_outros();
    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});
    				check_outros();
    			}

    			if (current_block_type === (current_block_type = select_block_type(changed, ctx)) && if_block1) {
    				if_block1.p(changed, ctx);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);
    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block0);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);

    			if (detaching) {
    				detach_dev(t);
    			}

    			if_block1.d(detaching);

    			if (detaching) {
    				detach_dev(if_block1_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$6.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $acctTab;

    	validate_store(acctTab$1, 'acctTab');
    	component_subscribe($$self, acctTab$1, $$value => { $acctTab = $$value; $$invalidate('$acctTab', $acctTab); });

    	

        let addUser = false;

        let Payload;

        let count = 0;

        let users = [], prevUsers = [];

        let catList = ['Administrator', 'Business', 'Customer', 'Supervisor'];

        let currCat = '', userInput = '';

        let showMsg = false, statusColor = '', heading = '', message = ''; 

        let firstName = '', midName = '', lastName = '', dob = '', email = '';

        function getUsers() {

            Payload = {
                func : 'getAllUsers'
            };

            invokeLambda(env.lambda.pythonAPI, Payload).then((response) => {

                $$invalidate('users', users = response);
                prevUsers = response;

                $$invalidate('count', count = response.length);

                acctTab$1.update(state => {
                    state.users = response;
                    return state;
                });

            }).catch((err) => {
                console.log(err);
            });
        }

        function disableUser(username, email, userType) {

            Payload = {
                func : 'disableUser',
                username : username,
                email : email,
                userType : userType
            };

            invokeLambda(env.lambda.pythonAPI, Payload).then((response) => {

                console.log(response);

                if(response == 'SUCCESS') {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'SUCCESS!'), $$invalidate('message', message = 'User Disabled'), $$invalidate('statusColor', statusColor = 'green'); 

                    getUsers();

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                } else {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Disabling User'), $$invalidate('message', message = response), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                }

            }).catch((err) => {

                console.log(err);

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Disabling User'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            });
        }

        function deleteUser(username, email, userType) {

            Payload = {
                func : 'deleteUser',
                username : username,
                email : email,
                userType : userType
            };

            invokeLambda(env.lambda.pythonAPI, Payload).then((response) => {

                console.log(response);

                if(response == 'SUCCESS') {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'SUCCESS!'), $$invalidate('message', message = 'User Deleted'), $$invalidate('statusColor', statusColor = 'green'); 

                    getUsers();

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                } else {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Disabling User'), $$invalidate('message', message = response), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                }

            }).catch((err) => {

                console.log(err);

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Disabling User'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            });
        }

        function createUser() {

            if(firstName != '' && lastName != '' && dob != '' && currCat != '') {

                Payload = {
                    func : 'createUser',
                    user : $acctTab.username,
                    firstName : firstName,
                    midName : midName,
                    lastName : lastName,
                    dob : dob,
                    group : currCat,
                    email : email
                };

                invokeLambda(env.lambda.pythonAPI, Payload).then((response) => {

                    console.log(response);

                    if(response == 'SUCCESS') {

                        $$invalidate('firstName', firstName = ''); $$invalidate('lastName', lastName = ''); $$invalidate('dob', dob = ''); $$invalidate('currCat', currCat = ''); $$invalidate('midName', midName = ''); $$invalidate('email', email = ''); 

                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'SUCCESS!'), $$invalidate('message', message = 'User Created'), $$invalidate('statusColor', statusColor = 'green'); 

                        $$invalidate('addUser', addUser = false);

                        getUsers();

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 2000);

                    } else {

                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - User Creation'), $$invalidate('message', message = response), $$invalidate('statusColor', statusColor = 'red'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 2000);

                    }

                }).catch((err) => {
                    console.log(err);

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - User Creation'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);
                });

            } else {
                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - User Creation'), $$invalidate('message', message = 'Please Fill All Fields'), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);
            }
        }

        function searchUser() {

            let temp = [];

            for(let i = 0; i < users.length; i++) {
                if(users[i].Name.includes(userInput) || users[i].Email.includes(userInput) || users[i].Username.includes(userInput))
                    temp.push(users[i]);
            }

            $$invalidate('users', users = temp);
        }

        function filterUsers() {
            $$invalidate('users', users = prevUsers);

            let temp = [];

            for(let i = 0; i < users.length; i++) {
                if(users[i].Type[0] == currCat[0])
                    temp.push(users[i]);
            }

            $$invalidate('users', users = temp);
        }

        function resetUsers() {
            $$invalidate('users', users = prevUsers);
            $$invalidate('userInput', userInput = '');
        }

        onMount(async () => {
            if($acctTab.users == [] || typeof $acctTab.users == "undefined") {
                await getUsers();
            } else {
                $$invalidate('users', users = $acctTab.users);
                prevUsers = $acctTab.users;

                $$invalidate('count', count = $acctTab.users.length);
            }
        });

    	function input0_input_handler() {
    		firstName = this.value;
    		$$invalidate('firstName', firstName);
    	}

    	function input1_input_handler() {
    		midName = this.value;
    		$$invalidate('midName', midName);
    	}

    	function input2_input_handler() {
    		lastName = this.value;
    		$$invalidate('lastName', lastName);
    	}

    	function input3_input_handler() {
    		dob = this.value;
    		$$invalidate('dob', dob);
    	}

    	function select_change_handler() {
    		currCat = select_value(this);
    		$$invalidate('currCat', currCat);
    		$$invalidate('catList', catList);
    	}

    	function input_input_handler() {
    		email = this.value;
    		$$invalidate('email', email);
    	}

    	const click_handler = () => $$invalidate('addUser', addUser = true);

    	function select_change_handler_1() {
    		currCat = select_value(this);
    		$$invalidate('currCat', currCat);
    		$$invalidate('catList', catList);
    	}

    	function input_input_handler_1() {
    		userInput = this.value;
    		$$invalidate('userInput', userInput);
    	}

    	const click_handler_1 = ({ user }) => disableUser(user.Username, user.Email, user.Type);

    	const click_handler_2 = ({ user }) => deleteUser(user.Username, user.Email, user.Type);

    	const click_handler_3 = ({ user }) => disableUser(user.Username, user.Email, user.Type);

    	const click_handler_4 = ({ user }) => deleteUser(user.Username, user.Email, user.Type);

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('addUser' in $$props) $$invalidate('addUser', addUser = $$props.addUser);
    		if ('Payload' in $$props) Payload = $$props.Payload;
    		if ('count' in $$props) $$invalidate('count', count = $$props.count);
    		if ('users' in $$props) $$invalidate('users', users = $$props.users);
    		if ('prevUsers' in $$props) prevUsers = $$props.prevUsers;
    		if ('catList' in $$props) $$invalidate('catList', catList = $$props.catList);
    		if ('currCat' in $$props) $$invalidate('currCat', currCat = $$props.currCat);
    		if ('userInput' in $$props) $$invalidate('userInput', userInput = $$props.userInput);
    		if ('showMsg' in $$props) $$invalidate('showMsg', showMsg = $$props.showMsg);
    		if ('statusColor' in $$props) $$invalidate('statusColor', statusColor = $$props.statusColor);
    		if ('heading' in $$props) $$invalidate('heading', heading = $$props.heading);
    		if ('message' in $$props) $$invalidate('message', message = $$props.message);
    		if ('firstName' in $$props) $$invalidate('firstName', firstName = $$props.firstName);
    		if ('midName' in $$props) $$invalidate('midName', midName = $$props.midName);
    		if ('lastName' in $$props) $$invalidate('lastName', lastName = $$props.lastName);
    		if ('dob' in $$props) $$invalidate('dob', dob = $$props.dob);
    		if ('email' in $$props) $$invalidate('email', email = $$props.email);
    		if ('$acctTab' in $$props) acctTab$1.set($acctTab);
    	};

    	return {
    		addUser,
    		count,
    		users,
    		catList,
    		currCat,
    		userInput,
    		showMsg,
    		statusColor,
    		heading,
    		message,
    		firstName,
    		midName,
    		lastName,
    		dob,
    		email,
    		disableUser,
    		deleteUser,
    		createUser,
    		searchUser,
    		filterUsers,
    		resetUsers,
    		$acctTab,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		select_change_handler,
    		input_input_handler,
    		click_handler,
    		select_change_handler_1,
    		input_input_handler_1,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4
    	};
    }

    class SearchUsers extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$6, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "SearchUsers", options, id: create_fragment$6.name });
    	}
    }

    /* src/Components/Account/Auser.svelte generated by Svelte v3.12.1 */

    const file$7 = "src/Components/Account/Auser.svelte";

    // (293:0) {#if showMsg}
    function create_if_block_4$1(ctx) {
    	var div, div_intro, div_outro, current;

    	var message_1 = new StatusMsg({
    		props: {
    		heading: ctx.heading,
    		message: ctx.message,
    		status: ctx.statusColor
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			div = element("div");
    			message_1.$$.fragment.c();
    			attr_dev(div, "id", "status");
    			attr_dev(div, "class", "container-fluid svelte-1qm37t2");
    			add_location(div, file$7, 293, 4, 9723);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(message_1, div, null);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var message_1_changes = {};
    			if (changed.heading) message_1_changes.heading = ctx.heading;
    			if (changed.message) message_1_changes.message = ctx.message;
    			if (changed.statusColor) message_1_changes.status = ctx.statusColor;
    			message_1.$set(message_1_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(message_1.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				if (!div_intro) div_intro = create_in_transition(div, fly, { x:200, duration:500 });
    				div_intro.start();
    			});

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(message_1.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();

    			div_outro = create_out_transition(div, fly, { x:200, duration:500 });

    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			destroy_component(message_1);

    			if (detaching) {
    				if (div_outro) div_outro.end();
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_4$1.name, type: "if", source: "(293:0) {#if showMsg}", ctx });
    	return block;
    }

    // (299:0) {#if promptPassword}
    function create_if_block_2$1(ctx) {
    	var t0, div, h6, t2, input, t3, button, t5, div_intro, div_outro, current, dispose;

    	var modal = new Modal({ $$inline: true });

    	function select_block_type(changed, ctx) {
    		if (ctx.edit) return create_if_block_3$1;
    		return create_else_block_2$1;
    	}

    	var current_block_type = select_block_type(null, ctx);
    	var if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			modal.$$.fragment.c();
    			t0 = space();
    			div = element("div");
    			h6 = element("h6");
    			h6.textContent = "Please Type Password";
    			t2 = space();
    			input = element("input");
    			t3 = space();
    			button = element("button");
    			button.textContent = "Cancel";
    			t5 = space();
    			if_block.c();
    			set_style(h6, "text-align", "center");
    			set_style(h6, "margin-top", "20px");
    			add_location(h6, file$7, 301, 8, 10107);
    			attr_dev(input, "id", "prompt");
    			attr_dev(input, "type", "password");
    			attr_dev(input, "class", "form-control svelte-1qm37t2");
    			attr_dev(input, "placeholder", "Password");
    			add_location(input, file$7, 302, 8, 10189);
    			set_style(button, "float", "left");
    			attr_dev(button, "class", "btn btn-danger modalBtn svelte-1qm37t2");
    			add_location(button, file$7, 303, 8, 10303);
    			attr_dev(div, "id", "modal-content");
    			attr_dev(div, "class", "container-fluid svelte-1qm37t2");
    			add_location(div, file$7, 300, 4, 9976);

    			dispose = [
    				listen_dev(input, "input", ctx.input_input_handler),
    				listen_dev(button, "click", ctx.click_handler)
    			];
    		},

    		m: function mount(target, anchor) {
    			mount_component(modal, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, h6);
    			append_dev(div, t2);
    			append_dev(div, input);

    			set_input_value(input, ctx.password);

    			append_dev(div, t3);
    			append_dev(div, button);
    			append_dev(div, t5);
    			if_block.m(div, null);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (changed.password && (input.value !== ctx.password)) set_input_value(input, ctx.password);

    			if (current_block_type !== (current_block_type = select_block_type(changed, ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);
    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(modal.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				if (!div_intro) div_intro = create_in_transition(div, fly, { y:-200, duration:500 });
    				div_intro.start();
    			});

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(modal.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();

    			div_outro = create_out_transition(div, fly, { y:-200, duration:500 });

    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(modal, detaching);

    			if (detaching) {
    				detach_dev(t0);
    				detach_dev(div);
    			}

    			if_block.d();

    			if (detaching) {
    				if (div_outro) div_outro.end();
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$1.name, type: "if", source: "(299:0) {#if promptPassword}", ctx });
    	return block;
    }

    // (307:8) {:else}
    function create_else_block_2$1(ctx) {
    	var button, dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Verify";
    			attr_dev(button, "class", "btn btn-primary modalBtn svelte-1qm37t2");
    			add_location(button, file$7, 307, 12, 10595);
    			dispose = listen_dev(button, "click", ctx.confirmMFA);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_2$1.name, type: "else", source: "(307:8) {:else}", ctx });
    	return block;
    }

    // (305:8) {#if edit}
    function create_if_block_3$1(ctx) {
    	var button, dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Save";
    			attr_dev(button, "class", "btn btn-primary modalBtn svelte-1qm37t2");
    			add_location(button, file$7, 305, 12, 10485);
    			dispose = listen_dev(button, "click", ctx.editProfile);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_3$1.name, type: "if", source: "(305:8) {#if edit}", ctx });
    	return block;
    }

    // (329:0) {:else}
    function create_else_block_1$1(ctx) {
    	var div, current;

    	var search = new SearchUsers({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			search.$$.fragment.c();
    			set_style(div, "width", "66.66%");
    			set_style(div, "float", "right");
    			add_location(div, file$7, 329, 4, 11329);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(search, div, null);
    			current = true;
    		},

    		p: noop,

    		i: function intro(local) {
    			if (current) return;
    			transition_in(search.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(search.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			destroy_component(search);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_1$1.name, type: "else", source: "(329:0) {:else}", ctx });
    	return block;
    }

    // (313:0) {#if unVerifiedAdmin}
    function create_if_block_1$1(ctx) {
    	var table, tr, td, h3, t1, span, t3, b1, t4_value = ctx.$acctTab.keyCode + "", t4, b0, input, t5, button, i, t6, dispose;

    	const block = {
    		c: function create() {
    			table = element("table");
    			tr = element("tr");
    			td = element("td");
    			h3 = element("h3");
    			h3.textContent = "Security";
    			t1 = space();
    			span = element("span");
    			span.textContent = "The keycode for your authenicator app is:";
    			t3 = space();
    			b1 = element("b");
    			t4 = text(t4_value);
    			b0 = element("b");
    			input = element("input");
    			t5 = space();
    			button = element("button");
    			i = element("i");
    			t6 = text(" Verify");
    			add_location(h3, file$7, 316, 16, 10848);
    			add_location(span, file$7, 318, 16, 10885);
    			attr_dev(input, "class", "form-control reset svelte-1qm37t2");
    			attr_dev(input, "placeholder", "One-Time Passcode");
    			add_location(input, file$7, 322, 16, 11004);
    			attr_dev(i, "class", "fa fa-check");
    			add_location(i, file$7, 324, 127, 11223);
    			attr_dev(button, "class", "btn btn-primary svelte-1qm37t2");
    			set_style(button, "float", "right");
    			add_location(button, file$7, 324, 16, 11112);
    			add_location(b0, file$7, 320, 37, 10981);
    			add_location(b1, file$7, 320, 16, 10960);
    			add_location(td, file$7, 315, 12, 10826);
    			add_location(tr, file$7, 314, 8, 10808);
    			attr_dev(table, "cellpadding", "10");
    			set_style(table, "width", "33.33%");
    			set_style(table, "float", "right");
    			add_location(table, file$7, 313, 4, 10740);

    			dispose = [
    				listen_dev(input, "input", ctx.input_input_handler_1),
    				listen_dev(button, "click", ctx.click_handler_1)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, tr);
    			append_dev(tr, td);
    			append_dev(td, h3);
    			append_dev(td, t1);
    			append_dev(td, span);
    			append_dev(td, t3);
    			append_dev(td, b1);
    			append_dev(b1, t4);
    			append_dev(b1, b0);
    			append_dev(b0, input);

    			set_input_value(input, ctx.mfaCode);

    			append_dev(b0, t5);
    			append_dev(b0, button);
    			append_dev(button, i);
    			append_dev(button, t6);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.$acctTab) && t4_value !== (t4_value = ctx.$acctTab.keyCode + "")) {
    				set_data_dev(t4, t4_value);
    			}

    			if (changed.mfaCode && (input.value !== ctx.mfaCode)) set_input_value(input, ctx.mfaCode);
    		},

    		i: noop,
    		o: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(table);
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$1.name, type: "if", source: "(313:0) {#if unVerifiedAdmin}", ctx });
    	return block;
    }

    // (348:16) {:else}
    function create_else_block$1(ctx) {
    	var img;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "alt", "picture");
    			attr_dev(img, "src", ctx.Picture);
    			set_style(img, "width", "85px");
    			set_style(img, "height", "85px");
    			set_style(img, "border-radius", "0.4rem");
    			set_style(img, "outline", "none");
    			add_location(img, file$7, 348, 20, 12123);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.Picture) {
    				attr_dev(img, "src", ctx.Picture);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$1.name, type: "else", source: "(348:16) {:else}", ctx });
    	return block;
    }

    // (346:16) {#if Picture == null}
    function create_if_block$2(ctx) {
    	var img;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "alt", "picture");
    			attr_dev(img, "src", 'https://source.unsplash.com/900x900/?automobile');
    			set_style(img, "width", "85px");
    			set_style(img, "height", "85px");
    			set_style(img, "border-radius", "0.4rem");
    			set_style(img, "outline", "none");
    			add_location(img, file$7, 346, 20, 11933);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$2.name, type: "if", source: "(346:16) {#if Picture == null}", ctx });
    	return block;
    }

    function create_fragment$7(ctx) {
    	var t0, t1, current_block_type_index, if_block2, t2, table0, tr0, td0, h30, t4, div0, input0, t5, label, t6, t7, div1, t8, button0, i0, t9, t10, table1, tr1, td1, h31, t12, input1, t13, input2, t14, button1, i1, t15, current, dispose;

    	var if_block0 = (ctx.showMsg) && create_if_block_4$1(ctx);

    	var if_block1 = (ctx.promptPassword) && create_if_block_2$1(ctx);

    	var if_block_creators = [
    		create_if_block_1$1,
    		create_else_block_1$1
    	];

    	var if_blocks = [];

    	function select_block_type_1(changed, ctx) {
    		if (ctx.unVerifiedAdmin) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(null, ctx);
    	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	function select_block_type_2(changed, ctx) {
    		if (ctx.Picture == null) return create_if_block$2;
    		return create_else_block$1;
    	}

    	var current_block_type = select_block_type_2(null, ctx);
    	var if_block3 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if_block2.c();
    			t2 = space();
    			table0 = element("table");
    			tr0 = element("tr");
    			td0 = element("td");
    			h30 = element("h3");
    			h30.textContent = "Edit Profile";
    			t4 = space();
    			div0 = element("div");
    			input0 = element("input");
    			t5 = space();
    			label = element("label");
    			t6 = text(ctx.imageLabel);
    			t7 = space();
    			div1 = element("div");
    			if_block3.c();
    			t8 = space();
    			button0 = element("button");
    			i0 = element("i");
    			t9 = text(" Save Changes");
    			t10 = space();
    			table1 = element("table");
    			tr1 = element("tr");
    			td1 = element("td");
    			h31 = element("h3");
    			h31.textContent = "Reset Password";
    			t12 = space();
    			input1 = element("input");
    			t13 = space();
    			input2 = element("input");
    			t14 = space();
    			button1 = element("button");
    			i1 = element("i");
    			t15 = text(" Reset");
    			add_location(h30, file$7, 337, 12, 11493);
    			attr_dev(input0, "type", "file");
    			attr_dev(input0, "accept", "image/jpeg");
    			attr_dev(input0, "class", "custom-file-input");
    			attr_dev(input0, "id", "customFile");
    			add_location(input0, file$7, 340, 16, 11632);
    			attr_dev(label, "class", "custom-file-label");
    			attr_dev(label, "for", "customFile");
    			add_location(label, file$7, 341, 16, 11752);
    			attr_dev(div0, "class", "custom-file input-group svelte-1qm37t2");
    			set_style(div0, "margin-top", "20px");
    			set_style(div0, "width", "75%");
    			set_style(div0, "float", "right");
    			add_location(div0, file$7, 339, 12, 11530);
    			attr_dev(div1, "id", "pic");
    			attr_dev(div1, "class", "svelte-1qm37t2");
    			add_location(div1, file$7, 344, 12, 11858);
    			attr_dev(i0, "class", "fa fa-save");
    			add_location(i0, file$7, 352, 118, 12389);
    			attr_dev(button0, "id", "saveBtn");
    			attr_dev(button0, "class", "btn btn-primary svelte-1qm37t2");
    			set_style(button0, "margin-top", "20px");
    			set_style(button0, "float", "right");
    			add_location(button0, file$7, 352, 12, 12283);
    			add_location(td0, file$7, 336, 8, 11475);
    			add_location(tr0, file$7, 335, 4, 11461);
    			attr_dev(table0, "cellpadding", "10");
    			set_style(table0, "width", "33.33%");
    			add_location(table0, file$7, 334, 0, 11410);
    			add_location(h31, file$7, 360, 12, 12577);
    			attr_dev(input1, "type", "password");
    			attr_dev(input1, "class", "form-control reset svelte-1qm37t2");
    			attr_dev(input1, "placeholder", "Old Password");
    			add_location(input1, file$7, 362, 12, 12616);
    			attr_dev(input2, "type", "password");
    			attr_dev(input2, "class", "form-control reset svelte-1qm37t2");
    			attr_dev(input2, "placeholder", "New Password");
    			add_location(input2, file$7, 364, 12, 12735);
    			attr_dev(i1, "class", "fa fa-refresh");
    			add_location(i1, file$7, 366, 92, 12936);
    			attr_dev(button1, "class", "btn btn-primary svelte-1qm37t2");
    			set_style(button1, "float", "right");
    			add_location(button1, file$7, 366, 12, 12856);
    			add_location(td1, file$7, 359, 8, 12559);
    			add_location(tr1, file$7, 358, 4, 12545);
    			attr_dev(table1, "cellpadding", "10");
    			set_style(table1, "width", "33.33%");
    			set_style(table1, "margin-top", "25px");
    			add_location(table1, file$7, 357, 0, 12477);

    			dispose = [
    				listen_dev(input0, "change", ctx.upload),
    				listen_dev(button0, "click", ctx.editProfile),
    				listen_dev(input1, "input", ctx.input1_input_handler),
    				listen_dev(input2, "input", ctx.input2_input_handler),
    				listen_dev(button1, "click", ctx.resetPassword)
    			];
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, table0, anchor);
    			append_dev(table0, tr0);
    			append_dev(tr0, td0);
    			append_dev(td0, h30);
    			append_dev(td0, t4);
    			append_dev(td0, div0);
    			append_dev(div0, input0);
    			append_dev(div0, t5);
    			append_dev(div0, label);
    			append_dev(label, t6);
    			append_dev(td0, t7);
    			append_dev(td0, div1);
    			if_block3.m(div1, null);
    			append_dev(td0, t8);
    			append_dev(td0, button0);
    			append_dev(button0, i0);
    			append_dev(button0, t9);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, table1, anchor);
    			append_dev(table1, tr1);
    			append_dev(tr1, td1);
    			append_dev(td1, h31);
    			append_dev(td1, t12);
    			append_dev(td1, input1);

    			set_input_value(input1, ctx.oldPassword);

    			append_dev(td1, t13);
    			append_dev(td1, input2);

    			set_input_value(input2, ctx.newPassword);

    			append_dev(td1, t14);
    			append_dev(td1, button1);
    			append_dev(button1, i1);
    			append_dev(button1, t15);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (ctx.showMsg) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    					transition_in(if_block0, 1);
    				} else {
    					if_block0 = create_if_block_4$1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();
    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});
    				check_outros();
    			}

    			if (ctx.promptPassword) {
    				if (if_block1) {
    					if_block1.p(changed, ctx);
    					transition_in(if_block1, 1);
    				} else {
    					if_block1 = create_if_block_2$1(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				group_outros();
    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});
    				check_outros();
    			}

    			var previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(changed, ctx);
    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(changed, ctx);
    			} else {
    				group_outros();
    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});
    				check_outros();

    				if_block2 = if_blocks[current_block_type_index];
    				if (!if_block2) {
    					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block2.c();
    				}
    				transition_in(if_block2, 1);
    				if_block2.m(t2.parentNode, t2);
    			}

    			if (!current || changed.imageLabel) {
    				set_data_dev(t6, ctx.imageLabel);
    			}

    			if (current_block_type === (current_block_type = select_block_type_2(changed, ctx)) && if_block3) {
    				if_block3.p(changed, ctx);
    			} else {
    				if_block3.d(1);
    				if_block3 = current_block_type(ctx);
    				if (if_block3) {
    					if_block3.c();
    					if_block3.m(div1, null);
    				}
    			}

    			if (changed.oldPassword && (input1.value !== ctx.oldPassword)) set_input_value(input1, ctx.oldPassword);
    			if (changed.newPassword && (input2.value !== ctx.newPassword)) set_input_value(input2, ctx.newPassword);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);

    			if (detaching) {
    				detach_dev(t0);
    			}

    			if (if_block1) if_block1.d(detaching);

    			if (detaching) {
    				detach_dev(t1);
    			}

    			if_blocks[current_block_type_index].d(detaching);

    			if (detaching) {
    				detach_dev(t2);
    				detach_dev(table0);
    			}

    			if_block3.d();

    			if (detaching) {
    				detach_dev(t10);
    				detach_dev(table1);
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$7.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let $acctTab;

    	validate_store(acctTab$1, 'acctTab');
    	component_subscribe($$self, acctTab$1, $$value => { $acctTab = $$value; $$invalidate('$acctTab', $acctTab); });

    	

        let Name = $acctTab.name;
        let Email = $acctTab.email;
        let Picture = $acctTab.picture;

        let unVerifiedAdmin = Email.includes('autoknct.com') && $acctTab.keyCode != '' ? true : false;

        let mfaCode = '';

        let Payload, password, imageLabel = 'Choose Photo (<1MB)';

        let promptPassword = false, edit = false, del = false, mfa = true;
        
        let oldPassword = '', newPassword = '';

        let showMsg = false, statusColor = '', heading = '', message = ''; 

        document.documentElement.style.setProperty('--msg-color', statusColor);

        function upload(e) {
            if(e.target.files[0].size <= 1000000 && e.target.files[0].type == 'image/jpeg') {

                var reader = new FileReader();

                reader.onload = function (e) {
                    $$invalidate('Picture', Picture = e.target.result);
                    acctTab$1.update(state => {
                        state.picture = e.target.result;
                        return state;
                    });
                };

                reader.readAsDataURL(e.target.files[0]);
                $$invalidate('imageLabel', imageLabel = e.target.files[0].name);

            } else if (e.target.files[0].size > 1000000 && e.target.files[0].type == 'image/jpeg') {
                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile Picture'), $$invalidate('message', message = "Image Larger than 1MB"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);
            } else if (e.target.files[0].type != 'image/jpeg' && e.target.files[0].size <= 1000000 ) {
                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile Picture'), $$invalidate('message', message = "Image Is Not JPEG Format"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);
            } else {
                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile Picture'), $$invalidate('message', message = "Image Is Not JPEG Format and Larger than 1MB"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);
            }
        } 

        function editProfile() {

            Payload = {
                func : 'updateUser',
                id : $acctTab.uuid,
                email : Email,
                name : Name,
                picture : Picture != null ? Picture : null
            };

            invokeLambda(env.lambda.pythonAPI, Payload).then((response) => {

                if(response = 'SUCCESS') {

                    $$invalidate('imageLabel', imageLabel = 'Choose Photo (<1MB)');

                    acctTab$1.update(state => {
                        state.email = Email;
                        state.name = Name;
                        return state;
                    });

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'SUCCESS!'), $$invalidate('message', message = 'Profile Updated'), $$invalidate('statusColor', statusColor = 'green'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                } else {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = 'Unable To Update Profile'), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                }

            }).catch((err) => {
                
                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            });
        }

        function resetEmailPassword(email, password) {

            Payload = {
                func : 'resetEmail', 
                email : email,
                newPassword : password
            };

            invokeLambda(env.lambda.pythonAPI, Payload).then((response) => {

                if(response == 'SUCCESS') {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Success!'), $$invalidate('message', message = 'Password Changed'), $$invalidate('statusColor', statusColor = 'green'); 

                    setTimeout(function() { 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                } else {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Failed!'), $$invalidate('message', message = 'Password Not Changed'), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function() { 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                }

            }).catch((err) => {

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            });

        }

        function resetPassword() {

            if(oldPassword != '' && newPassword != '') {

                if(oldPassword != newPassword) {

                    if(newPassword.length >= 8) {

                        Payload = {
                            func : 'resetPassword', 
                            username : $acctTab.username,
                            oldPassword : oldPassword,
                            newPassword : newPassword
                        };

                        invokeLambda(env.lambda.nodeAPI, Payload).then((response) => {

                            if(response == 'SUCCESS') {

                                resetEmailPassword($acctTab.Email, newPassword);

                            } else {

                                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Failed!'), $$invalidate('message', message = 'Password Not Changed'), $$invalidate('statusColor', statusColor = 'red'); 

                                setTimeout(function() { 
                                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                                }, 2000);

                            }

                        }).catch((err) => {

                            $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                            setTimeout(function(){ 
                                $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                            }, 2000);

                        });
                        
                    }
                    else {

                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = 'Password length has to be at least 8 characters'), $$invalidate('statusColor', statusColor = 'red'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 2000);

                    }
                }
                else {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = 'Old and New Password cannot be the same'), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                }
            }
            else {

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = "Please Fill Out Both Fields"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            }
        }

        function confirmMFA() {

            if(mfaCode != '' && password != '') {

                Payload = {
                    username : $acctTab.username,
                    password : password,
                    code : mfaCode,
                    func : 'confirmMFA'
                };

                invokeLambda(env.lambda.nodeAPI, Payload).then((response) => {

                    $$invalidate('password', password = ''), $$invalidate('mfaCode', mfaCode = '');

                    console.log(response);

                    if(response == 'SUCCESS') {

                        acctTab$1.update(state => {
                            state.keyCode = '';
                            return state;
                        });

                        $$invalidate('unVerifiedAdmin', unVerifiedAdmin = false);

                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'SUCCESS'), $$invalidate('message', message = "MFA Setup Successfully"), $$invalidate('statusColor', statusColor = 'green'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 2000);

                    } else {
                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'FAILED'), $$invalidate('message', message = "MFA Setup Failed"), $$invalidate('statusColor', statusColor = 'red'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 2000);
                    }
                    
                }).catch((err) => {

                    console.log(err);

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error'), $$invalidate('message', message = "Please Try Again Later"), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                });

            }
            else {

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Sign In'), $$invalidate('message', message = "Please Fill All Fields!"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            }
        }

        let screenWidth = screen.width;

    	function input_input_handler() {
    		password = this.value;
    		$$invalidate('password', password);
    	}

    	const click_handler = () => { $$invalidate('promptPassword', promptPassword = false); $$invalidate('edit', edit = false); $$invalidate('del', del = false); };

    	function input_input_handler_1() {
    		mfaCode = this.value;
    		$$invalidate('mfaCode', mfaCode);
    	}

    	const click_handler_1 = () => { $$invalidate('promptPassword', promptPassword = true); $$invalidate('mfa', mfa = true); };

    	function input1_input_handler() {
    		oldPassword = this.value;
    		$$invalidate('oldPassword', oldPassword);
    	}

    	function input2_input_handler() {
    		newPassword = this.value;
    		$$invalidate('newPassword', newPassword);
    	}

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('Name' in $$props) Name = $$props.Name;
    		if ('Email' in $$props) Email = $$props.Email;
    		if ('Picture' in $$props) $$invalidate('Picture', Picture = $$props.Picture);
    		if ('unVerifiedAdmin' in $$props) $$invalidate('unVerifiedAdmin', unVerifiedAdmin = $$props.unVerifiedAdmin);
    		if ('mfaCode' in $$props) $$invalidate('mfaCode', mfaCode = $$props.mfaCode);
    		if ('Payload' in $$props) Payload = $$props.Payload;
    		if ('password' in $$props) $$invalidate('password', password = $$props.password);
    		if ('imageLabel' in $$props) $$invalidate('imageLabel', imageLabel = $$props.imageLabel);
    		if ('promptPassword' in $$props) $$invalidate('promptPassword', promptPassword = $$props.promptPassword);
    		if ('edit' in $$props) $$invalidate('edit', edit = $$props.edit);
    		if ('del' in $$props) $$invalidate('del', del = $$props.del);
    		if ('mfa' in $$props) $$invalidate('mfa', mfa = $$props.mfa);
    		if ('oldPassword' in $$props) $$invalidate('oldPassword', oldPassword = $$props.oldPassword);
    		if ('newPassword' in $$props) $$invalidate('newPassword', newPassword = $$props.newPassword);
    		if ('showMsg' in $$props) $$invalidate('showMsg', showMsg = $$props.showMsg);
    		if ('statusColor' in $$props) $$invalidate('statusColor', statusColor = $$props.statusColor);
    		if ('heading' in $$props) $$invalidate('heading', heading = $$props.heading);
    		if ('message' in $$props) $$invalidate('message', message = $$props.message);
    		if ('screenWidth' in $$props) screenWidth = $$props.screenWidth;
    		if ('$acctTab' in $$props) acctTab$1.set($acctTab);
    	};

    	return {
    		Picture,
    		unVerifiedAdmin,
    		mfaCode,
    		password,
    		imageLabel,
    		promptPassword,
    		edit,
    		del,
    		mfa,
    		oldPassword,
    		newPassword,
    		showMsg,
    		statusColor,
    		heading,
    		message,
    		upload,
    		editProfile,
    		resetPassword,
    		confirmMFA,
    		$acctTab,
    		input_input_handler,
    		click_handler,
    		input_input_handler_1,
    		click_handler_1,
    		input1_input_handler,
    		input2_input_handler
    	};
    }

    class Auser extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$7, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Auser", options, id: create_fragment$7.name });
    	}
    }

    /* src/Components/Account/Buser.svelte generated by Svelte v3.12.1 */

    function create_fragment$8(ctx) {
    	const block = {
    		c: noop,

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$8.name, type: "component", source: "", ctx });
    	return block;
    }

    class Buser extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, null, create_fragment$8, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Buser", options, id: create_fragment$8.name });
    	}
    }

    /* src/Components/Account/Cuser.svelte generated by Svelte v3.12.1 */

    const file$8 = "src/Components/Account/Cuser.svelte";

    // (287:0) {#if showMsg}
    function create_if_block_3$2(ctx) {
    	var div, div_intro, div_outro, current;

    	var message_1 = new StatusMsg({
    		props: {
    		heading: ctx.heading,
    		message: ctx.message,
    		status: ctx.statusColor
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			div = element("div");
    			message_1.$$.fragment.c();
    			attr_dev(div, "id", "status");
    			attr_dev(div, "class", "container-fluid svelte-au76uu");
    			add_location(div, file$8, 287, 4, 9529);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(message_1, div, null);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var message_1_changes = {};
    			if (changed.heading) message_1_changes.heading = ctx.heading;
    			if (changed.message) message_1_changes.message = ctx.message;
    			if (changed.statusColor) message_1_changes.status = ctx.statusColor;
    			message_1.$set(message_1_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(message_1.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				if (!div_intro) div_intro = create_in_transition(div, fly, { x:200, duration:500 });
    				div_intro.start();
    			});

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(message_1.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();

    			div_outro = create_out_transition(div, fly, { x:200, duration:500 });

    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			destroy_component(message_1);

    			if (detaching) {
    				if (div_outro) div_outro.end();
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_3$2.name, type: "if", source: "(287:0) {#if showMsg}", ctx });
    	return block;
    }

    // (293:0) {#if promptPassword}
    function create_if_block_1$2(ctx) {
    	var t0, div, h6, t2, input, t3, button, t5, div_intro, div_outro, current, dispose;

    	var modal = new Modal({ $$inline: true });

    	function select_block_type(changed, ctx) {
    		if (ctx.edit) return create_if_block_2$2;
    		return create_else_block_1$2;
    	}

    	var current_block_type = select_block_type(null, ctx);
    	var if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			modal.$$.fragment.c();
    			t0 = space();
    			div = element("div");
    			h6 = element("h6");
    			h6.textContent = "Please Type Password";
    			t2 = space();
    			input = element("input");
    			t3 = space();
    			button = element("button");
    			button.textContent = "Cancel";
    			t5 = space();
    			if_block.c();
    			set_style(h6, "text-align", "center");
    			set_style(h6, "margin-top", "20px");
    			add_location(h6, file$8, 295, 8, 9905);
    			attr_dev(input, "id", "prompt");
    			attr_dev(input, "type", "password");
    			attr_dev(input, "class", "form-control svelte-au76uu");
    			attr_dev(input, "placeholder", "Password");
    			add_location(input, file$8, 296, 8, 9986);
    			set_style(button, "float", "left");
    			attr_dev(button, "class", "btn btn-danger modalBtn svelte-au76uu");
    			add_location(button, file$8, 297, 8, 10099);
    			attr_dev(div, "id", "modal-content");
    			attr_dev(div, "class", "container-fluid svelte-au76uu");
    			add_location(div, file$8, 294, 4, 9775);

    			dispose = [
    				listen_dev(input, "input", ctx.input_input_handler),
    				listen_dev(button, "click", ctx.click_handler)
    			];
    		},

    		m: function mount(target, anchor) {
    			mount_component(modal, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, h6);
    			append_dev(div, t2);
    			append_dev(div, input);

    			set_input_value(input, ctx.password);

    			append_dev(div, t3);
    			append_dev(div, button);
    			append_dev(div, t5);
    			if_block.m(div, null);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (changed.password && (input.value !== ctx.password)) set_input_value(input, ctx.password);

    			if (current_block_type !== (current_block_type = select_block_type(changed, ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);
    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(modal.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				if (!div_intro) div_intro = create_in_transition(div, fly, { y:-200, duration:500 });
    				div_intro.start();
    			});

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(modal.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();

    			div_outro = create_out_transition(div, fly, { y:-200, duration:500 });

    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(modal, detaching);

    			if (detaching) {
    				detach_dev(t0);
    				detach_dev(div);
    			}

    			if_block.d();

    			if (detaching) {
    				if (div_outro) div_outro.end();
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$2.name, type: "if", source: "(293:0) {#if promptPassword}", ctx });
    	return block;
    }

    // (301:8) {:else}
    function create_else_block_1$2(ctx) {
    	var button, dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Verify";
    			attr_dev(button, "class", "btn btn-primary modalBtn svelte-au76uu");
    			add_location(button, file$8, 301, 12, 10387);
    			dispose = listen_dev(button, "click", ctx.confirmMFA);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_1$2.name, type: "else", source: "(301:8) {:else}", ctx });
    	return block;
    }

    // (299:8) {#if edit}
    function create_if_block_2$2(ctx) {
    	var button, dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Save";
    			attr_dev(button, "class", "btn btn-primary modalBtn svelte-au76uu");
    			add_location(button, file$8, 299, 12, 10279);
    			dispose = listen_dev(button, "click", ctx.editProfile);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$2.name, type: "if", source: "(299:8) {#if edit}", ctx });
    	return block;
    }

    // (322:16) {:else}
    function create_else_block$2(ctx) {
    	var img;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "alt", "picture");
    			attr_dev(img, "src", ctx.Picture);
    			set_style(img, "width", "85px");
    			set_style(img, "height", "85px");
    			set_style(img, "border-radius", "0.4rem");
    			set_style(img, "outline", "none");
    			add_location(img, file$8, 322, 20, 11220);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.Picture) {
    				attr_dev(img, "src", ctx.Picture);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$2.name, type: "else", source: "(322:16) {:else}", ctx });
    	return block;
    }

    // (320:16) {#if Picture == null}
    function create_if_block$3(ctx) {
    	var img;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "alt", "picture");
    			attr_dev(img, "src", 'https://source.unsplash.com/900x900/?automobile');
    			set_style(img, "width", "85px");
    			set_style(img, "height", "85px");
    			set_style(img, "border-radius", "0.4rem");
    			set_style(img, "outline", "none");
    			add_location(img, file$8, 320, 20, 11032);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$3.name, type: "if", source: "(320:16) {#if Picture == null}", ctx });
    	return block;
    }

    function create_fragment$9(ctx) {
    	var t0, t1, div8, table0, tr0, td0, h30, t3, div0, input0, t4, label, t5, t6, div1, t7, div4, div3, div2, t9, input1, t10, div7, div6, div5, t12, input2, t13, button0, i0, t14, t15, table1, tr1, td1, h31, t17, input3, t18, input4, t19, button1, i1, t20, current, dispose;

    	var if_block0 = (ctx.showMsg) && create_if_block_3$2(ctx);

    	var if_block1 = (ctx.promptPassword) && create_if_block_1$2(ctx);

    	function select_block_type_1(changed, ctx) {
    		if (ctx.Picture == null) return create_if_block$3;
    		return create_else_block$2;
    	}

    	var current_block_type = select_block_type_1(null, ctx);
    	var if_block2 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			div8 = element("div");
    			table0 = element("table");
    			tr0 = element("tr");
    			td0 = element("td");
    			h30 = element("h3");
    			h30.textContent = "Edit Profile";
    			t3 = space();
    			div0 = element("div");
    			input0 = element("input");
    			t4 = space();
    			label = element("label");
    			t5 = text(ctx.imageLabel);
    			t6 = space();
    			div1 = element("div");
    			if_block2.c();
    			t7 = space();
    			div4 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div2.textContent = "Name:";
    			t9 = space();
    			input1 = element("input");
    			t10 = space();
    			div7 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div5.textContent = "Email:";
    			t12 = space();
    			input2 = element("input");
    			t13 = space();
    			button0 = element("button");
    			i0 = element("i");
    			t14 = text(" Save Changes");
    			t15 = space();
    			table1 = element("table");
    			tr1 = element("tr");
    			td1 = element("td");
    			h31 = element("h3");
    			h31.textContent = "Reset Password";
    			t17 = space();
    			input3 = element("input");
    			t18 = space();
    			input4 = element("input");
    			t19 = space();
    			button1 = element("button");
    			i1 = element("i");
    			t20 = text(" Reset");
    			add_location(h30, file$8, 311, 12, 10601);
    			attr_dev(input0, "type", "file");
    			attr_dev(input0, "accept", "image/jpeg");
    			attr_dev(input0, "class", "custom-file-input");
    			attr_dev(input0, "id", "customFile");
    			add_location(input0, file$8, 314, 16, 10737);
    			attr_dev(label, "class", "custom-file-label");
    			attr_dev(label, "for", "customFile");
    			add_location(label, file$8, 315, 16, 10856);
    			attr_dev(div0, "class", "custom-file input-group svelte-au76uu");
    			set_style(div0, "margin-top", "20px");
    			set_style(div0, "width", "75%");
    			set_style(div0, "float", "right");
    			add_location(div0, file$8, 313, 12, 10636);
    			attr_dev(div1, "id", "pic");
    			attr_dev(div1, "class", "svelte-au76uu");
    			add_location(div1, file$8, 318, 12, 10959);
    			attr_dev(div2, "class", "input-group-text svelte-au76uu");
    			add_location(div2, file$8, 328, 20, 11477);
    			attr_dev(div3, "class", "input-group-prepend svelte-au76uu");
    			add_location(div3, file$8, 327, 16, 11423);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "class", "form-control");
    			attr_dev(input1, "id", "inlineFormInputGroup");
    			attr_dev(input1, "placeholder", ctx.Name);
    			add_location(input1, file$8, 330, 16, 11558);
    			attr_dev(div4, "class", "input-group mb-2 svelte-au76uu");
    			add_location(div4, file$8, 326, 12, 11376);
    			attr_dev(div5, "class", "input-group-text svelte-au76uu");
    			add_location(div5, file$8, 335, 20, 11824);
    			attr_dev(div6, "class", "input-group-prepend svelte-au76uu");
    			add_location(div6, file$8, 334, 16, 11770);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "class", "form-control");
    			attr_dev(input2, "id", "inlineFormInputGroup");
    			attr_dev(input2, "placeholder", ctx.Email);
    			add_location(input2, file$8, 337, 16, 11906);
    			attr_dev(div7, "class", "input-group mb-2 svelte-au76uu");
    			set_style(div7, "margin-top", "20px");
    			add_location(div7, file$8, 333, 12, 11698);
    			attr_dev(i0, "class", "fa fa-save");
    			add_location(i0, file$8, 340, 152, 12188);
    			attr_dev(button0, "id", "saveBtn");
    			attr_dev(button0, "class", "btn btn-primary svelte-au76uu");
    			set_style(button0, "margin-top", "20px");
    			set_style(button0, "float", "right");
    			add_location(button0, file$8, 340, 12, 12048);
    			add_location(td0, file$8, 310, 8, 10584);
    			add_location(tr0, file$8, 309, 4, 10571);
    			attr_dev(table0, "cellpadding", "10");
    			set_style(table0, "width", "33.33%");
    			add_location(table0, file$8, 308, 0, 10521);
    			add_location(h31, file$8, 348, 12, 12368);
    			attr_dev(input3, "type", "password");
    			attr_dev(input3, "class", "form-control reset svelte-au76uu");
    			attr_dev(input3, "placeholder", "Old Password");
    			add_location(input3, file$8, 350, 12, 12405);
    			attr_dev(input4, "type", "password");
    			attr_dev(input4, "class", "form-control reset svelte-au76uu");
    			attr_dev(input4, "placeholder", "New Password");
    			add_location(input4, file$8, 352, 12, 12522);
    			attr_dev(i1, "class", "fa fa-refresh");
    			add_location(i1, file$8, 354, 92, 12721);
    			attr_dev(button1, "class", "btn btn-primary svelte-au76uu");
    			set_style(button1, "float", "right");
    			add_location(button1, file$8, 354, 12, 12641);
    			add_location(td1, file$8, 347, 8, 12351);
    			add_location(tr1, file$8, 346, 4, 12338);
    			attr_dev(table1, "cellpadding", "10");
    			set_style(table1, "width", "33.33%");
    			set_style(table1, "margin-top", "25px");
    			add_location(table1, file$8, 345, 0, 12271);
    			attr_dev(div8, "id", "settings");
    			attr_dev(div8, "class", "svelte-au76uu");
    			add_location(div8, file$8, 306, 0, 10500);

    			dispose = [
    				listen_dev(input0, "change", ctx.upload),
    				listen_dev(input1, "input", ctx.input1_input_handler),
    				listen_dev(input2, "input", ctx.input2_input_handler),
    				listen_dev(button0, "click", ctx.click_handler_1),
    				listen_dev(input3, "input", ctx.input3_input_handler),
    				listen_dev(input4, "input", ctx.input4_input_handler),
    				listen_dev(button1, "click", ctx.resetPassword)
    			];
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div8, anchor);
    			append_dev(div8, table0);
    			append_dev(table0, tr0);
    			append_dev(tr0, td0);
    			append_dev(td0, h30);
    			append_dev(td0, t3);
    			append_dev(td0, div0);
    			append_dev(div0, input0);
    			append_dev(div0, t4);
    			append_dev(div0, label);
    			append_dev(label, t5);
    			append_dev(td0, t6);
    			append_dev(td0, div1);
    			if_block2.m(div1, null);
    			append_dev(td0, t7);
    			append_dev(td0, div4);
    			append_dev(div4, div3);
    			append_dev(div3, div2);
    			append_dev(div4, t9);
    			append_dev(div4, input1);

    			set_input_value(input1, ctx.Name);

    			append_dev(td0, t10);
    			append_dev(td0, div7);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div7, t12);
    			append_dev(div7, input2);

    			set_input_value(input2, ctx.Email);

    			append_dev(td0, t13);
    			append_dev(td0, button0);
    			append_dev(button0, i0);
    			append_dev(button0, t14);
    			append_dev(div8, t15);
    			append_dev(div8, table1);
    			append_dev(table1, tr1);
    			append_dev(tr1, td1);
    			append_dev(td1, h31);
    			append_dev(td1, t17);
    			append_dev(td1, input3);

    			set_input_value(input3, ctx.oldPassword);

    			append_dev(td1, t18);
    			append_dev(td1, input4);

    			set_input_value(input4, ctx.newPassword);

    			append_dev(td1, t19);
    			append_dev(td1, button1);
    			append_dev(button1, i1);
    			append_dev(button1, t20);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (ctx.showMsg) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    					transition_in(if_block0, 1);
    				} else {
    					if_block0 = create_if_block_3$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();
    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});
    				check_outros();
    			}

    			if (ctx.promptPassword) {
    				if (if_block1) {
    					if_block1.p(changed, ctx);
    					transition_in(if_block1, 1);
    				} else {
    					if_block1 = create_if_block_1$2(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				group_outros();
    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});
    				check_outros();
    			}

    			if (!current || changed.imageLabel) {
    				set_data_dev(t5, ctx.imageLabel);
    			}

    			if (current_block_type === (current_block_type = select_block_type_1(changed, ctx)) && if_block2) {
    				if_block2.p(changed, ctx);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type(ctx);
    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div1, null);
    				}
    			}

    			if (changed.Name && (input1.value !== ctx.Name)) set_input_value(input1, ctx.Name);

    			if (!current || changed.Name) {
    				attr_dev(input1, "placeholder", ctx.Name);
    			}

    			if (changed.Email && (input2.value !== ctx.Email)) set_input_value(input2, ctx.Email);

    			if (!current || changed.Email) {
    				attr_dev(input2, "placeholder", ctx.Email);
    			}

    			if (changed.oldPassword && (input3.value !== ctx.oldPassword)) set_input_value(input3, ctx.oldPassword);
    			if (changed.newPassword && (input4.value !== ctx.newPassword)) set_input_value(input4, ctx.newPassword);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);

    			if (detaching) {
    				detach_dev(t0);
    			}

    			if (if_block1) if_block1.d(detaching);

    			if (detaching) {
    				detach_dev(t1);
    				detach_dev(div8);
    			}

    			if_block2.d();
    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$9.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let $acctTab;

    	validate_store(acctTab$1, 'acctTab');
    	component_subscribe($$self, acctTab$1, $$value => { $acctTab = $$value; $$invalidate('$acctTab', $acctTab); });

    	

        let Name = $acctTab.name;
        let Email = $acctTab.email;
        let Picture = $acctTab.picture;

        let mfaCode = '';

        let Payload, password, imageLabel = 'Choose Photo (<1MB)';

        let promptPassword = false, edit = false, del = false, mfa = true;
        
        let oldPassword = '', newPassword = '';

        let showMsg = false, statusColor = '', heading = '', message = ''; 

        document.documentElement.style.setProperty('--msg-color', statusColor);

        function upload(e) {
            if(e.target.files[0].size <= 1000000 && e.target.files[0].type == 'image/jpeg') {

                var reader = new FileReader();

                reader.onload = function (e) {
                    $$invalidate('Picture', Picture = e.target.result);
                    acctTab$1.update(state => {
                        state.picture = e.target.result;
                        return state;
                    });
                };

                reader.readAsDataURL(e.target.files[0]);
                $$invalidate('imageLabel', imageLabel = e.target.files[0].name);

            } else if (e.target.files[0].size > 1000000 && e.target.files[0].type == 'image/jpeg') {
                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile Picture'), $$invalidate('message', message = "Image Larger than 1MB"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);
            } else if (e.target.files[0].type != 'image/jpeg' && e.target.files[0].size <= 1000000 ) {
                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile Picture'), $$invalidate('message', message = "Image Is Not JPEG Format"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);
            } else {
                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile Picture'), $$invalidate('message', message = "Image Is Not JPEG Format and Larger than 1MB"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);
            }
        } 

        function editProfile() {

            if(Name != '' && Email != '' && password != '') {

                $$invalidate('promptPassword', promptPassword = false);

                $$invalidate('edit', edit = false); $$invalidate('del', del = false);

                Payload = {
                    func : 'updateUser',
                    username : $acctTab.username,
                    password : password,
                    name : Name,
                    email : Email
                };

                invokeLambda(env.lambda.nodeAPI, Payload).then((response) => {

                    $$invalidate('password', password = '');

                    Payload = {
                        func : 'updateUser',
                        id : $acctTab.uuid,
                        email : Email,
                        name : Name,
                        picture : Picture != null ? Picture : null
                    };

                    invokeLambda(env.lambda.pythonAPI, Payload).then((response) => {

                        if(response = 'SUCCESS') {

                            $$invalidate('imageLabel', imageLabel = 'Choose Photo (<1MB)');

                            acctTab$1.update(state => {
                                state.email = Email;
                                state.name = Name;
                                return state;
                            });

                            $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'SUCCESS!'), $$invalidate('message', message = 'Profile Updated'), $$invalidate('statusColor', statusColor = 'green'); 

                            setTimeout(function(){ 
                                $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                            }, 2000);

                        } else {

                            $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = 'Unable To Update Profile'), $$invalidate('statusColor', statusColor = 'red'); 

                            setTimeout(function(){ 
                                $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                            }, 2000);

                        }

                    }).catch((err) => {
                        
                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 2000);

                    });

                }).catch((err) => {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                });

            } else {

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = 'Please Fill Out All Fields'), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            }
        }

        function resetPassword() {

            if(oldPassword != '' && newPassword != '') {

                if(oldPassword != newPassword) {

                    if(newPassword.length >= 8) {

                        Payload = {
                            func : 'resetPassword', 
                            username : $acctTab.username,
                            oldPassword : oldPassword,
                            newPassword : newPassword
                        };

                        invokeLambda(env.lambda.nodeAPI, Payload).then((response) => {

                            if(response == 'SUCCESS') {

                                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Success!'), $$invalidate('message', message = 'Password Changed'), $$invalidate('statusColor', statusColor = 'green'); 

                                setTimeout(function() { 
                                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                                }, 2000);

                                resetStates();

                            } else {

                                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Failed!'), $$invalidate('message', message = 'Password Not Changed'), $$invalidate('statusColor', statusColor = 'red'); 

                                setTimeout(function() { 
                                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                                }, 2000);

                            }

                        }).catch((err) => {

                            $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                            setTimeout(function(){ 
                                $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                            }, 2000);

                        });
                        
                    }
                    else {

                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = 'Password length has to be at least 8 characters'), $$invalidate('statusColor', statusColor = 'red'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 2000);

                    }
                }
                else {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = 'Old and New Password cannot be the same'), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                }
            }
            else {

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = "Please Fill Out Both Fields"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            }
        }

        function confirmMFA() {

            if(mfaCode != '' && password != '') {

                Payload = {
                    username : $acctTab.username,
                    password : password,
                    code : mfaCode,
                    func : 'confirmMFA'
                };

                invokeLambda(env.lambda.nodeAPI, Payload).then((response) => {

                    $$invalidate('password', password = ''), mfaCode = '';

                    console.log(response);

                    if(response == 'SUCCESS') {

                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'SUCCESS'), $$invalidate('message', message = "MFA Setup Successfully"), $$invalidate('statusColor', statusColor = 'green'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 2000);

                    } else {
                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'FAILED'), $$invalidate('message', message = "MFA Setup Failed"), $$invalidate('statusColor', statusColor = 'red'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 2000);
                    }
                    
                }).catch((err) => {

                    console.log(err);

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error'), $$invalidate('message', message = "Please Try Again Later"), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                });

            }
            else {

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Sign In'), $$invalidate('message', message = "Please Fill All Fields!"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            }
        }

        let screenWidth = screen.width;

    	function input_input_handler() {
    		password = this.value;
    		$$invalidate('password', password);
    	}

    	const click_handler = () => { $$invalidate('promptPassword', promptPassword = false); $$invalidate('edit', edit = false); $$invalidate('del', del = false); };

    	function input1_input_handler() {
    		Name = this.value;
    		$$invalidate('Name', Name);
    	}

    	function input2_input_handler() {
    		Email = this.value;
    		$$invalidate('Email', Email);
    	}

    	const click_handler_1 = () => { $$invalidate('promptPassword', promptPassword = true); $$invalidate('edit', edit = true); };

    	function input3_input_handler() {
    		oldPassword = this.value;
    		$$invalidate('oldPassword', oldPassword);
    	}

    	function input4_input_handler() {
    		newPassword = this.value;
    		$$invalidate('newPassword', newPassword);
    	}

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('Name' in $$props) $$invalidate('Name', Name = $$props.Name);
    		if ('Email' in $$props) $$invalidate('Email', Email = $$props.Email);
    		if ('Picture' in $$props) $$invalidate('Picture', Picture = $$props.Picture);
    		if ('mfaCode' in $$props) mfaCode = $$props.mfaCode;
    		if ('Payload' in $$props) Payload = $$props.Payload;
    		if ('password' in $$props) $$invalidate('password', password = $$props.password);
    		if ('imageLabel' in $$props) $$invalidate('imageLabel', imageLabel = $$props.imageLabel);
    		if ('promptPassword' in $$props) $$invalidate('promptPassword', promptPassword = $$props.promptPassword);
    		if ('edit' in $$props) $$invalidate('edit', edit = $$props.edit);
    		if ('del' in $$props) $$invalidate('del', del = $$props.del);
    		if ('mfa' in $$props) mfa = $$props.mfa;
    		if ('oldPassword' in $$props) $$invalidate('oldPassword', oldPassword = $$props.oldPassword);
    		if ('newPassword' in $$props) $$invalidate('newPassword', newPassword = $$props.newPassword);
    		if ('showMsg' in $$props) $$invalidate('showMsg', showMsg = $$props.showMsg);
    		if ('statusColor' in $$props) $$invalidate('statusColor', statusColor = $$props.statusColor);
    		if ('heading' in $$props) $$invalidate('heading', heading = $$props.heading);
    		if ('message' in $$props) $$invalidate('message', message = $$props.message);
    		if ('screenWidth' in $$props) screenWidth = $$props.screenWidth;
    		if ('$acctTab' in $$props) acctTab$1.set($acctTab);
    	};

    	return {
    		Name,
    		Email,
    		Picture,
    		password,
    		imageLabel,
    		promptPassword,
    		edit,
    		del,
    		oldPassword,
    		newPassword,
    		showMsg,
    		statusColor,
    		heading,
    		message,
    		upload,
    		editProfile,
    		resetPassword,
    		confirmMFA,
    		input_input_handler,
    		click_handler,
    		input1_input_handler,
    		input2_input_handler,
    		click_handler_1,
    		input3_input_handler,
    		input4_input_handler
    	};
    }

    class Cuser extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$9, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Cuser", options, id: create_fragment$9.name });
    	}
    }

    /* src/Pages/Account.svelte generated by Svelte v3.12.1 */

    const file$9 = "src/Pages/Account.svelte";

    // (22:4) {:else}
    function create_else_block$3(ctx) {
    	var current;

    	var cuser = new Cuser({ $$inline: true });

    	const block = {
    		c: function create() {
    			cuser.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(cuser, target, anchor);
    			current = true;
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(cuser.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(cuser.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(cuser, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$3.name, type: "else", source: "(22:4) {:else}", ctx });
    	return block;
    }

    // (20:42) 
    function create_if_block_2$3(ctx) {
    	var current;

    	var buser = new Buser({ $$inline: true });

    	const block = {
    		c: function create() {
    			buser.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(buser, target, anchor);
    			current = true;
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(buser.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(buser.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(buser, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$3.name, type: "if", source: "(20:42) ", ctx });
    	return block;
    }

    // (18:4) {#if $acctTab.userType[0] == 'A'}
    function create_if_block_1$3(ctx) {
    	var current;

    	var auser = new Auser({ $$inline: true });

    	const block = {
    		c: function create() {
    			auser.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(auser, target, anchor);
    			current = true;
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(auser.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(auser.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(auser, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$3.name, type: "if", source: "(18:4) {#if $acctTab.userType[0] == 'A'}", ctx });
    	return block;
    }

    // (12:0) {#if $acctTab.userType == null}
    function create_if_block$4(ctx) {
    	var div, img, t, h6;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			t = space();
    			h6 = element("h6");
    			h6.textContent = "Loading...";
    			attr_dev(img, "src", "https://autoarch.blob.core.windows.net/resources/loader.gif");
    			attr_dev(img, "alt", "Loader");
    			add_location(img, file$9, 13, 8, 474);
    			attr_dev(div, "class", "text-center");
    			add_location(div, file$9, 12, 4, 440);
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$9, 15, 4, 575);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			insert_dev(target, t, anchor);
    			insert_dev(target, h6, anchor);
    		},

    		i: noop,
    		o: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    				detach_dev(t);
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$4.name, type: "if", source: "(12:0) {#if $acctTab.userType == null}", ctx });
    	return block;
    }

    function create_fragment$a(ctx) {
    	var h1, t_1, current_block_type_index, if_block, if_block_anchor, current;

    	var if_block_creators = [
    		create_if_block$4,
    		create_if_block_1$3,
    		create_if_block_2$3,
    		create_else_block$3
    	];

    	var if_blocks = [];

    	function select_block_type(changed, ctx) {
    		if (ctx.$acctTab.userType == null) return 0;
    		if (ctx.$acctTab.userType[0] == 'A') return 1;
    		if (ctx.$acctTab.userType[0] == 'B') return 2;
    		return 3;
    	}

    	current_block_type_index = select_block_type(null, ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Account";
    			t_1 = space();
    			if_block.c();
    			if_block_anchor = empty();
    			add_location(h1, file$9, 9, 0, 386);
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t_1, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(changed, ctx);
    			if (current_block_type_index !== previous_block_index) {
    				group_outros();
    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});
    				check_outros();

    				if_block = if_blocks[current_block_type_index];
    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}
    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h1);
    				detach_dev(t_1);
    			}

    			if_blocks[current_block_type_index].d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$a.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let $acctTab;

    	validate_store(acctTab$1, 'acctTab');
    	component_subscribe($$self, acctTab$1, $$value => { $acctTab = $$value; $$invalidate('$acctTab', $acctTab); });

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('$acctTab' in $$props) acctTab$1.set($acctTab);
    	};

    	return { $acctTab };
    }

    class Account extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$a, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Account", options, id: create_fragment$a.name });
    	}
    }

    function queryResults(userInput, results, prevResults) {
        if(userInput.length > 0) {
            let tempResults = [];
        
            for(let i = 0; i < results.length; i++) {
                if(results[i].Model.includes(userInput.toUpperCase()))
                    tempResults.push(results[i]);
            }

            if(tempResults.length == 0)
                return prevResults;
            else
                return tempResults;
        }
        if(userInput.length == 0) {
            return prevResults
        }
    }

    function sortResults(sort, order, results) {
        if(order == 'asc') {
            if(sort == 'Model') {
                return results.sort(function(a, b) {
                    let modelA = a.Model.toLowerCase(), modelB = b.Model.toLowerCase();

                    if(modelA < modelB)
                        return -1;
                    if(modelA > modelB)
                        return 1;
                    return 0;
                });
            }
            else if(sort == 'Year'){
                return results.sort(function(a, b) {
                    return a.Year - b.Year;
                });
            }
            else if(sort == 'Date') {
                return results.sort(function(a, b) {
                    let dateA = new window.Date(a.Date), dateB = new window.Date(b.Date);
                    return dateA - dateB;
                });
            }
            else if(sort == 'Bid') {
                return results.sort(function(a, b) {
                    return a.Price - b.Price;
                });
            }
            else if(sort == 'Mileage') {
                return results.sort(function(a, b) {
                    return a.Mileage - b.Mileage;
                });
            }
        }
        else if(order == 'dsc') {
            if(sort == 'Model') {
                return results.sort(function(a, b) {
                    let modelA = a.Model.toLowerCase(), modelB = b.Model.toLowerCase();

                    if(modelA > modelB)
                        return -1;
                    if(modelA < modelB)
                        return 1;
                    return 0;
                });
            }
            else if(sort == 'Year'){
                return results.sort(function(a, b) {
                    return b.Year - a.Year;
                });
            }
            else if(sort == 'Date') {
                return results.sort(function(a, b) {
                    let dateA = new window.Date(a.Date), dateB = new window.Date(b.Date);
                    return dateB - dateA;
                });
            }
            else if(sort == 'Bid') {
                return results.sort(function(a, b) {
                    return b.Price - a.Price;
                });
            }
            else if(sort == 'Mileage') {
                return results.sort(function(a, b) {
                    return b.Mileage - a.Mileage;
                });
            }
        }

        let idx = null;

        tabIndex.update(state => {
            idx = state;
            return state;
        });

        if(idx == 1) {
            searchTab.update(state => {
                state.results = results;
                state.order = order;
                state.sort = sort;
                return state;
            });
        }
    }

    function filterResults(auto, results) {
        let tempResults = [];

        if(auto.startYear != '') {
            for(let i = 0; i < results.length; i++) {
                if(results[i].Year >= auto.startYear) {
                    tempResults.push(results[i]);
                }
            }
        }

        if(auto.endYear != '') {
            for(let i = 0; i < results.length; i++) {
                if(results[i].Year <= auto.endYear) {
                    tempResults.push(results[i]);
                }
            }
        }

        if(auto.CYL != '') {
            for(let i = 0; i < results.length; i++) {
                if(results[i].CYL.includes(auto.CYL) && results[i].CYL != null) {
                    tempResults.push(results[i]);
                }
            }
        }

        if(auto.Status != '') {
            for(let i = 0; i < results.length; i++) {
                if(results[i].Status == auto.Status) {
                    tempResults.push(results[i]);
                }
            }
        }

        if(auto.startDate != '') {
            let startDate = parseInt(auto.startDate.replace('-', '').replace('-', ''));
            for(let i = 0; i < results.length; i++) {
                let resultDate = parseInt(results[i].Date.replace('-', '').replace('-', ''));
                if(resultDate >= startDate) {
                    tempResults.push(results[i]);
                }
            }
        }

        if(auto.endDate != '') {
            let endDate = parseInt(filters.endDate.replace('-', '').replace('-', ''));
            for(let i = 0; i < results.length; i++) {
                let resultDate = parseInt(results[i].Date.replace('-', '').replace('-', ''));
                if(resultDate <= endDate) {
                    tempResults.push(results[i]);
                }
            }
        }

        if(auto.minMile != '') {
            for(let i = 0; i < results.length; i++) {
                if(results[i].Mileage >= auto.minMile) {
                    tempResults.push(results[i]);
                }
            }
        }

        if(auto.maxMile != '') {
            for(let i = 0; i < results.length; i++) {
                if(results[i].Mileage >= auto.maxMile) {
                    tempResults.push(results[i]);
                }
            }
        }

        if(auto.minBid != '') {
            for(let i = 0; i < results.length; i++) {
                if(results[i].Price >= auto.minBid) {
                    tempResults.push(results[i]);
                }
            }
        }

        if(auto.maxBid != '') {
            for(let i = 0; i < results.length; i++) {
                if(results[i].Price <= auto.maxBid) {
                    tempResults.push(results[i]);
                }
            }
        }

        if(tabIndex == 1) {
            searchTab.update(state => {
                state.results = tempResults;
                state.filter = auto;
                return state;
            });
        }

        return tempResults;
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var moment$1 = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
         module.exports = factory() ;
    }(commonjsGlobal, (function () {
        var hookCallback;

        function hooks () {
            return hookCallback.apply(null, arguments);
        }

        // This is done to register the method called with moment()
        // without creating circular dependencies.
        function setHookCallback (callback) {
            hookCallback = callback;
        }

        function isArray(input) {
            return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
        }

        function isObject(input) {
            // IE8 will treat undefined and null as object if it wasn't for
            // input != null
            return input != null && Object.prototype.toString.call(input) === '[object Object]';
        }

        function isObjectEmpty(obj) {
            if (Object.getOwnPropertyNames) {
                return (Object.getOwnPropertyNames(obj).length === 0);
            } else {
                var k;
                for (k in obj) {
                    if (obj.hasOwnProperty(k)) {
                        return false;
                    }
                }
                return true;
            }
        }

        function isUndefined(input) {
            return input === void 0;
        }

        function isNumber(input) {
            return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
        }

        function isDate(input) {
            return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
        }

        function map(arr, fn) {
            var res = [], i;
            for (i = 0; i < arr.length; ++i) {
                res.push(fn(arr[i], i));
            }
            return res;
        }

        function hasOwnProp(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
        }

        function extend(a, b) {
            for (var i in b) {
                if (hasOwnProp(b, i)) {
                    a[i] = b[i];
                }
            }

            if (hasOwnProp(b, 'toString')) {
                a.toString = b.toString;
            }

            if (hasOwnProp(b, 'valueOf')) {
                a.valueOf = b.valueOf;
            }

            return a;
        }

        function createUTC (input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, true).utc();
        }

        function defaultParsingFlags() {
            // We need to deep clone this object.
            return {
                empty           : false,
                unusedTokens    : [],
                unusedInput     : [],
                overflow        : -2,
                charsLeftOver   : 0,
                nullInput       : false,
                invalidMonth    : null,
                invalidFormat   : false,
                userInvalidated : false,
                iso             : false,
                parsedDateParts : [],
                meridiem        : null,
                rfc2822         : false,
                weekdayMismatch : false
            };
        }

        function getParsingFlags(m) {
            if (m._pf == null) {
                m._pf = defaultParsingFlags();
            }
            return m._pf;
        }

        var some;
        if (Array.prototype.some) {
            some = Array.prototype.some;
        } else {
            some = function (fun) {
                var t = Object(this);
                var len = t.length >>> 0;

                for (var i = 0; i < len; i++) {
                    if (i in t && fun.call(this, t[i], i, t)) {
                        return true;
                    }
                }

                return false;
            };
        }

        function isValid(m) {
            if (m._isValid == null) {
                var flags = getParsingFlags(m);
                var parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                });
                var isNowValid = !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

                if (m._strict) {
                    isNowValid = isNowValid &&
                        flags.charsLeftOver === 0 &&
                        flags.unusedTokens.length === 0 &&
                        flags.bigHour === undefined;
                }

                if (Object.isFrozen == null || !Object.isFrozen(m)) {
                    m._isValid = isNowValid;
                }
                else {
                    return isNowValid;
                }
            }
            return m._isValid;
        }

        function createInvalid (flags) {
            var m = createUTC(NaN);
            if (flags != null) {
                extend(getParsingFlags(m), flags);
            }
            else {
                getParsingFlags(m).userInvalidated = true;
            }

            return m;
        }

        // Plugins that add properties should also add the key here (null value),
        // so we can properly clone ourselves.
        var momentProperties = hooks.momentProperties = [];

        function copyConfig(to, from) {
            var i, prop, val;

            if (!isUndefined(from._isAMomentObject)) {
                to._isAMomentObject = from._isAMomentObject;
            }
            if (!isUndefined(from._i)) {
                to._i = from._i;
            }
            if (!isUndefined(from._f)) {
                to._f = from._f;
            }
            if (!isUndefined(from._l)) {
                to._l = from._l;
            }
            if (!isUndefined(from._strict)) {
                to._strict = from._strict;
            }
            if (!isUndefined(from._tzm)) {
                to._tzm = from._tzm;
            }
            if (!isUndefined(from._isUTC)) {
                to._isUTC = from._isUTC;
            }
            if (!isUndefined(from._offset)) {
                to._offset = from._offset;
            }
            if (!isUndefined(from._pf)) {
                to._pf = getParsingFlags(from);
            }
            if (!isUndefined(from._locale)) {
                to._locale = from._locale;
            }

            if (momentProperties.length > 0) {
                for (i = 0; i < momentProperties.length; i++) {
                    prop = momentProperties[i];
                    val = from[prop];
                    if (!isUndefined(val)) {
                        to[prop] = val;
                    }
                }
            }

            return to;
        }

        var updateInProgress = false;

        // Moment prototype object
        function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);
            if (!this.isValid()) {
                this._d = new Date(NaN);
            }
            // Prevent infinite loop in case updateOffset creates new moment
            // objects.
            if (updateInProgress === false) {
                updateInProgress = true;
                hooks.updateOffset(this);
                updateInProgress = false;
            }
        }

        function isMoment (obj) {
            return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
        }

        function absFloor (number) {
            if (number < 0) {
                // -0 -> 0
                return Math.ceil(number) || 0;
            } else {
                return Math.floor(number);
            }
        }

        function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion,
                value = 0;

            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                value = absFloor(coercedNumber);
            }

            return value;
        }

        // compare two arrays, return the number of differences
        function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length),
                lengthDiff = Math.abs(array1.length - array2.length),
                diffs = 0,
                i;
            for (i = 0; i < len; i++) {
                if ((dontConvert && array1[i] !== array2[i]) ||
                    (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                    diffs++;
                }
            }
            return diffs + lengthDiff;
        }

        function warn(msg) {
            if (hooks.suppressDeprecationWarnings === false &&
                    (typeof console !==  'undefined') && console.warn) {
                console.warn('Deprecation warning: ' + msg);
            }
        }

        function deprecate(msg, fn) {
            var firstTime = true;

            return extend(function () {
                if (hooks.deprecationHandler != null) {
                    hooks.deprecationHandler(null, msg);
                }
                if (firstTime) {
                    var args = [];
                    var arg;
                    for (var i = 0; i < arguments.length; i++) {
                        arg = '';
                        if (typeof arguments[i] === 'object') {
                            arg += '\n[' + i + '] ';
                            for (var key in arguments[0]) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }
                            arg = arg.slice(0, -2); // Remove trailing comma and space
                        } else {
                            arg = arguments[i];
                        }
                        args.push(arg);
                    }
                    warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                    firstTime = false;
                }
                return fn.apply(this, arguments);
            }, fn);
        }

        var deprecations = {};

        function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(name, msg);
            }
            if (!deprecations[name]) {
                warn(msg);
                deprecations[name] = true;
            }
        }

        hooks.suppressDeprecationWarnings = false;
        hooks.deprecationHandler = null;

        function isFunction(input) {
            return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
        }

        function set (config) {
            var prop, i;
            for (i in config) {
                prop = config[i];
                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
            this._config = config;
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
            // TODO: Remove "ordinalParse" fallback in next major release.
            this._dayOfMonthOrdinalParseLenient = new RegExp(
                (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                    '|' + (/\d{1,2}/).source);
        }

        function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig), prop;
            for (prop in childConfig) {
                if (hasOwnProp(childConfig, prop)) {
                    if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                        res[prop] = {};
                        extend(res[prop], parentConfig[prop]);
                        extend(res[prop], childConfig[prop]);
                    } else if (childConfig[prop] != null) {
                        res[prop] = childConfig[prop];
                    } else {
                        delete res[prop];
                    }
                }
            }
            for (prop in parentConfig) {
                if (hasOwnProp(parentConfig, prop) &&
                        !hasOwnProp(childConfig, prop) &&
                        isObject(parentConfig[prop])) {
                    // make sure changes to properties don't modify parent config
                    res[prop] = extend({}, res[prop]);
                }
            }
            return res;
        }

        function Locale(config) {
            if (config != null) {
                this.set(config);
            }
        }

        var keys;

        if (Object.keys) {
            keys = Object.keys;
        } else {
            keys = function (obj) {
                var i, res = [];
                for (i in obj) {
                    if (hasOwnProp(obj, i)) {
                        res.push(i);
                    }
                }
                return res;
            };
        }

        var defaultCalendar = {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        };

        function calendar (key, mom, now) {
            var output = this._calendar[key] || this._calendar['sameElse'];
            return isFunction(output) ? output.call(mom, now) : output;
        }

        var defaultLongDateFormat = {
            LTS  : 'h:mm:ss A',
            LT   : 'h:mm A',
            L    : 'MM/DD/YYYY',
            LL   : 'MMMM D, YYYY',
            LLL  : 'MMMM D, YYYY h:mm A',
            LLLL : 'dddd, MMMM D, YYYY h:mm A'
        };

        function longDateFormat (key) {
            var format = this._longDateFormat[key],
                formatUpper = this._longDateFormat[key.toUpperCase()];

            if (format || !formatUpper) {
                return format;
            }

            this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
                return val.slice(1);
            });

            return this._longDateFormat[key];
        }

        var defaultInvalidDate = 'Invalid date';

        function invalidDate () {
            return this._invalidDate;
        }

        var defaultOrdinal = '%d';
        var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

        function ordinal (number) {
            return this._ordinal.replace('%d', number);
        }

        var defaultRelativeTime = {
            future : 'in %s',
            past   : '%s ago',
            s  : 'a few seconds',
            ss : '%d seconds',
            m  : 'a minute',
            mm : '%d minutes',
            h  : 'an hour',
            hh : '%d hours',
            d  : 'a day',
            dd : '%d days',
            M  : 'a month',
            MM : '%d months',
            y  : 'a year',
            yy : '%d years'
        };

        function relativeTime (number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return (isFunction(output)) ?
                output(number, withoutSuffix, string, isFuture) :
                output.replace(/%d/i, number);
        }

        function pastFuture (diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return isFunction(format) ? format(output) : format.replace(/%s/i, output);
        }

        var aliases = {};

        function addUnitAlias (unit, shorthand) {
            var lowerCase = unit.toLowerCase();
            aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
        }

        function normalizeUnits(units) {
            return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
        }

        function normalizeObjectUnits(inputObject) {
            var normalizedInput = {},
                normalizedProp,
                prop;

            for (prop in inputObject) {
                if (hasOwnProp(inputObject, prop)) {
                    normalizedProp = normalizeUnits(prop);
                    if (normalizedProp) {
                        normalizedInput[normalizedProp] = inputObject[prop];
                    }
                }
            }

            return normalizedInput;
        }

        var priorities = {};

        function addUnitPriority(unit, priority) {
            priorities[unit] = priority;
        }

        function getPrioritizedUnits(unitsObj) {
            var units = [];
            for (var u in unitsObj) {
                units.push({unit: u, priority: priorities[u]});
            }
            units.sort(function (a, b) {
                return a.priority - b.priority;
            });
            return units;
        }

        function zeroFill(number, targetLength, forceSign) {
            var absNumber = '' + Math.abs(number),
                zerosToFill = targetLength - absNumber.length,
                sign = number >= 0;
            return (sign ? (forceSign ? '+' : '') : '-') +
                Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
        }

        var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

        var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

        var formatFunctions = {};

        var formatTokenFunctions = {};

        // token:    'M'
        // padded:   ['MM', 2]
        // ordinal:  'Mo'
        // callback: function () { this.month() + 1 }
        function addFormatToken (token, padded, ordinal, callback) {
            var func = callback;
            if (typeof callback === 'string') {
                func = function () {
                    return this[callback]();
                };
            }
            if (token) {
                formatTokenFunctions[token] = func;
            }
            if (padded) {
                formatTokenFunctions[padded[0]] = function () {
                    return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                };
            }
            if (ordinal) {
                formatTokenFunctions[ordinal] = function () {
                    return this.localeData().ordinal(func.apply(this, arguments), token);
                };
            }
        }

        function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|\]$/g, '');
            }
            return input.replace(/\\/g, '');
        }

        function makeFormatFunction(format) {
            var array = format.match(formattingTokens), i, length;

            for (i = 0, length = array.length; i < length; i++) {
                if (formatTokenFunctions[array[i]]) {
                    array[i] = formatTokenFunctions[array[i]];
                } else {
                    array[i] = removeFormattingTokens(array[i]);
                }
            }

            return function (mom) {
                var output = '', i;
                for (i = 0; i < length; i++) {
                    output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
                }
                return output;
            };
        }

        // format date using native date object
        function formatMoment(m, format) {
            if (!m.isValid()) {
                return m.localeData().invalidDate();
            }

            format = expandFormat(format, m.localeData());
            formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

            return formatFunctions[format](m);
        }

        function expandFormat(format, locale) {
            var i = 5;

            function replaceLongDateFormatTokens(input) {
                return locale.longDateFormat(input) || input;
            }

            localFormattingTokens.lastIndex = 0;
            while (i >= 0 && localFormattingTokens.test(format)) {
                format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
                localFormattingTokens.lastIndex = 0;
                i -= 1;
            }

            return format;
        }

        var match1         = /\d/;            //       0 - 9
        var match2         = /\d\d/;          //      00 - 99
        var match3         = /\d{3}/;         //     000 - 999
        var match4         = /\d{4}/;         //    0000 - 9999
        var match6         = /[+-]?\d{6}/;    // -999999 - 999999
        var match1to2      = /\d\d?/;         //       0 - 99
        var match3to4      = /\d\d\d\d?/;     //     999 - 9999
        var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
        var match1to3      = /\d{1,3}/;       //       0 - 999
        var match1to4      = /\d{1,4}/;       //       0 - 9999
        var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

        var matchUnsigned  = /\d+/;           //       0 - inf
        var matchSigned    = /[+-]?\d+/;      //    -inf - inf

        var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
        var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

        var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

        var regexes = {};

        function addRegexToken (token, regex, strictRegex) {
            regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
                return (isStrict && strictRegex) ? strictRegex : regex;
            };
        }

        function getParseRegexForToken (token, config) {
            if (!hasOwnProp(regexes, token)) {
                return new RegExp(unescapeFormat(token));
            }

            return regexes[token](config._strict, config._locale);
        }

        // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
        function unescapeFormat(s) {
            return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
                return p1 || p2 || p3 || p4;
            }));
        }

        function regexEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        }

        var tokens = {};

        function addParseToken (token, callback) {
            var i, func = callback;
            if (typeof token === 'string') {
                token = [token];
            }
            if (isNumber(callback)) {
                func = function (input, array) {
                    array[callback] = toInt(input);
                };
            }
            for (i = 0; i < token.length; i++) {
                tokens[token[i]] = func;
            }
        }

        function addWeekParseToken (token, callback) {
            addParseToken(token, function (input, array, config, token) {
                config._w = config._w || {};
                callback(input, config._w, config, token);
            });
        }

        function addTimeToArrayFromToken(token, input, config) {
            if (input != null && hasOwnProp(tokens, token)) {
                tokens[token](input, config._a, config, token);
            }
        }

        var YEAR = 0;
        var MONTH = 1;
        var DATE = 2;
        var HOUR = 3;
        var MINUTE = 4;
        var SECOND = 5;
        var MILLISECOND = 6;
        var WEEK = 7;
        var WEEKDAY = 8;

        // FORMATTING

        addFormatToken('Y', 0, 0, function () {
            var y = this.year();
            return y <= 9999 ? '' + y : '+' + y;
        });

        addFormatToken(0, ['YY', 2], 0, function () {
            return this.year() % 100;
        });

        addFormatToken(0, ['YYYY',   4],       0, 'year');
        addFormatToken(0, ['YYYYY',  5],       0, 'year');
        addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

        // ALIASES

        addUnitAlias('year', 'y');

        // PRIORITIES

        addUnitPriority('year', 1);

        // PARSING

        addRegexToken('Y',      matchSigned);
        addRegexToken('YY',     match1to2, match2);
        addRegexToken('YYYY',   match1to4, match4);
        addRegexToken('YYYYY',  match1to6, match6);
        addRegexToken('YYYYYY', match1to6, match6);

        addParseToken(['YYYYY', 'YYYYYY'], YEAR);
        addParseToken('YYYY', function (input, array) {
            array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
        });
        addParseToken('YY', function (input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
        });
        addParseToken('Y', function (input, array) {
            array[YEAR] = parseInt(input, 10);
        });

        // HELPERS

        function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
        }

        function isLeapYear(year) {
            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
        }

        // HOOKS

        hooks.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
        };

        // MOMENTS

        var getSetYear = makeGetSet('FullYear', true);

        function getIsLeapYear () {
            return isLeapYear(this.year());
        }

        function makeGetSet (unit, keepTime) {
            return function (value) {
                if (value != null) {
                    set$1(this, unit, value);
                    hooks.updateOffset(this, keepTime);
                    return this;
                } else {
                    return get(this, unit);
                }
            };
        }

        function get (mom, unit) {
            return mom.isValid() ?
                mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
        }

        function set$1 (mom, unit, value) {
            if (mom.isValid() && !isNaN(value)) {
                if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
                }
                else {
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
                }
            }
        }

        // MOMENTS

        function stringGet (units) {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units]();
            }
            return this;
        }


        function stringSet (units, value) {
            if (typeof units === 'object') {
                units = normalizeObjectUnits(units);
                var prioritized = getPrioritizedUnits(units);
                for (var i = 0; i < prioritized.length; i++) {
                    this[prioritized[i].unit](units[prioritized[i].unit]);
                }
            } else {
                units = normalizeUnits(units);
                if (isFunction(this[units])) {
                    return this[units](value);
                }
            }
            return this;
        }

        function mod(n, x) {
            return ((n % x) + x) % x;
        }

        var indexOf;

        if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
        } else {
            indexOf = function (o) {
                // I know
                var i;
                for (i = 0; i < this.length; ++i) {
                    if (this[i] === o) {
                        return i;
                    }
                }
                return -1;
            };
        }

        function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
                return NaN;
            }
            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
        }

        // FORMATTING

        addFormatToken('M', ['MM', 2], 'Mo', function () {
            return this.month() + 1;
        });

        addFormatToken('MMM', 0, 0, function (format) {
            return this.localeData().monthsShort(this, format);
        });

        addFormatToken('MMMM', 0, 0, function (format) {
            return this.localeData().months(this, format);
        });

        // ALIASES

        addUnitAlias('month', 'M');

        // PRIORITY

        addUnitPriority('month', 8);

        // PARSING

        addRegexToken('M',    match1to2);
        addRegexToken('MM',   match1to2, match2);
        addRegexToken('MMM',  function (isStrict, locale) {
            return locale.monthsShortRegex(isStrict);
        });
        addRegexToken('MMMM', function (isStrict, locale) {
            return locale.monthsRegex(isStrict);
        });

        addParseToken(['M', 'MM'], function (input, array) {
            array[MONTH] = toInt(input) - 1;
        });

        addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
            var month = config._locale.monthsParse(input, token, config._strict);
            // if we didn't find a month name, mark the date as invalid.
            if (month != null) {
                array[MONTH] = month;
            } else {
                getParsingFlags(config).invalidMonth = input;
            }
        });

        // LOCALES

        var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
        var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
        function localeMonths (m, format) {
            if (!m) {
                return isArray(this._months) ? this._months :
                    this._months['standalone'];
            }
            return isArray(this._months) ? this._months[m.month()] :
                this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
        }

        var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
        function localeMonthsShort (m, format) {
            if (!m) {
                return isArray(this._monthsShort) ? this._monthsShort :
                    this._monthsShort['standalone'];
            }
            return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
                this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
        }

        function handleStrictParse(monthName, format, strict) {
            var i, ii, mom, llc = monthName.toLocaleLowerCase();
            if (!this._monthsParse) {
                // this is not used
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
                for (i = 0; i < 12; ++i) {
                    mom = createUTC([2000, i]);
                    this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                    this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
                }
            }

            if (strict) {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }

        function localeMonthsParse (monthName, format, strict) {
            var i, mom, regex;

            if (this._monthsParseExact) {
                return handleStrictParse.call(this, monthName, format, strict);
            }

            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
            }

            // TODO: add sorting
            // Sorting makes sure if one month (or abbr) is a prefix of another
            // see sorting in computeMonthsParse
            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                if (strict && !this._longMonthsParse[i]) {
                    this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                    this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
                }
                if (!strict && !this._monthsParse[i]) {
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                    return i;
                } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                    return i;
                } else if (!strict && this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        }

        // MOMENTS

        function setMonth (mom, value) {
            var dayOfMonth;

            if (!mom.isValid()) {
                // No op
                return mom;
            }

            if (typeof value === 'string') {
                if (/^\d+$/.test(value)) {
                    value = toInt(value);
                } else {
                    value = mom.localeData().monthsParse(value);
                    // TODO: Another silent failure?
                    if (!isNumber(value)) {
                        return mom;
                    }
                }
            }

            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
            return mom;
        }

        function getSetMonth (value) {
            if (value != null) {
                setMonth(this, value);
                hooks.updateOffset(this, true);
                return this;
            } else {
                return get(this, 'Month');
            }
        }

        function getDaysInMonth () {
            return daysInMonth(this.year(), this.month());
        }

        var defaultMonthsShortRegex = matchWord;
        function monthsShortRegex (isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }
                if (isStrict) {
                    return this._monthsShortStrictRegex;
                } else {
                    return this._monthsShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsShortRegex')) {
                    this._monthsShortRegex = defaultMonthsShortRegex;
                }
                return this._monthsShortStrictRegex && isStrict ?
                    this._monthsShortStrictRegex : this._monthsShortRegex;
            }
        }

        var defaultMonthsRegex = matchWord;
        function monthsRegex (isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }
                if (isStrict) {
                    return this._monthsStrictRegex;
                } else {
                    return this._monthsRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    this._monthsRegex = defaultMonthsRegex;
                }
                return this._monthsStrictRegex && isStrict ?
                    this._monthsStrictRegex : this._monthsRegex;
            }
        }

        function computeMonthsParse () {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }

            var shortPieces = [], longPieces = [], mixedPieces = [],
                i, mom;
            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                shortPieces.push(this.monthsShort(mom, ''));
                longPieces.push(this.months(mom, ''));
                mixedPieces.push(this.months(mom, ''));
                mixedPieces.push(this.monthsShort(mom, ''));
            }
            // Sorting makes sure if one month (or abbr) is a prefix of another it
            // will match the longer piece.
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            for (i = 0; i < 12; i++) {
                shortPieces[i] = regexEscape(shortPieces[i]);
                longPieces[i] = regexEscape(longPieces[i]);
            }
            for (i = 0; i < 24; i++) {
                mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        }

        function createDate (y, m, d, h, M, s, ms) {
            // can't just apply() to create a date:
            // https://stackoverflow.com/q/181348
            var date;
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                date = new Date(y + 400, m, d, h, M, s, ms);
                if (isFinite(date.getFullYear())) {
                    date.setFullYear(y);
                }
            } else {
                date = new Date(y, m, d, h, M, s, ms);
            }

            return date;
        }

        function createUTCDate (y) {
            var date;
            // the Date.UTC function remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                var args = Array.prototype.slice.call(arguments);
                // preserve leap years using a full 400 year cycle, then reset
                args[0] = y + 400;
                date = new Date(Date.UTC.apply(null, args));
                if (isFinite(date.getUTCFullYear())) {
                    date.setUTCFullYear(y);
                }
            } else {
                date = new Date(Date.UTC.apply(null, arguments));
            }

            return date;
        }

        // start-of-first-week - start-of-year
        function firstWeekOffset(year, dow, doy) {
            var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
                fwd = 7 + dow - doy,
                // first-week day local weekday -- which local weekday is fwd
                fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

            return -fwdlw + fwd - 1;
        }

        // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
        function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7,
                weekOffset = firstWeekOffset(year, dow, doy),
                dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                resYear, resDayOfYear;

            if (dayOfYear <= 0) {
                resYear = year - 1;
                resDayOfYear = daysInYear(resYear) + dayOfYear;
            } else if (dayOfYear > daysInYear(year)) {
                resYear = year + 1;
                resDayOfYear = dayOfYear - daysInYear(year);
            } else {
                resYear = year;
                resDayOfYear = dayOfYear;
            }

            return {
                year: resYear,
                dayOfYear: resDayOfYear
            };
        }

        function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                resWeek, resYear;

            if (week < 1) {
                resYear = mom.year() - 1;
                resWeek = week + weeksInYear(resYear, dow, doy);
            } else if (week > weeksInYear(mom.year(), dow, doy)) {
                resWeek = week - weeksInYear(mom.year(), dow, doy);
                resYear = mom.year() + 1;
            } else {
                resYear = mom.year();
                resWeek = week;
            }

            return {
                week: resWeek,
                year: resYear
            };
        }

        function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy),
                weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
        }

        // FORMATTING

        addFormatToken('w', ['ww', 2], 'wo', 'week');
        addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

        // ALIASES

        addUnitAlias('week', 'w');
        addUnitAlias('isoWeek', 'W');

        // PRIORITIES

        addUnitPriority('week', 5);
        addUnitPriority('isoWeek', 5);

        // PARSING

        addRegexToken('w',  match1to2);
        addRegexToken('ww', match1to2, match2);
        addRegexToken('W',  match1to2);
        addRegexToken('WW', match1to2, match2);

        addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
            week[token.substr(0, 1)] = toInt(input);
        });

        // HELPERS

        // LOCALES

        function localeWeek (mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        }

        var defaultLocaleWeek = {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        };

        function localeFirstDayOfWeek () {
            return this._week.dow;
        }

        function localeFirstDayOfYear () {
            return this._week.doy;
        }

        // MOMENTS

        function getSetWeek (input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        }

        function getSetISOWeek (input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        }

        // FORMATTING

        addFormatToken('d', 0, 'do', 'day');

        addFormatToken('dd', 0, 0, function (format) {
            return this.localeData().weekdaysMin(this, format);
        });

        addFormatToken('ddd', 0, 0, function (format) {
            return this.localeData().weekdaysShort(this, format);
        });

        addFormatToken('dddd', 0, 0, function (format) {
            return this.localeData().weekdays(this, format);
        });

        addFormatToken('e', 0, 0, 'weekday');
        addFormatToken('E', 0, 0, 'isoWeekday');

        // ALIASES

        addUnitAlias('day', 'd');
        addUnitAlias('weekday', 'e');
        addUnitAlias('isoWeekday', 'E');

        // PRIORITY
        addUnitPriority('day', 11);
        addUnitPriority('weekday', 11);
        addUnitPriority('isoWeekday', 11);

        // PARSING

        addRegexToken('d',    match1to2);
        addRegexToken('e',    match1to2);
        addRegexToken('E',    match1to2);
        addRegexToken('dd',   function (isStrict, locale) {
            return locale.weekdaysMinRegex(isStrict);
        });
        addRegexToken('ddd',   function (isStrict, locale) {
            return locale.weekdaysShortRegex(isStrict);
        });
        addRegexToken('dddd',   function (isStrict, locale) {
            return locale.weekdaysRegex(isStrict);
        });

        addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
            var weekday = config._locale.weekdaysParse(input, token, config._strict);
            // if we didn't get a weekday name, mark the date as invalid
            if (weekday != null) {
                week.d = weekday;
            } else {
                getParsingFlags(config).invalidWeekday = input;
            }
        });

        addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
            week[token] = toInt(input);
        });

        // HELPERS

        function parseWeekday(input, locale) {
            if (typeof input !== 'string') {
                return input;
            }

            if (!isNaN(input)) {
                return parseInt(input, 10);
            }

            input = locale.weekdaysParse(input);
            if (typeof input === 'number') {
                return input;
            }

            return null;
        }

        function parseIsoWeekday(input, locale) {
            if (typeof input === 'string') {
                return locale.weekdaysParse(input) % 7 || 7;
            }
            return isNaN(input) ? null : input;
        }

        // LOCALES
        function shiftWeekdays (ws, n) {
            return ws.slice(n, 7).concat(ws.slice(0, n));
        }

        var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
        function localeWeekdays (m, format) {
            var weekdays = isArray(this._weekdays) ? this._weekdays :
                this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
            return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
                : (m) ? weekdays[m.day()] : weekdays;
        }

        var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
        function localeWeekdaysShort (m) {
            return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
                : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
        }

        var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
        function localeWeekdaysMin (m) {
            return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
                : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
        }

        function handleStrictParse$1(weekdayName, format, strict) {
            var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._minWeekdaysParse = [];

                for (i = 0; i < 7; ++i) {
                    mom = createUTC([2000, 1]).day(i);
                    this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                    this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                    this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
                }
            }

            if (strict) {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }

        function localeWeekdaysParse (weekdayName, format, strict) {
            var i, mom, regex;

            if (this._weekdaysParseExact) {
                return handleStrictParse$1.call(this, weekdayName, format, strict);
            }

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._minWeekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._fullWeekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already

                mom = createUTC([2000, 1]).day(i);
                if (strict && !this._fullWeekdaysParse[i]) {
                    this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                    this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                    this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
                }
                if (!this._weekdaysParse[i]) {
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                    return i;
                } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                    return i;
                } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                    return i;
                } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        }

        // MOMENTS

        function getSetDayOfWeek (input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        }

        function getSetLocaleDayOfWeek (input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        }

        function getSetISODayOfWeek (input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }

            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.

            if (input != null) {
                var weekday = parseIsoWeekday(input, this.localeData());
                return this.day(this.day() % 7 ? weekday : weekday - 7);
            } else {
                return this.day() || 7;
            }
        }

        var defaultWeekdaysRegex = matchWord;
        function weekdaysRegex (isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysStrictRegex;
                } else {
                    return this._weekdaysRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    this._weekdaysRegex = defaultWeekdaysRegex;
                }
                return this._weekdaysStrictRegex && isStrict ?
                    this._weekdaysStrictRegex : this._weekdaysRegex;
            }
        }

        var defaultWeekdaysShortRegex = matchWord;
        function weekdaysShortRegex (isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysShortStrictRegex;
                } else {
                    return this._weekdaysShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                    this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                }
                return this._weekdaysShortStrictRegex && isStrict ?
                    this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
            }
        }

        var defaultWeekdaysMinRegex = matchWord;
        function weekdaysMinRegex (isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysMinStrictRegex;
                } else {
                    return this._weekdaysMinRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                    this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                }
                return this._weekdaysMinStrictRegex && isStrict ?
                    this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
            }
        }


        function computeWeekdaysParse () {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }

            var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
                i, mom, minp, shortp, longp;
            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, 1]).day(i);
                minp = this.weekdaysMin(mom, '');
                shortp = this.weekdaysShort(mom, '');
                longp = this.weekdays(mom, '');
                minPieces.push(minp);
                shortPieces.push(shortp);
                longPieces.push(longp);
                mixedPieces.push(minp);
                mixedPieces.push(shortp);
                mixedPieces.push(longp);
            }
            // Sorting makes sure if one weekday (or abbr) is a prefix of another it
            // will match the longer piece.
            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            for (i = 0; i < 7; i++) {
                shortPieces[i] = regexEscape(shortPieces[i]);
                longPieces[i] = regexEscape(longPieces[i]);
                mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;

            this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
            this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
        }

        // FORMATTING

        function hFormat() {
            return this.hours() % 12 || 12;
        }

        function kFormat() {
            return this.hours() || 24;
        }

        addFormatToken('H', ['HH', 2], 0, 'hour');
        addFormatToken('h', ['hh', 2], 0, hFormat);
        addFormatToken('k', ['kk', 2], 0, kFormat);

        addFormatToken('hmm', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
        });

        addFormatToken('hmmss', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2);
        });

        addFormatToken('Hmm', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2);
        });

        addFormatToken('Hmmss', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2);
        });

        function meridiem (token, lowercase) {
            addFormatToken(token, 0, 0, function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
            });
        }

        meridiem('a', true);
        meridiem('A', false);

        // ALIASES

        addUnitAlias('hour', 'h');

        // PRIORITY
        addUnitPriority('hour', 13);

        // PARSING

        function matchMeridiem (isStrict, locale) {
            return locale._meridiemParse;
        }

        addRegexToken('a',  matchMeridiem);
        addRegexToken('A',  matchMeridiem);
        addRegexToken('H',  match1to2);
        addRegexToken('h',  match1to2);
        addRegexToken('k',  match1to2);
        addRegexToken('HH', match1to2, match2);
        addRegexToken('hh', match1to2, match2);
        addRegexToken('kk', match1to2, match2);

        addRegexToken('hmm', match3to4);
        addRegexToken('hmmss', match5to6);
        addRegexToken('Hmm', match3to4);
        addRegexToken('Hmmss', match5to6);

        addParseToken(['H', 'HH'], HOUR);
        addParseToken(['k', 'kk'], function (input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
        });
        addParseToken(['a', 'A'], function (input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
        });
        addParseToken(['h', 'hh'], function (input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmmss', function (input, array, config) {
            var pos1 = input.length - 4;
            var pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('Hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
        });
        addParseToken('Hmmss', function (input, array, config) {
            var pos1 = input.length - 4;
            var pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
        });

        // LOCALES

        function localeIsPM (input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return ((input + '').toLowerCase().charAt(0) === 'p');
        }

        var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
        function localeMeridiem (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        }


        // MOMENTS

        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        var getSetHour = makeGetSet('Hours', true);

        var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,

            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,

            week: defaultLocaleWeek,

            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,

            meridiemParse: defaultLocaleMeridiemParse
        };

        // internal storage for locale config files
        var locales = {};
        var localeFamilies = {};
        var globalLocale;

        function normalizeLocale(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
        }

        // pick the locale from the array
        // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
        // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
        function chooseLocale(names) {
            var i = 0, j, next, locale, split;

            while (i < names.length) {
                split = normalizeLocale(names[i]).split('-');
                j = split.length;
                next = normalizeLocale(names[i + 1]);
                next = next ? next.split('-') : null;
                while (j > 0) {
                    locale = loadLocale(split.slice(0, j).join('-'));
                    if (locale) {
                        return locale;
                    }
                    if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                        //the next array item is better than a shallower substring of this one
                        break;
                    }
                    j--;
                }
                i++;
            }
            return globalLocale;
        }

        function loadLocale(name) {
            var oldLocale = null;
            // TODO: Find a better way to register and load all the locales in Node
            if (!locales[name] && ('object' !== 'undefined') &&
                    module && module.exports) {
                try {
                    oldLocale = globalLocale._abbr;
                    var aliasedRequire = commonjsRequire;
                    aliasedRequire('./locale/' + name);
                    getSetGlobalLocale(oldLocale);
                } catch (e) {}
            }
            return locales[name];
        }

        // This function will load locale and then set the global locale.  If
        // no arguments are passed in, it will simply return the current global
        // locale key.
        function getSetGlobalLocale (key, values) {
            var data;
            if (key) {
                if (isUndefined(values)) {
                    data = getLocale(key);
                }
                else {
                    data = defineLocale(key, values);
                }

                if (data) {
                    // moment.duration._locale = moment._locale = data;
                    globalLocale = data;
                }
                else {
                    if ((typeof console !==  'undefined') && console.warn) {
                        //warn user if arguments are passed but the locale could not be set
                        console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                    }
                }
            }

            return globalLocale._abbr;
        }

        function defineLocale (name, config) {
            if (config !== null) {
                var locale, parentConfig = baseConfig;
                config.abbr = name;
                if (locales[name] != null) {
                    deprecateSimple('defineLocaleOverride',
                            'use moment.updateLocale(localeName, config) to change ' +
                            'an existing locale. moment.defineLocale(localeName, ' +
                            'config) should only be used for creating a new locale ' +
                            'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                    parentConfig = locales[name]._config;
                } else if (config.parentLocale != null) {
                    if (locales[config.parentLocale] != null) {
                        parentConfig = locales[config.parentLocale]._config;
                    } else {
                        locale = loadLocale(config.parentLocale);
                        if (locale != null) {
                            parentConfig = locale._config;
                        } else {
                            if (!localeFamilies[config.parentLocale]) {
                                localeFamilies[config.parentLocale] = [];
                            }
                            localeFamilies[config.parentLocale].push({
                                name: name,
                                config: config
                            });
                            return null;
                        }
                    }
                }
                locales[name] = new Locale(mergeConfigs(parentConfig, config));

                if (localeFamilies[name]) {
                    localeFamilies[name].forEach(function (x) {
                        defineLocale(x.name, x.config);
                    });
                }

                // backwards compat for now: also set the locale
                // make sure we set the locale AFTER all child locales have been
                // created, so we won't end up with the child locale set.
                getSetGlobalLocale(name);


                return locales[name];
            } else {
                // useful for testing
                delete locales[name];
                return null;
            }
        }

        function updateLocale(name, config) {
            if (config != null) {
                var locale, tmpLocale, parentConfig = baseConfig;
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;

                // backwards compat for now: also set the locale
                getSetGlobalLocale(name);
            } else {
                // pass null for config to unupdate, useful for tests
                if (locales[name] != null) {
                    if (locales[name].parentLocale != null) {
                        locales[name] = locales[name].parentLocale;
                    } else if (locales[name] != null) {
                        delete locales[name];
                    }
                }
            }
            return locales[name];
        }

        // returns locale data
        function getLocale (key) {
            var locale;

            if (key && key._locale && key._locale._abbr) {
                key = key._locale._abbr;
            }

            if (!key) {
                return globalLocale;
            }

            if (!isArray(key)) {
                //short-circuit everything else
                locale = loadLocale(key);
                if (locale) {
                    return locale;
                }
                key = [key];
            }

            return chooseLocale(key);
        }

        function listLocales() {
            return keys(locales);
        }

        function checkOverflow (m) {
            var overflow;
            var a = m._a;

            if (a && getParsingFlags(m).overflow === -2) {
                overflow =
                    a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                    a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                    a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                    a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                    a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                    a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                    -1;

                if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                    overflow = DATE;
                }
                if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                    overflow = WEEK;
                }
                if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                    overflow = WEEKDAY;
                }

                getParsingFlags(m).overflow = overflow;
            }

            return m;
        }

        // Pick the first defined of two or three arguments.
        function defaults(a, b, c) {
            if (a != null) {
                return a;
            }
            if (b != null) {
                return b;
            }
            return c;
        }

        function currentDateArray(config) {
            // hooks is actually the exported moment object
            var nowValue = new Date(hooks.now());
            if (config._useUTC) {
                return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
            }
            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
        }

        // convert an array to a date.
        // the array should mirror the parameters below
        // note: all values past the year are optional and will default to the lowest possible value.
        // [year, month, day , hour, minute, second, millisecond]
        function configFromArray (config) {
            var i, date, input = [], currentDate, expectedWeekday, yearToUse;

            if (config._d) {
                return;
            }

            currentDate = currentDateArray(config);

            //compute day of the year from weeks and weekdays
            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                dayOfYearFromWeekInfo(config);
            }

            //if the day of the year is set, figure out what it is
            if (config._dayOfYear != null) {
                yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

                if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                    getParsingFlags(config)._overflowDayOfYear = true;
                }

                date = createUTCDate(yearToUse, 0, config._dayOfYear);
                config._a[MONTH] = date.getUTCMonth();
                config._a[DATE] = date.getUTCDate();
            }

            // Default to current date.
            // * if no year, month, day of month are given, default to today
            // * if day of month is given, default month and year
            // * if month is given, default only year
            // * if year is given, don't default anything
            for (i = 0; i < 3 && config._a[i] == null; ++i) {
                config._a[i] = input[i] = currentDate[i];
            }

            // Zero out whatever was not defaulted, including time
            for (; i < 7; i++) {
                config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
            }

            // Check for 24:00:00.000
            if (config._a[HOUR] === 24 &&
                    config._a[MINUTE] === 0 &&
                    config._a[SECOND] === 0 &&
                    config._a[MILLISECOND] === 0) {
                config._nextDay = true;
                config._a[HOUR] = 0;
            }

            config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
            expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

            // Apply timezone offset from input. The actual utcOffset can be changed
            // with parseZone.
            if (config._tzm != null) {
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }

            if (config._nextDay) {
                config._a[HOUR] = 24;
            }

            // check for mismatching day of week
            if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
                getParsingFlags(config).weekdayMismatch = true;
            }
        }

        function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
                dow = 1;
                doy = 4;

                // TODO: We need to take the current isoWeekYear, but that depends on
                // how we interpret now (local, utc, fixed offset). So create
                // a now version of current config (take local/utc/offset flags, and
                // create now).
                weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
                week = defaults(w.W, 1);
                weekday = defaults(w.E, 1);
                if (weekday < 1 || weekday > 7) {
                    weekdayOverflow = true;
                }
            } else {
                dow = config._locale._week.dow;
                doy = config._locale._week.doy;

                var curWeek = weekOfYear(createLocal(), dow, doy);

                weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

                // Default to current week.
                week = defaults(w.w, curWeek.week);

                if (w.d != null) {
                    // weekday -- low day numbers are considered next week
                    weekday = w.d;
                    if (weekday < 0 || weekday > 6) {
                        weekdayOverflow = true;
                    }
                } else if (w.e != null) {
                    // local weekday -- counting starts from beginning of week
                    weekday = w.e + dow;
                    if (w.e < 0 || w.e > 6) {
                        weekdayOverflow = true;
                    }
                } else {
                    // default to beginning of week
                    weekday = dow;
                }
            }
            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                getParsingFlags(config)._overflowWeeks = true;
            } else if (weekdayOverflow != null) {
                getParsingFlags(config)._overflowWeekday = true;
            } else {
                temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                config._a[YEAR] = temp.year;
                config._dayOfYear = temp.dayOfYear;
            }
        }

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
        var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

        var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

        var isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            // YYYYMM is NOT allowed by the standard
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/]
        ];

        // iso time formats and regexes
        var isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/]
        ];

        var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

        // date from iso format
        function configFromISO(config) {
            var i, l,
                string = config._i,
                match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                allowTime, dateFormat, timeFormat, tzFormat;

            if (match) {
                getParsingFlags(config).iso = true;

                for (i = 0, l = isoDates.length; i < l; i++) {
                    if (isoDates[i][1].exec(match[1])) {
                        dateFormat = isoDates[i][0];
                        allowTime = isoDates[i][2] !== false;
                        break;
                    }
                }
                if (dateFormat == null) {
                    config._isValid = false;
                    return;
                }
                if (match[3]) {
                    for (i = 0, l = isoTimes.length; i < l; i++) {
                        if (isoTimes[i][1].exec(match[3])) {
                            // match[2] should be 'T' or space
                            timeFormat = (match[2] || ' ') + isoTimes[i][0];
                            break;
                        }
                    }
                    if (timeFormat == null) {
                        config._isValid = false;
                        return;
                    }
                }
                if (!allowTime && timeFormat != null) {
                    config._isValid = false;
                    return;
                }
                if (match[4]) {
                    if (tzRegex.exec(match[4])) {
                        tzFormat = 'Z';
                    } else {
                        config._isValid = false;
                        return;
                    }
                }
                config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
                configFromStringAndFormat(config);
            } else {
                config._isValid = false;
            }
        }

        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

        function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
            var result = [
                untruncateYear(yearStr),
                defaultLocaleMonthsShort.indexOf(monthStr),
                parseInt(dayStr, 10),
                parseInt(hourStr, 10),
                parseInt(minuteStr, 10)
            ];

            if (secondStr) {
                result.push(parseInt(secondStr, 10));
            }

            return result;
        }

        function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);
            if (year <= 49) {
                return 2000 + year;
            } else if (year <= 999) {
                return 1900 + year;
            }
            return year;
        }

        function preprocessRFC2822(s) {
            // Remove comments and folding whitespace and replace multiple-spaces with a single space
            return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
        }

        function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
                // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
                var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                    weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
                if (weekdayProvided !== weekdayActual) {
                    getParsingFlags(config).weekdayMismatch = true;
                    config._isValid = false;
                    return false;
                }
            }
            return true;
        }

        var obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60
        };

        function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
                return obsOffsets[obsOffset];
            } else if (militaryOffset) {
                // the only allowed military tz is Z
                return 0;
            } else {
                var hm = parseInt(numOffset, 10);
                var m = hm % 100, h = (hm - m) / 100;
                return h * 60 + m;
            }
        }

        // date and time from ref 2822 format
        function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i));
            if (match) {
                var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
                if (!checkWeekday(match[1], parsedArray, config)) {
                    return;
                }

                config._a = parsedArray;
                config._tzm = calculateOffset(match[8], match[9], match[10]);

                config._d = createUTCDate.apply(null, config._a);
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

                getParsingFlags(config).rfc2822 = true;
            } else {
                config._isValid = false;
            }
        }

        // date from iso format or fallback
        function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);

            if (matched !== null) {
                config._d = new Date(+matched[1]);
                return;
            }

            configFromISO(config);
            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }

            configFromRFC2822(config);
            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }

            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
        }

        hooks.createFromInputFallback = deprecate(
            'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged and will be removed in an upcoming major release. Please refer to ' +
            'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
            function (config) {
                config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
            }
        );

        // constant that refers to the ISO standard
        hooks.ISO_8601 = function () {};

        // constant that refers to the RFC 2822 form
        hooks.RFC_2822 = function () {};

        // date from string and format string
        function configFromStringAndFormat(config) {
            // TODO: Move this to another part of the creation flow to prevent circular deps
            if (config._f === hooks.ISO_8601) {
                configFromISO(config);
                return;
            }
            if (config._f === hooks.RFC_2822) {
                configFromRFC2822(config);
                return;
            }
            config._a = [];
            getParsingFlags(config).empty = true;

            // This array is used to make a Date, either with `new Date` or `Date.UTC`
            var string = '' + config._i,
                i, parsedInput, tokens, token, skipped,
                stringLength = string.length,
                totalParsedInputLength = 0;

            tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

            for (i = 0; i < tokens.length; i++) {
                token = tokens[i];
                parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
                // console.log('token', token, 'parsedInput', parsedInput,
                //         'regex', getParseRegexForToken(token, config));
                if (parsedInput) {
                    skipped = string.substr(0, string.indexOf(parsedInput));
                    if (skipped.length > 0) {
                        getParsingFlags(config).unusedInput.push(skipped);
                    }
                    string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                    totalParsedInputLength += parsedInput.length;
                }
                // don't parse if it's not a known token
                if (formatTokenFunctions[token]) {
                    if (parsedInput) {
                        getParsingFlags(config).empty = false;
                    }
                    else {
                        getParsingFlags(config).unusedTokens.push(token);
                    }
                    addTimeToArrayFromToken(token, parsedInput, config);
                }
                else if (config._strict && !parsedInput) {
                    getParsingFlags(config).unusedTokens.push(token);
                }
            }

            // add remaining unparsed input length to the string
            getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
            if (string.length > 0) {
                getParsingFlags(config).unusedInput.push(string);
            }

            // clear _12h flag if hour is <= 12
            if (config._a[HOUR] <= 12 &&
                getParsingFlags(config).bigHour === true &&
                config._a[HOUR] > 0) {
                getParsingFlags(config).bigHour = undefined;
            }

            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem;
            // handle meridiem
            config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

            configFromArray(config);
            checkOverflow(config);
        }


        function meridiemFixWrap (locale, hour, meridiem) {
            var isPm;

            if (meridiem == null) {
                // nothing to do
                return hour;
            }
            if (locale.meridiemHour != null) {
                return locale.meridiemHour(hour, meridiem);
            } else if (locale.isPM != null) {
                // Fallback
                isPm = locale.isPM(meridiem);
                if (isPm && hour < 12) {
                    hour += 12;
                }
                if (!isPm && hour === 12) {
                    hour = 0;
                }
                return hour;
            } else {
                // this is not supposed to happen
                return hour;
            }
        }

        // date from string and array of format strings
        function configFromStringAndArray(config) {
            var tempConfig,
                bestMoment,

                scoreToBeat,
                i,
                currentScore;

            if (config._f.length === 0) {
                getParsingFlags(config).invalidFormat = true;
                config._d = new Date(NaN);
                return;
            }

            for (i = 0; i < config._f.length; i++) {
                currentScore = 0;
                tempConfig = copyConfig({}, config);
                if (config._useUTC != null) {
                    tempConfig._useUTC = config._useUTC;
                }
                tempConfig._f = config._f[i];
                configFromStringAndFormat(tempConfig);

                if (!isValid(tempConfig)) {
                    continue;
                }

                // if there is any input that was not parsed add a penalty for that format
                currentScore += getParsingFlags(tempConfig).charsLeftOver;

                //or tokens
                currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

                getParsingFlags(tempConfig).score = currentScore;

                if (scoreToBeat == null || currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }

            extend(config, bestMoment || tempConfig);
        }

        function configFromObject(config) {
            if (config._d) {
                return;
            }

            var i = normalizeObjectUnits(config._i);
            config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
                return obj && parseInt(obj, 10);
            });

            configFromArray(config);
        }

        function createFromConfig (config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));
            if (res._nextDay) {
                // Adding is smart enough around DST
                res.add(1, 'd');
                res._nextDay = undefined;
            }

            return res;
        }

        function prepareConfig (config) {
            var input = config._i,
                format = config._f;

            config._locale = config._locale || getLocale(config._l);

            if (input === null || (format === undefined && input === '')) {
                return createInvalid({nullInput: true});
            }

            if (typeof input === 'string') {
                config._i = input = config._locale.preparse(input);
            }

            if (isMoment(input)) {
                return new Moment(checkOverflow(input));
            } else if (isDate(input)) {
                config._d = input;
            } else if (isArray(format)) {
                configFromStringAndArray(config);
            } else if (format) {
                configFromStringAndFormat(config);
            }  else {
                configFromInput(config);
            }

            if (!isValid(config)) {
                config._d = null;
            }

            return config;
        }

        function configFromInput(config) {
            var input = config._i;
            if (isUndefined(input)) {
                config._d = new Date(hooks.now());
            } else if (isDate(input)) {
                config._d = new Date(input.valueOf());
            } else if (typeof input === 'string') {
                configFromString(config);
            } else if (isArray(input)) {
                config._a = map(input.slice(0), function (obj) {
                    return parseInt(obj, 10);
                });
                configFromArray(config);
            } else if (isObject(input)) {
                configFromObject(config);
            } else if (isNumber(input)) {
                // from milliseconds
                config._d = new Date(input);
            } else {
                hooks.createFromInputFallback(config);
            }
        }

        function createLocalOrUTC (input, format, locale, strict, isUTC) {
            var c = {};

            if (locale === true || locale === false) {
                strict = locale;
                locale = undefined;
            }

            if ((isObject(input) && isObjectEmpty(input)) ||
                    (isArray(input) && input.length === 0)) {
                input = undefined;
            }
            // object construction must be done this way.
            // https://github.com/moment/moment/issues/1423
            c._isAMomentObject = true;
            c._useUTC = c._isUTC = isUTC;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;

            return createFromConfig(c);
        }

        function createLocal (input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, false);
        }

        var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

        var prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

        // Pick a moment m from moments so that m[fn](other) is true for all
        // other. This relies on the function fn to be transitive.
        //
        // moments should either be an array of moment objects or an array, whose
        // first element is an array of moment objects.
        function pickBy(fn, moments) {
            var res, i;
            if (moments.length === 1 && isArray(moments[0])) {
                moments = moments[0];
            }
            if (!moments.length) {
                return createLocal();
            }
            res = moments[0];
            for (i = 1; i < moments.length; ++i) {
                if (!moments[i].isValid() || moments[i][fn](res)) {
                    res = moments[i];
                }
            }
            return res;
        }

        // TODO: Use [].sort instead?
        function min () {
            var args = [].slice.call(arguments, 0);

            return pickBy('isBefore', args);
        }

        function max () {
            var args = [].slice.call(arguments, 0);

            return pickBy('isAfter', args);
        }

        var now = function () {
            return Date.now ? Date.now() : +(new Date());
        };

        var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

        function isDurationValid(m) {
            for (var key in m) {
                if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                    return false;
                }
            }

            var unitHasDecimal = false;
            for (var i = 0; i < ordering.length; ++i) {
                if (m[ordering[i]]) {
                    if (unitHasDecimal) {
                        return false; // only allow non-integers for smallest unit
                    }
                    if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                        unitHasDecimal = true;
                    }
                }
            }

            return true;
        }

        function isValid$1() {
            return this._isValid;
        }

        function createInvalid$1() {
            return createDuration(NaN);
        }

        function Duration (duration) {
            var normalizedInput = normalizeObjectUnits(duration),
                years = normalizedInput.year || 0,
                quarters = normalizedInput.quarter || 0,
                months = normalizedInput.month || 0,
                weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
                days = normalizedInput.day || 0,
                hours = normalizedInput.hour || 0,
                minutes = normalizedInput.minute || 0,
                seconds = normalizedInput.second || 0,
                milliseconds = normalizedInput.millisecond || 0;

            this._isValid = isDurationValid(normalizedInput);

            // representation for dateAddRemove
            this._milliseconds = +milliseconds +
                seconds * 1e3 + // 1000
                minutes * 6e4 + // 1000 * 60
                hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
            // Because of dateAddRemove treats 24 hours as different from a
            // day when working around DST, we need to store them separately
            this._days = +days +
                weeks * 7;
            // It is impossible to translate months into days without knowing
            // which months you are are talking about, so we have to store
            // it separately.
            this._months = +months +
                quarters * 3 +
                years * 12;

            this._data = {};

            this._locale = getLocale();

            this._bubble();
        }

        function isDuration (obj) {
            return obj instanceof Duration;
        }

        function absRound (number) {
            if (number < 0) {
                return Math.round(-1 * number) * -1;
            } else {
                return Math.round(number);
            }
        }

        // FORMATTING

        function offset (token, separator) {
            addFormatToken(token, 0, 0, function () {
                var offset = this.utcOffset();
                var sign = '+';
                if (offset < 0) {
                    offset = -offset;
                    sign = '-';
                }
                return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
            });
        }

        offset('Z', ':');
        offset('ZZ', '');

        // PARSING

        addRegexToken('Z',  matchShortOffset);
        addRegexToken('ZZ', matchShortOffset);
        addParseToken(['Z', 'ZZ'], function (input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
        });

        // HELPERS

        // timezone chunker
        // '+10:00' > ['10',  '00']
        // '-1530'  > ['-15', '30']
        var chunkOffset = /([\+\-]|\d\d)/gi;

        function offsetFromString(matcher, string) {
            var matches = (string || '').match(matcher);

            if (matches === null) {
                return null;
            }

            var chunk   = matches[matches.length - 1] || [];
            var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
            var minutes = +(parts[1] * 60) + toInt(parts[2]);

            return minutes === 0 ?
              0 :
              parts[0] === '+' ? minutes : -minutes;
        }

        // Return a moment from input, that is local/utc/zone equivalent to model.
        function cloneWithOffset(input, model) {
            var res, diff;
            if (model._isUTC) {
                res = model.clone();
                diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
                // Use low-level api, because this fn is low-level api.
                res._d.setTime(res._d.valueOf() + diff);
                hooks.updateOffset(res, false);
                return res;
            } else {
                return createLocal(input).local();
            }
        }

        function getDateOffset (m) {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
        }

        // HOOKS

        // This function will be called whenever a moment is mutated.
        // It is intended to keep the offset in sync with the timezone.
        hooks.updateOffset = function () {};

        // MOMENTS

        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        function getSetOffset (input, keepLocalTime, keepMinutes) {
            var offset = this._offset || 0,
                localAdjust;
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            if (input != null) {
                if (typeof input === 'string') {
                    input = offsetFromString(matchShortOffset, input);
                    if (input === null) {
                        return this;
                    }
                } else if (Math.abs(input) < 16 && !keepMinutes) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = getDateOffset(this);
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.add(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        hooks.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }
                return this;
            } else {
                return this._isUTC ? offset : getDateOffset(this);
            }
        }

        function getSetZone (input, keepLocalTime) {
            if (input != null) {
                if (typeof input !== 'string') {
                    input = -input;
                }

                this.utcOffset(input, keepLocalTime);

                return this;
            } else {
                return -this.utcOffset();
            }
        }

        function setOffsetToUTC (keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
        }

        function setOffsetToLocal (keepLocalTime) {
            if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.subtract(getDateOffset(this), 'm');
                }
            }
            return this;
        }

        function setOffsetToParsedOffset () {
            if (this._tzm != null) {
                this.utcOffset(this._tzm, false, true);
            } else if (typeof this._i === 'string') {
                var tZone = offsetFromString(matchOffset, this._i);
                if (tZone != null) {
                    this.utcOffset(tZone);
                }
                else {
                    this.utcOffset(0, true);
                }
            }
            return this;
        }

        function hasAlignedHourOffset (input) {
            if (!this.isValid()) {
                return false;
            }
            input = input ? createLocal(input).utcOffset() : 0;

            return (this.utcOffset() - input) % 60 === 0;
        }

        function isDaylightSavingTime () {
            return (
                this.utcOffset() > this.clone().month(0).utcOffset() ||
                this.utcOffset() > this.clone().month(5).utcOffset()
            );
        }

        function isDaylightSavingTimeShifted () {
            if (!isUndefined(this._isDSTShifted)) {
                return this._isDSTShifted;
            }

            var c = {};

            copyConfig(c, this);
            c = prepareConfig(c);

            if (c._a) {
                var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                this._isDSTShifted = this.isValid() &&
                    compareArrays(c._a, other.toArray()) > 0;
            } else {
                this._isDSTShifted = false;
            }

            return this._isDSTShifted;
        }

        function isLocal () {
            return this.isValid() ? !this._isUTC : false;
        }

        function isUtcOffset () {
            return this.isValid() ? this._isUTC : false;
        }

        function isUtc () {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
        }

        // ASP.NET json date format regex
        var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

        function createDuration (input, key) {
            var duration = input,
                // matching against regexp is expensive, do it on demand
                match = null,
                sign,
                ret,
                diffRes;

            if (isDuration(input)) {
                duration = {
                    ms : input._milliseconds,
                    d  : input._days,
                    M  : input._months
                };
            } else if (isNumber(input)) {
                duration = {};
                if (key) {
                    duration[key] = input;
                } else {
                    duration.milliseconds = input;
                }
            } else if (!!(match = aspNetRegex.exec(input))) {
                sign = (match[1] === '-') ? -1 : 1;
                duration = {
                    y  : 0,
                    d  : toInt(match[DATE])                         * sign,
                    h  : toInt(match[HOUR])                         * sign,
                    m  : toInt(match[MINUTE])                       * sign,
                    s  : toInt(match[SECOND])                       * sign,
                    ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
                };
            } else if (!!(match = isoRegex.exec(input))) {
                sign = (match[1] === '-') ? -1 : 1;
                duration = {
                    y : parseIso(match[2], sign),
                    M : parseIso(match[3], sign),
                    w : parseIso(match[4], sign),
                    d : parseIso(match[5], sign),
                    h : parseIso(match[6], sign),
                    m : parseIso(match[7], sign),
                    s : parseIso(match[8], sign)
                };
            } else if (duration == null) {// checks for null or undefined
                duration = {};
            } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
                diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

                duration = {};
                duration.ms = diffRes.milliseconds;
                duration.M = diffRes.months;
            }

            ret = new Duration(duration);

            if (isDuration(input) && hasOwnProp(input, '_locale')) {
                ret._locale = input._locale;
            }

            return ret;
        }

        createDuration.fn = Duration.prototype;
        createDuration.invalid = createInvalid$1;

        function parseIso (inp, sign) {
            // We'd normally use ~~inp for this, but unfortunately it also
            // converts floats to ints.
            // inp may be undefined, so careful calling replace on it.
            var res = inp && parseFloat(inp.replace(',', '.'));
            // apply sign while we're at it
            return (isNaN(res) ? 0 : res) * sign;
        }

        function positiveMomentsDifference(base, other) {
            var res = {};

            res.months = other.month() - base.month() +
                (other.year() - base.year()) * 12;
            if (base.clone().add(res.months, 'M').isAfter(other)) {
                --res.months;
            }

            res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

            return res;
        }

        function momentsDifference(base, other) {
            var res;
            if (!(base.isValid() && other.isValid())) {
                return {milliseconds: 0, months: 0};
            }

            other = cloneWithOffset(other, base);
            if (base.isBefore(other)) {
                res = positiveMomentsDifference(base, other);
            } else {
                res = positiveMomentsDifference(other, base);
                res.milliseconds = -res.milliseconds;
                res.months = -res.months;
            }

            return res;
        }

        // TODO: remove 'name' arg after deprecation is removed
        function createAdder(direction, name) {
            return function (val, period) {
                var dur, tmp;
                //invert the arguments, but complain about it
                if (period !== null && !isNaN(+period)) {
                    deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                    'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                    tmp = val; val = period; period = tmp;
                }

                val = typeof val === 'string' ? +val : val;
                dur = createDuration(val, period);
                addSubtract(this, dur, direction);
                return this;
            };
        }

        function addSubtract (mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds,
                days = absRound(duration._days),
                months = absRound(duration._months);

            if (!mom.isValid()) {
                // No op
                return;
            }

            updateOffset = updateOffset == null ? true : updateOffset;

            if (months) {
                setMonth(mom, get(mom, 'Month') + months * isAdding);
            }
            if (days) {
                set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
            }
            if (milliseconds) {
                mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
            }
            if (updateOffset) {
                hooks.updateOffset(mom, days || months);
            }
        }

        var add      = createAdder(1, 'add');
        var subtract = createAdder(-1, 'subtract');

        function getCalendarFormat(myMoment, now) {
            var diff = myMoment.diff(now, 'days', true);
            return diff < -6 ? 'sameElse' :
                    diff < -1 ? 'lastWeek' :
                    diff < 0 ? 'lastDay' :
                    diff < 1 ? 'sameDay' :
                    diff < 2 ? 'nextDay' :
                    diff < 7 ? 'nextWeek' : 'sameElse';
        }

        function calendar$1 (time, formats) {
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're local/utc/offset or not.
            var now = time || createLocal(),
                sod = cloneWithOffset(now, this).startOf('day'),
                format = hooks.calendarFormat(this, sod) || 'sameElse';

            var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

            return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
        }

        function clone () {
            return new Moment(this);
        }

        function isAfter (input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() > localInput.valueOf();
            } else {
                return localInput.valueOf() < this.clone().startOf(units).valueOf();
            }
        }

        function isBefore (input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() < localInput.valueOf();
            } else {
                return this.clone().endOf(units).valueOf() < localInput.valueOf();
            }
        }

        function isBetween (from, to, units, inclusivity) {
            var localFrom = isMoment(from) ? from : createLocal(from),
                localTo = isMoment(to) ? to : createLocal(to);
            if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
                return false;
            }
            inclusivity = inclusivity || '()';
            return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
                (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
        }

        function isSame (input, units) {
            var localInput = isMoment(input) ? input : createLocal(input),
                inputMs;
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() === localInput.valueOf();
            } else {
                inputMs = localInput.valueOf();
                return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
            }
        }

        function isSameOrAfter (input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
        }

        function isSameOrBefore (input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
        }

        function diff (input, units, asFloat) {
            var that,
                zoneDelta,
                output;

            if (!this.isValid()) {
                return NaN;
            }

            that = cloneWithOffset(input, this);

            if (!that.isValid()) {
                return NaN;
            }

            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

            units = normalizeUnits(units);

            switch (units) {
                case 'year': output = monthDiff(this, that) / 12; break;
                case 'month': output = monthDiff(this, that); break;
                case 'quarter': output = monthDiff(this, that) / 3; break;
                case 'second': output = (this - that) / 1e3; break; // 1000
                case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
                case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
                case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
                case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
                default: output = this - that;
            }

            return asFloat ? output : absFloor(output);
        }

        function monthDiff (a, b) {
            // difference in months
            var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
                // b is in (anchor - 1 month, anchor + 1 month)
                anchor = a.clone().add(wholeMonthDiff, 'months'),
                anchor2, adjust;

            if (b - anchor < 0) {
                anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor - anchor2);
            } else {
                anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor2 - anchor);
            }

            //check for negative zero, return zero if negative zero
            return -(wholeMonthDiff + adjust) || 0;
        }

        hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
        hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

        function toString () {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        }

        function toISOString(keepOffset) {
            if (!this.isValid()) {
                return null;
            }
            var utc = keepOffset !== true;
            var m = utc ? this.clone().utc() : this;
            if (m.year() < 0 || m.year() > 9999) {
                return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
            }
            if (isFunction(Date.prototype.toISOString)) {
                // native implementation is ~50x faster, use it when we can
                if (utc) {
                    return this.toDate().toISOString();
                } else {
                    return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
                }
            }
            return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }

        /**
         * Return a human readable representation of a moment that can
         * also be evaluated to get a new moment which is the same
         *
         * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
         */
        function inspect () {
            if (!this.isValid()) {
                return 'moment.invalid(/* ' + this._i + ' */)';
            }
            var func = 'moment';
            var zone = '';
            if (!this.isLocal()) {
                func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
                zone = 'Z';
            }
            var prefix = '[' + func + '("]';
            var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
            var datetime = '-MM-DD[T]HH:mm:ss.SSS';
            var suffix = zone + '[")]';

            return this.format(prefix + year + datetime + suffix);
        }

        function format (inputString) {
            if (!inputString) {
                inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
            }
            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
        }

        function from (time, withoutSuffix) {
            if (this.isValid() &&
                    ((isMoment(time) && time.isValid()) ||
                     createLocal(time).isValid())) {
                return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }

        function fromNow (withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
        }

        function to (time, withoutSuffix) {
            if (this.isValid() &&
                    ((isMoment(time) && time.isValid()) ||
                     createLocal(time).isValid())) {
                return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }

        function toNow (withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
        }

        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        function locale (key) {
            var newLocaleData;

            if (key === undefined) {
                return this._locale._abbr;
            } else {
                newLocaleData = getLocale(key);
                if (newLocaleData != null) {
                    this._locale = newLocaleData;
                }
                return this;
            }
        }

        var lang = deprecate(
            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
            function (key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    return this.locale(key);
                }
            }
        );

        function localeData () {
            return this._locale;
        }

        var MS_PER_SECOND = 1000;
        var MS_PER_MINUTE = 60 * MS_PER_SECOND;
        var MS_PER_HOUR = 60 * MS_PER_MINUTE;
        var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

        // actual modulo - handles negative numbers (for dates before 1970):
        function mod$1(dividend, divisor) {
            return (dividend % divisor + divisor) % divisor;
        }

        function localStartOfDate(y, m, d) {
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return new Date(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
                return new Date(y, m, d).valueOf();
            }
        }

        function utcStartOfDate(y, m, d) {
            // Date.UTC remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
                return Date.UTC(y, m, d);
            }
        }

        function startOf (units) {
            var time;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
                return this;
            }

            var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
                case 'year':
                    time = startOfDate(this.year(), 0, 1);
                    break;
                case 'quarter':
                    time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                    break;
                case 'month':
                    time = startOfDate(this.year(), this.month(), 1);
                    break;
                case 'week':
                    time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                    break;
                case 'isoWeek':
                    time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                    break;
                case 'day':
                case 'date':
                    time = startOfDate(this.year(), this.month(), this.date());
                    break;
                case 'hour':
                    time = this._d.valueOf();
                    time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                    break;
                case 'minute':
                    time = this._d.valueOf();
                    time -= mod$1(time, MS_PER_MINUTE);
                    break;
                case 'second':
                    time = this._d.valueOf();
                    time -= mod$1(time, MS_PER_SECOND);
                    break;
            }

            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
        }

        function endOf (units) {
            var time;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
                return this;
            }

            var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
                case 'year':
                    time = startOfDate(this.year() + 1, 0, 1) - 1;
                    break;
                case 'quarter':
                    time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                    break;
                case 'month':
                    time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                    break;
                case 'week':
                    time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                    break;
                case 'isoWeek':
                    time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                    break;
                case 'day':
                case 'date':
                    time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                    break;
                case 'hour':
                    time = this._d.valueOf();
                    time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                    break;
                case 'minute':
                    time = this._d.valueOf();
                    time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                    break;
                case 'second':
                    time = this._d.valueOf();
                    time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                    break;
            }

            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
        }

        function valueOf () {
            return this._d.valueOf() - ((this._offset || 0) * 60000);
        }

        function unix () {
            return Math.floor(this.valueOf() / 1000);
        }

        function toDate () {
            return new Date(this.valueOf());
        }

        function toArray () {
            var m = this;
            return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
        }

        function toObject () {
            var m = this;
            return {
                years: m.year(),
                months: m.month(),
                date: m.date(),
                hours: m.hours(),
                minutes: m.minutes(),
                seconds: m.seconds(),
                milliseconds: m.milliseconds()
            };
        }

        function toJSON () {
            // new Date(NaN).toJSON() === null
            return this.isValid() ? this.toISOString() : null;
        }

        function isValid$2 () {
            return isValid(this);
        }

        function parsingFlags () {
            return extend({}, getParsingFlags(this));
        }

        function invalidAt () {
            return getParsingFlags(this).overflow;
        }

        function creationData() {
            return {
                input: this._i,
                format: this._f,
                locale: this._locale,
                isUTC: this._isUTC,
                strict: this._strict
            };
        }

        // FORMATTING

        addFormatToken(0, ['gg', 2], 0, function () {
            return this.weekYear() % 100;
        });

        addFormatToken(0, ['GG', 2], 0, function () {
            return this.isoWeekYear() % 100;
        });

        function addWeekYearFormatToken (token, getter) {
            addFormatToken(0, [token, token.length], 0, getter);
        }

        addWeekYearFormatToken('gggg',     'weekYear');
        addWeekYearFormatToken('ggggg',    'weekYear');
        addWeekYearFormatToken('GGGG',  'isoWeekYear');
        addWeekYearFormatToken('GGGGG', 'isoWeekYear');

        // ALIASES

        addUnitAlias('weekYear', 'gg');
        addUnitAlias('isoWeekYear', 'GG');

        // PRIORITY

        addUnitPriority('weekYear', 1);
        addUnitPriority('isoWeekYear', 1);


        // PARSING

        addRegexToken('G',      matchSigned);
        addRegexToken('g',      matchSigned);
        addRegexToken('GG',     match1to2, match2);
        addRegexToken('gg',     match1to2, match2);
        addRegexToken('GGGG',   match1to4, match4);
        addRegexToken('gggg',   match1to4, match4);
        addRegexToken('GGGGG',  match1to6, match6);
        addRegexToken('ggggg',  match1to6, match6);

        addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
            week[token.substr(0, 2)] = toInt(input);
        });

        addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
            week[token] = hooks.parseTwoDigitYear(input);
        });

        // MOMENTS

        function getSetWeekYear (input) {
            return getSetWeekYearHelper.call(this,
                    input,
                    this.week(),
                    this.weekday(),
                    this.localeData()._week.dow,
                    this.localeData()._week.doy);
        }

        function getSetISOWeekYear (input) {
            return getSetWeekYearHelper.call(this,
                    input, this.isoWeek(), this.isoWeekday(), 1, 4);
        }

        function getISOWeeksInYear () {
            return weeksInYear(this.year(), 1, 4);
        }

        function getWeeksInYear () {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        }

        function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;
            if (input == null) {
                return weekOfYear(this, dow, doy).year;
            } else {
                weeksTarget = weeksInYear(input, dow, doy);
                if (week > weeksTarget) {
                    week = weeksTarget;
                }
                return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
        }

        function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
        }

        // FORMATTING

        addFormatToken('Q', 0, 'Qo', 'quarter');

        // ALIASES

        addUnitAlias('quarter', 'Q');

        // PRIORITY

        addUnitPriority('quarter', 7);

        // PARSING

        addRegexToken('Q', match1);
        addParseToken('Q', function (input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
        });

        // MOMENTS

        function getSetQuarter (input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        }

        // FORMATTING

        addFormatToken('D', ['DD', 2], 'Do', 'date');

        // ALIASES

        addUnitAlias('date', 'D');

        // PRIORITY
        addUnitPriority('date', 9);

        // PARSING

        addRegexToken('D',  match1to2);
        addRegexToken('DD', match1to2, match2);
        addRegexToken('Do', function (isStrict, locale) {
            // TODO: Remove "ordinalParse" fallback in next major release.
            return isStrict ?
              (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
              locale._dayOfMonthOrdinalParseLenient;
        });

        addParseToken(['D', 'DD'], DATE);
        addParseToken('Do', function (input, array) {
            array[DATE] = toInt(input.match(match1to2)[0]);
        });

        // MOMENTS

        var getSetDayOfMonth = makeGetSet('Date', true);

        // FORMATTING

        addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

        // ALIASES

        addUnitAlias('dayOfYear', 'DDD');

        // PRIORITY
        addUnitPriority('dayOfYear', 4);

        // PARSING

        addRegexToken('DDD',  match1to3);
        addRegexToken('DDDD', match3);
        addParseToken(['DDD', 'DDDD'], function (input, array, config) {
            config._dayOfYear = toInt(input);
        });

        // HELPERS

        // MOMENTS

        function getSetDayOfYear (input) {
            var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
        }

        // FORMATTING

        addFormatToken('m', ['mm', 2], 0, 'minute');

        // ALIASES

        addUnitAlias('minute', 'm');

        // PRIORITY

        addUnitPriority('minute', 14);

        // PARSING

        addRegexToken('m',  match1to2);
        addRegexToken('mm', match1to2, match2);
        addParseToken(['m', 'mm'], MINUTE);

        // MOMENTS

        var getSetMinute = makeGetSet('Minutes', false);

        // FORMATTING

        addFormatToken('s', ['ss', 2], 0, 'second');

        // ALIASES

        addUnitAlias('second', 's');

        // PRIORITY

        addUnitPriority('second', 15);

        // PARSING

        addRegexToken('s',  match1to2);
        addRegexToken('ss', match1to2, match2);
        addParseToken(['s', 'ss'], SECOND);

        // MOMENTS

        var getSetSecond = makeGetSet('Seconds', false);

        // FORMATTING

        addFormatToken('S', 0, 0, function () {
            return ~~(this.millisecond() / 100);
        });

        addFormatToken(0, ['SS', 2], 0, function () {
            return ~~(this.millisecond() / 10);
        });

        addFormatToken(0, ['SSS', 3], 0, 'millisecond');
        addFormatToken(0, ['SSSS', 4], 0, function () {
            return this.millisecond() * 10;
        });
        addFormatToken(0, ['SSSSS', 5], 0, function () {
            return this.millisecond() * 100;
        });
        addFormatToken(0, ['SSSSSS', 6], 0, function () {
            return this.millisecond() * 1000;
        });
        addFormatToken(0, ['SSSSSSS', 7], 0, function () {
            return this.millisecond() * 10000;
        });
        addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
            return this.millisecond() * 100000;
        });
        addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
            return this.millisecond() * 1000000;
        });


        // ALIASES

        addUnitAlias('millisecond', 'ms');

        // PRIORITY

        addUnitPriority('millisecond', 16);

        // PARSING

        addRegexToken('S',    match1to3, match1);
        addRegexToken('SS',   match1to3, match2);
        addRegexToken('SSS',  match1to3, match3);

        var token;
        for (token = 'SSSS'; token.length <= 9; token += 'S') {
            addRegexToken(token, matchUnsigned);
        }

        function parseMs(input, array) {
            array[MILLISECOND] = toInt(('0.' + input) * 1000);
        }

        for (token = 'S'; token.length <= 9; token += 'S') {
            addParseToken(token, parseMs);
        }
        // MOMENTS

        var getSetMillisecond = makeGetSet('Milliseconds', false);

        // FORMATTING

        addFormatToken('z',  0, 0, 'zoneAbbr');
        addFormatToken('zz', 0, 0, 'zoneName');

        // MOMENTS

        function getZoneAbbr () {
            return this._isUTC ? 'UTC' : '';
        }

        function getZoneName () {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        }

        var proto = Moment.prototype;

        proto.add               = add;
        proto.calendar          = calendar$1;
        proto.clone             = clone;
        proto.diff              = diff;
        proto.endOf             = endOf;
        proto.format            = format;
        proto.from              = from;
        proto.fromNow           = fromNow;
        proto.to                = to;
        proto.toNow             = toNow;
        proto.get               = stringGet;
        proto.invalidAt         = invalidAt;
        proto.isAfter           = isAfter;
        proto.isBefore          = isBefore;
        proto.isBetween         = isBetween;
        proto.isSame            = isSame;
        proto.isSameOrAfter     = isSameOrAfter;
        proto.isSameOrBefore    = isSameOrBefore;
        proto.isValid           = isValid$2;
        proto.lang              = lang;
        proto.locale            = locale;
        proto.localeData        = localeData;
        proto.max               = prototypeMax;
        proto.min               = prototypeMin;
        proto.parsingFlags      = parsingFlags;
        proto.set               = stringSet;
        proto.startOf           = startOf;
        proto.subtract          = subtract;
        proto.toArray           = toArray;
        proto.toObject          = toObject;
        proto.toDate            = toDate;
        proto.toISOString       = toISOString;
        proto.inspect           = inspect;
        proto.toJSON            = toJSON;
        proto.toString          = toString;
        proto.unix              = unix;
        proto.valueOf           = valueOf;
        proto.creationData      = creationData;
        proto.year       = getSetYear;
        proto.isLeapYear = getIsLeapYear;
        proto.weekYear    = getSetWeekYear;
        proto.isoWeekYear = getSetISOWeekYear;
        proto.quarter = proto.quarters = getSetQuarter;
        proto.month       = getSetMonth;
        proto.daysInMonth = getDaysInMonth;
        proto.week           = proto.weeks        = getSetWeek;
        proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
        proto.weeksInYear    = getWeeksInYear;
        proto.isoWeeksInYear = getISOWeeksInYear;
        proto.date       = getSetDayOfMonth;
        proto.day        = proto.days             = getSetDayOfWeek;
        proto.weekday    = getSetLocaleDayOfWeek;
        proto.isoWeekday = getSetISODayOfWeek;
        proto.dayOfYear  = getSetDayOfYear;
        proto.hour = proto.hours = getSetHour;
        proto.minute = proto.minutes = getSetMinute;
        proto.second = proto.seconds = getSetSecond;
        proto.millisecond = proto.milliseconds = getSetMillisecond;
        proto.utcOffset            = getSetOffset;
        proto.utc                  = setOffsetToUTC;
        proto.local                = setOffsetToLocal;
        proto.parseZone            = setOffsetToParsedOffset;
        proto.hasAlignedHourOffset = hasAlignedHourOffset;
        proto.isDST                = isDaylightSavingTime;
        proto.isLocal              = isLocal;
        proto.isUtcOffset          = isUtcOffset;
        proto.isUtc                = isUtc;
        proto.isUTC                = isUtc;
        proto.zoneAbbr = getZoneAbbr;
        proto.zoneName = getZoneName;
        proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
        proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
        proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
        proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
        proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

        function createUnix (input) {
            return createLocal(input * 1000);
        }

        function createInZone () {
            return createLocal.apply(null, arguments).parseZone();
        }

        function preParsePostFormat (string) {
            return string;
        }

        var proto$1 = Locale.prototype;

        proto$1.calendar        = calendar;
        proto$1.longDateFormat  = longDateFormat;
        proto$1.invalidDate     = invalidDate;
        proto$1.ordinal         = ordinal;
        proto$1.preparse        = preParsePostFormat;
        proto$1.postformat      = preParsePostFormat;
        proto$1.relativeTime    = relativeTime;
        proto$1.pastFuture      = pastFuture;
        proto$1.set             = set;

        proto$1.months            =        localeMonths;
        proto$1.monthsShort       =        localeMonthsShort;
        proto$1.monthsParse       =        localeMonthsParse;
        proto$1.monthsRegex       = monthsRegex;
        proto$1.monthsShortRegex  = monthsShortRegex;
        proto$1.week = localeWeek;
        proto$1.firstDayOfYear = localeFirstDayOfYear;
        proto$1.firstDayOfWeek = localeFirstDayOfWeek;

        proto$1.weekdays       =        localeWeekdays;
        proto$1.weekdaysMin    =        localeWeekdaysMin;
        proto$1.weekdaysShort  =        localeWeekdaysShort;
        proto$1.weekdaysParse  =        localeWeekdaysParse;

        proto$1.weekdaysRegex       =        weekdaysRegex;
        proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
        proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

        proto$1.isPM = localeIsPM;
        proto$1.meridiem = localeMeridiem;

        function get$1 (format, index, field, setter) {
            var locale = getLocale();
            var utc = createUTC().set(setter, index);
            return locale[field](utc, format);
        }

        function listMonthsImpl (format, index, field) {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';

            if (index != null) {
                return get$1(format, index, field, 'month');
            }

            var i;
            var out = [];
            for (i = 0; i < 12; i++) {
                out[i] = get$1(format, i, field, 'month');
            }
            return out;
        }

        // ()
        // (5)
        // (fmt, 5)
        // (fmt)
        // (true)
        // (true, 5)
        // (true, fmt, 5)
        // (true, fmt)
        function listWeekdaysImpl (localeSorted, format, index, field) {
            if (typeof localeSorted === 'boolean') {
                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';
            } else {
                format = localeSorted;
                index = format;
                localeSorted = false;

                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';
            }

            var locale = getLocale(),
                shift = localeSorted ? locale._week.dow : 0;

            if (index != null) {
                return get$1(format, (index + shift) % 7, field, 'day');
            }

            var i;
            var out = [];
            for (i = 0; i < 7; i++) {
                out[i] = get$1(format, (i + shift) % 7, field, 'day');
            }
            return out;
        }

        function listMonths (format, index) {
            return listMonthsImpl(format, index, 'months');
        }

        function listMonthsShort (format, index) {
            return listMonthsImpl(format, index, 'monthsShort');
        }

        function listWeekdays (localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
        }

        function listWeekdaysShort (localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
        }

        function listWeekdaysMin (localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
        }

        getSetGlobalLocale('en', {
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal : function (number) {
                var b = number % 10,
                    output = (toInt(number % 100 / 10) === 1) ? 'th' :
                    (b === 1) ? 'st' :
                    (b === 2) ? 'nd' :
                    (b === 3) ? 'rd' : 'th';
                return number + output;
            }
        });

        // Side effect imports

        hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
        hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

        var mathAbs = Math.abs;

        function abs () {
            var data           = this._data;

            this._milliseconds = mathAbs(this._milliseconds);
            this._days         = mathAbs(this._days);
            this._months       = mathAbs(this._months);

            data.milliseconds  = mathAbs(data.milliseconds);
            data.seconds       = mathAbs(data.seconds);
            data.minutes       = mathAbs(data.minutes);
            data.hours         = mathAbs(data.hours);
            data.months        = mathAbs(data.months);
            data.years         = mathAbs(data.years);

            return this;
        }

        function addSubtract$1 (duration, input, value, direction) {
            var other = createDuration(input, value);

            duration._milliseconds += direction * other._milliseconds;
            duration._days         += direction * other._days;
            duration._months       += direction * other._months;

            return duration._bubble();
        }

        // supports only 2.0-style add(1, 's') or add(duration)
        function add$1 (input, value) {
            return addSubtract$1(this, input, value, 1);
        }

        // supports only 2.0-style subtract(1, 's') or subtract(duration)
        function subtract$1 (input, value) {
            return addSubtract$1(this, input, value, -1);
        }

        function absCeil (number) {
            if (number < 0) {
                return Math.floor(number);
            } else {
                return Math.ceil(number);
            }
        }

        function bubble () {
            var milliseconds = this._milliseconds;
            var days         = this._days;
            var months       = this._months;
            var data         = this._data;
            var seconds, minutes, hours, years, monthsFromDays;

            // if we have a mix of positive and negative values, bubble down first
            // check: https://github.com/moment/moment/issues/2166
            if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                    (milliseconds <= 0 && days <= 0 && months <= 0))) {
                milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                days = 0;
                months = 0;
            }

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds           = absFloor(milliseconds / 1000);
            data.seconds      = seconds % 60;

            minutes           = absFloor(seconds / 60);
            data.minutes      = minutes % 60;

            hours             = absFloor(minutes / 60);
            data.hours        = hours % 24;

            days += absFloor(hours / 24);

            // convert days to months
            monthsFromDays = absFloor(daysToMonths(days));
            months += monthsFromDays;
            days -= absCeil(monthsToDays(monthsFromDays));

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            data.days   = days;
            data.months = months;
            data.years  = years;

            return this;
        }

        function daysToMonths (days) {
            // 400 years have 146097 days (taking into account leap year rules)
            // 400 years have 12 months === 4800
            return days * 4800 / 146097;
        }

        function monthsToDays (months) {
            // the reverse of daysToMonths
            return months * 146097 / 4800;
        }

        function as (units) {
            if (!this.isValid()) {
                return NaN;
            }
            var days;
            var months;
            var milliseconds = this._milliseconds;

            units = normalizeUnits(units);

            if (units === 'month' || units === 'quarter' || units === 'year') {
                days = this._days + milliseconds / 864e5;
                months = this._months + daysToMonths(days);
                switch (units) {
                    case 'month':   return months;
                    case 'quarter': return months / 3;
                    case 'year':    return months / 12;
                }
            } else {
                // handle milliseconds separately because of floating point math errors (issue #1867)
                days = this._days + Math.round(monthsToDays(this._months));
                switch (units) {
                    case 'week'   : return days / 7     + milliseconds / 6048e5;
                    case 'day'    : return days         + milliseconds / 864e5;
                    case 'hour'   : return days * 24    + milliseconds / 36e5;
                    case 'minute' : return days * 1440  + milliseconds / 6e4;
                    case 'second' : return days * 86400 + milliseconds / 1000;
                    // Math.floor prevents floating point math errors here
                    case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                    default: throw new Error('Unknown unit ' + units);
                }
            }
        }

        // TODO: Use this.as('ms')?
        function valueOf$1 () {
            if (!this.isValid()) {
                return NaN;
            }
            return (
                this._milliseconds +
                this._days * 864e5 +
                (this._months % 12) * 2592e6 +
                toInt(this._months / 12) * 31536e6
            );
        }

        function makeAs (alias) {
            return function () {
                return this.as(alias);
            };
        }

        var asMilliseconds = makeAs('ms');
        var asSeconds      = makeAs('s');
        var asMinutes      = makeAs('m');
        var asHours        = makeAs('h');
        var asDays         = makeAs('d');
        var asWeeks        = makeAs('w');
        var asMonths       = makeAs('M');
        var asQuarters     = makeAs('Q');
        var asYears        = makeAs('y');

        function clone$1 () {
            return createDuration(this);
        }

        function get$2 (units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + 's']() : NaN;
        }

        function makeGetter(name) {
            return function () {
                return this.isValid() ? this._data[name] : NaN;
            };
        }

        var milliseconds = makeGetter('milliseconds');
        var seconds      = makeGetter('seconds');
        var minutes      = makeGetter('minutes');
        var hours        = makeGetter('hours');
        var days         = makeGetter('days');
        var months       = makeGetter('months');
        var years        = makeGetter('years');

        function weeks () {
            return absFloor(this.days() / 7);
        }

        var round = Math.round;
        var thresholds = {
            ss: 44,         // a few seconds to seconds
            s : 45,         // seconds to minute
            m : 45,         // minutes to hour
            h : 22,         // hours to day
            d : 26,         // days to month
            M : 11          // months to year
        };

        // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
        function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
        }

        function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
            var duration = createDuration(posNegDuration).abs();
            var seconds  = round(duration.as('s'));
            var minutes  = round(duration.as('m'));
            var hours    = round(duration.as('h'));
            var days     = round(duration.as('d'));
            var months   = round(duration.as('M'));
            var years    = round(duration.as('y'));

            var a = seconds <= thresholds.ss && ['s', seconds]  ||
                    seconds < thresholds.s   && ['ss', seconds] ||
                    minutes <= 1             && ['m']           ||
                    minutes < thresholds.m   && ['mm', minutes] ||
                    hours   <= 1             && ['h']           ||
                    hours   < thresholds.h   && ['hh', hours]   ||
                    days    <= 1             && ['d']           ||
                    days    < thresholds.d   && ['dd', days]    ||
                    months  <= 1             && ['M']           ||
                    months  < thresholds.M   && ['MM', months]  ||
                    years   <= 1             && ['y']           || ['yy', years];

            a[2] = withoutSuffix;
            a[3] = +posNegDuration > 0;
            a[4] = locale;
            return substituteTimeAgo.apply(null, a);
        }

        // This function allows you to set the rounding function for relative time strings
        function getSetRelativeTimeRounding (roundingFunction) {
            if (roundingFunction === undefined) {
                return round;
            }
            if (typeof(roundingFunction) === 'function') {
                round = roundingFunction;
                return true;
            }
            return false;
        }

        // This function allows you to set a threshold for relative time strings
        function getSetRelativeTimeThreshold (threshold, limit) {
            if (thresholds[threshold] === undefined) {
                return false;
            }
            if (limit === undefined) {
                return thresholds[threshold];
            }
            thresholds[threshold] = limit;
            if (threshold === 's') {
                thresholds.ss = limit - 1;
            }
            return true;
        }

        function humanize (withSuffix) {
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }

            var locale = this.localeData();
            var output = relativeTime$1(this, !withSuffix, locale);

            if (withSuffix) {
                output = locale.pastFuture(+this, output);
            }

            return locale.postformat(output);
        }

        var abs$1 = Math.abs;

        function sign(x) {
            return ((x > 0) - (x < 0)) || +x;
        }

        function toISOString$1() {
            // for ISO strings we do not use the normal bubbling rules:
            //  * milliseconds bubble up until they become hours
            //  * days do not bubble at all
            //  * months bubble up until they become years
            // This is because there is no context-free conversion between hours and days
            // (think of clock changes)
            // and also not between days and months (28-31 days per month)
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }

            var seconds = abs$1(this._milliseconds) / 1000;
            var days         = abs$1(this._days);
            var months       = abs$1(this._months);
            var minutes, hours, years;

            // 3600 seconds -> 60 minutes -> 1 hour
            minutes           = absFloor(seconds / 60);
            hours             = absFloor(minutes / 60);
            seconds %= 60;
            minutes %= 60;

            // 12 months -> 1 year
            years  = absFloor(months / 12);
            months %= 12;


            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var Y = years;
            var M = months;
            var D = days;
            var h = hours;
            var m = minutes;
            var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
            var total = this.asSeconds();

            if (!total) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            var totalSign = total < 0 ? '-' : '';
            var ymSign = sign(this._months) !== sign(total) ? '-' : '';
            var daysSign = sign(this._days) !== sign(total) ? '-' : '';
            var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

            return totalSign + 'P' +
                (Y ? ymSign + Y + 'Y' : '') +
                (M ? ymSign + M + 'M' : '') +
                (D ? daysSign + D + 'D' : '') +
                ((h || m || s) ? 'T' : '') +
                (h ? hmsSign + h + 'H' : '') +
                (m ? hmsSign + m + 'M' : '') +
                (s ? hmsSign + s + 'S' : '');
        }

        var proto$2 = Duration.prototype;

        proto$2.isValid        = isValid$1;
        proto$2.abs            = abs;
        proto$2.add            = add$1;
        proto$2.subtract       = subtract$1;
        proto$2.as             = as;
        proto$2.asMilliseconds = asMilliseconds;
        proto$2.asSeconds      = asSeconds;
        proto$2.asMinutes      = asMinutes;
        proto$2.asHours        = asHours;
        proto$2.asDays         = asDays;
        proto$2.asWeeks        = asWeeks;
        proto$2.asMonths       = asMonths;
        proto$2.asQuarters     = asQuarters;
        proto$2.asYears        = asYears;
        proto$2.valueOf        = valueOf$1;
        proto$2._bubble        = bubble;
        proto$2.clone          = clone$1;
        proto$2.get            = get$2;
        proto$2.milliseconds   = milliseconds;
        proto$2.seconds        = seconds;
        proto$2.minutes        = minutes;
        proto$2.hours          = hours;
        proto$2.days           = days;
        proto$2.weeks          = weeks;
        proto$2.months         = months;
        proto$2.years          = years;
        proto$2.humanize       = humanize;
        proto$2.toISOString    = toISOString$1;
        proto$2.toString       = toISOString$1;
        proto$2.toJSON         = toISOString$1;
        proto$2.locale         = locale;
        proto$2.localeData     = localeData;

        proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
        proto$2.lang = lang;

        // Side effect imports

        // FORMATTING

        addFormatToken('X', 0, 0, 'unix');
        addFormatToken('x', 0, 0, 'valueOf');

        // PARSING

        addRegexToken('x', matchSigned);
        addRegexToken('X', matchTimestamp);
        addParseToken('X', function (input, array, config) {
            config._d = new Date(parseFloat(input, 10) * 1000);
        });
        addParseToken('x', function (input, array, config) {
            config._d = new Date(toInt(input));
        });

        // Side effect imports


        hooks.version = '2.24.0';

        setHookCallback(createLocal);

        hooks.fn                    = proto;
        hooks.min                   = min;
        hooks.max                   = max;
        hooks.now                   = now;
        hooks.utc                   = createUTC;
        hooks.unix                  = createUnix;
        hooks.months                = listMonths;
        hooks.isDate                = isDate;
        hooks.locale                = getSetGlobalLocale;
        hooks.invalid               = createInvalid;
        hooks.duration              = createDuration;
        hooks.isMoment              = isMoment;
        hooks.weekdays              = listWeekdays;
        hooks.parseZone             = createInZone;
        hooks.localeData            = getLocale;
        hooks.isDuration            = isDuration;
        hooks.monthsShort           = listMonthsShort;
        hooks.weekdaysMin           = listWeekdaysMin;
        hooks.defineLocale          = defineLocale;
        hooks.updateLocale          = updateLocale;
        hooks.locales               = listLocales;
        hooks.weekdaysShort         = listWeekdaysShort;
        hooks.normalizeUnits        = normalizeUnits;
        hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
        hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
        hooks.calendarFormat        = getCalendarFormat;
        hooks.prototype             = proto;

        // currently HTML5 input type only supports 24-hour formats
        hooks.HTML5_FMT = {
            DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
            DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
            DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
            DATE: 'YYYY-MM-DD',                             // <input type="date" />
            TIME: 'HH:mm',                                  // <input type="time" />
            TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
            TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
            WEEK: 'GGGG-[W]WW',                             // <input type="week" />
            MONTH: 'YYYY-MM'                                // <input type="month" />
        };

        return hooks;

    })));
    });

    var Chart = createCommonjsModule(function (module, exports) {
    /*!
     * Chart.js v2.8.0
     * https://www.chartjs.org
     * (c) 2019 Chart.js Contributors
     * Released under the MIT License
     */
    (function (global, factory) {
     module.exports = factory(function() { try { return moment$1; } catch(e) { } }()) ;
    }(commonjsGlobal, (function (moment) {
    moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

    /* MIT license */

    var conversions = {
      rgb2hsl: rgb2hsl,
      rgb2hsv: rgb2hsv,
      rgb2hwb: rgb2hwb,
      rgb2cmyk: rgb2cmyk,
      rgb2keyword: rgb2keyword,
      rgb2xyz: rgb2xyz,
      rgb2lab: rgb2lab,
      rgb2lch: rgb2lch,

      hsl2rgb: hsl2rgb,
      hsl2hsv: hsl2hsv,
      hsl2hwb: hsl2hwb,
      hsl2cmyk: hsl2cmyk,
      hsl2keyword: hsl2keyword,

      hsv2rgb: hsv2rgb,
      hsv2hsl: hsv2hsl,
      hsv2hwb: hsv2hwb,
      hsv2cmyk: hsv2cmyk,
      hsv2keyword: hsv2keyword,

      hwb2rgb: hwb2rgb,
      hwb2hsl: hwb2hsl,
      hwb2hsv: hwb2hsv,
      hwb2cmyk: hwb2cmyk,
      hwb2keyword: hwb2keyword,

      cmyk2rgb: cmyk2rgb,
      cmyk2hsl: cmyk2hsl,
      cmyk2hsv: cmyk2hsv,
      cmyk2hwb: cmyk2hwb,
      cmyk2keyword: cmyk2keyword,

      keyword2rgb: keyword2rgb,
      keyword2hsl: keyword2hsl,
      keyword2hsv: keyword2hsv,
      keyword2hwb: keyword2hwb,
      keyword2cmyk: keyword2cmyk,
      keyword2lab: keyword2lab,
      keyword2xyz: keyword2xyz,

      xyz2rgb: xyz2rgb,
      xyz2lab: xyz2lab,
      xyz2lch: xyz2lch,

      lab2xyz: lab2xyz,
      lab2rgb: lab2rgb,
      lab2lch: lab2lch,

      lch2lab: lch2lab,
      lch2xyz: lch2xyz,
      lch2rgb: lch2rgb
    };


    function rgb2hsl(rgb) {
      var r = rgb[0]/255,
          g = rgb[1]/255,
          b = rgb[2]/255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          delta = max - min,
          h, s, l;

      if (max == min)
        h = 0;
      else if (r == max)
        h = (g - b) / delta;
      else if (g == max)
        h = 2 + (b - r) / delta;
      else if (b == max)
        h = 4 + (r - g)/ delta;

      h = Math.min(h * 60, 360);

      if (h < 0)
        h += 360;

      l = (min + max) / 2;

      if (max == min)
        s = 0;
      else if (l <= 0.5)
        s = delta / (max + min);
      else
        s = delta / (2 - max - min);

      return [h, s * 100, l * 100];
    }

    function rgb2hsv(rgb) {
      var r = rgb[0],
          g = rgb[1],
          b = rgb[2],
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          delta = max - min,
          h, s, v;

      if (max == 0)
        s = 0;
      else
        s = (delta/max * 1000)/10;

      if (max == min)
        h = 0;
      else if (r == max)
        h = (g - b) / delta;
      else if (g == max)
        h = 2 + (b - r) / delta;
      else if (b == max)
        h = 4 + (r - g) / delta;

      h = Math.min(h * 60, 360);

      if (h < 0)
        h += 360;

      v = ((max / 255) * 1000) / 10;

      return [h, s, v];
    }

    function rgb2hwb(rgb) {
      var r = rgb[0],
          g = rgb[1],
          b = rgb[2],
          h = rgb2hsl(rgb)[0],
          w = 1/255 * Math.min(r, Math.min(g, b)),
          b = 1 - 1/255 * Math.max(r, Math.max(g, b));

      return [h, w * 100, b * 100];
    }

    function rgb2cmyk(rgb) {
      var r = rgb[0] / 255,
          g = rgb[1] / 255,
          b = rgb[2] / 255,
          c, m, y, k;

      k = Math.min(1 - r, 1 - g, 1 - b);
      c = (1 - r - k) / (1 - k) || 0;
      m = (1 - g - k) / (1 - k) || 0;
      y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    }

    function rgb2keyword(rgb) {
      return reverseKeywords[JSON.stringify(rgb)];
    }

    function rgb2xyz(rgb) {
      var r = rgb[0] / 255,
          g = rgb[1] / 255,
          b = rgb[2] / 255;

      // assume sRGB
      r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
      g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
      b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

      var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
      var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
      var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

      return [x * 100, y *100, z * 100];
    }

    function rgb2lab(rgb) {
      var xyz = rgb2xyz(rgb),
            x = xyz[0],
            y = xyz[1],
            z = xyz[2],
            l, a, b;

      x /= 95.047;
      y /= 100;
      z /= 108.883;

      x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
      y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
      z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);

      l = (116 * y) - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);

      return [l, a, b];
    }

    function rgb2lch(args) {
      return lab2lch(rgb2lab(args));
    }

    function hsl2rgb(hsl) {
      var h = hsl[0] / 360,
          s = hsl[1] / 100,
          l = hsl[2] / 100,
          t1, t2, t3, rgb, val;

      if (s == 0) {
        val = l * 255;
        return [val, val, val];
      }

      if (l < 0.5)
        t2 = l * (1 + s);
      else
        t2 = l + s - l * s;
      t1 = 2 * l - t2;

      rgb = [0, 0, 0];
      for (var i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * - (i - 1);
        t3 < 0 && t3++;
        t3 > 1 && t3--;

        if (6 * t3 < 1)
          val = t1 + (t2 - t1) * 6 * t3;
        else if (2 * t3 < 1)
          val = t2;
        else if (3 * t3 < 2)
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        else
          val = t1;

        rgb[i] = val * 255;
      }

      return rgb;
    }

    function hsl2hsv(hsl) {
      var h = hsl[0],
          s = hsl[1] / 100,
          l = hsl[2] / 100,
          sv, v;

      if(l === 0) {
          // no need to do calc on black
          // also avoids divide by 0 error
          return [0, 0, 0];
      }

      l *= 2;
      s *= (l <= 1) ? l : 2 - l;
      v = (l + s) / 2;
      sv = (2 * s) / (l + s);
      return [h, sv * 100, v * 100];
    }

    function hsl2hwb(args) {
      return rgb2hwb(hsl2rgb(args));
    }

    function hsl2cmyk(args) {
      return rgb2cmyk(hsl2rgb(args));
    }

    function hsl2keyword(args) {
      return rgb2keyword(hsl2rgb(args));
    }


    function hsv2rgb(hsv) {
      var h = hsv[0] / 60,
          s = hsv[1] / 100,
          v = hsv[2] / 100,
          hi = Math.floor(h) % 6;

      var f = h - Math.floor(h),
          p = 255 * v * (1 - s),
          q = 255 * v * (1 - (s * f)),
          t = 255 * v * (1 - (s * (1 - f))),
          v = 255 * v;

      switch(hi) {
        case 0:
          return [v, t, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q];
      }
    }

    function hsv2hsl(hsv) {
      var h = hsv[0],
          s = hsv[1] / 100,
          v = hsv[2] / 100,
          sl, l;

      l = (2 - s) * v;
      sl = s * v;
      sl /= (l <= 1) ? l : 2 - l;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    }

    function hsv2hwb(args) {
      return rgb2hwb(hsv2rgb(args))
    }

    function hsv2cmyk(args) {
      return rgb2cmyk(hsv2rgb(args));
    }

    function hsv2keyword(args) {
      return rgb2keyword(hsv2rgb(args));
    }

    // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
    function hwb2rgb(hwb) {
      var h = hwb[0] / 360,
          wh = hwb[1] / 100,
          bl = hwb[2] / 100,
          ratio = wh + bl,
          i, v, f, n;

      // wh + bl cant be > 1
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }

      i = Math.floor(6 * h);
      v = 1 - bl;
      f = 6 * h - i;
      if ((i & 0x01) != 0) {
        f = 1 - f;
      }
      n = wh + f * (v - wh);  // linear interpolation

      switch (i) {
        default:
        case 6:
        case 0: r = v; g = n; b = wh; break;
        case 1: r = n; g = v; b = wh; break;
        case 2: r = wh; g = v; b = n; break;
        case 3: r = wh; g = n; b = v; break;
        case 4: r = n; g = wh; b = v; break;
        case 5: r = v; g = wh; b = n; break;
      }

      return [r * 255, g * 255, b * 255];
    }

    function hwb2hsl(args) {
      return rgb2hsl(hwb2rgb(args));
    }

    function hwb2hsv(args) {
      return rgb2hsv(hwb2rgb(args));
    }

    function hwb2cmyk(args) {
      return rgb2cmyk(hwb2rgb(args));
    }

    function hwb2keyword(args) {
      return rgb2keyword(hwb2rgb(args));
    }

    function cmyk2rgb(cmyk) {
      var c = cmyk[0] / 100,
          m = cmyk[1] / 100,
          y = cmyk[2] / 100,
          k = cmyk[3] / 100,
          r, g, b;

      r = 1 - Math.min(1, c * (1 - k) + k);
      g = 1 - Math.min(1, m * (1 - k) + k);
      b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    }

    function cmyk2hsl(args) {
      return rgb2hsl(cmyk2rgb(args));
    }

    function cmyk2hsv(args) {
      return rgb2hsv(cmyk2rgb(args));
    }

    function cmyk2hwb(args) {
      return rgb2hwb(cmyk2rgb(args));
    }

    function cmyk2keyword(args) {
      return rgb2keyword(cmyk2rgb(args));
    }


    function xyz2rgb(xyz) {
      var x = xyz[0] / 100,
          y = xyz[1] / 100,
          z = xyz[2] / 100,
          r, g, b;

      r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
      g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
      b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

      // assume sRGB
      r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
        : r = (r * 12.92);

      g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
        : g = (g * 12.92);

      b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
        : b = (b * 12.92);

      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);

      return [r * 255, g * 255, b * 255];
    }

    function xyz2lab(xyz) {
      var x = xyz[0],
          y = xyz[1],
          z = xyz[2],
          l, a, b;

      x /= 95.047;
      y /= 100;
      z /= 108.883;

      x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
      y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
      z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);

      l = (116 * y) - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);

      return [l, a, b];
    }

    function xyz2lch(args) {
      return lab2lch(xyz2lab(args));
    }

    function lab2xyz(lab) {
      var l = lab[0],
          a = lab[1],
          b = lab[2],
          x, y, z, y2;

      if (l <= 8) {
        y = (l * 100) / 903.3;
        y2 = (7.787 * (y / 100)) + (16 / 116);
      } else {
        y = 100 * Math.pow((l + 16) / 116, 3);
        y2 = Math.pow(y / 100, 1/3);
      }

      x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);

      z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);

      return [x, y, z];
    }

    function lab2lch(lab) {
      var l = lab[0],
          a = lab[1],
          b = lab[2],
          hr, h, c;

      hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;
      if (h < 0) {
        h += 360;
      }
      c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    }

    function lab2rgb(args) {
      return xyz2rgb(lab2xyz(args));
    }

    function lch2lab(lch) {
      var l = lch[0],
          c = lch[1],
          h = lch[2],
          a, b, hr;

      hr = h / 360 * 2 * Math.PI;
      a = c * Math.cos(hr);
      b = c * Math.sin(hr);
      return [l, a, b];
    }

    function lch2xyz(args) {
      return lab2xyz(lch2lab(args));
    }

    function lch2rgb(args) {
      return lab2rgb(lch2lab(args));
    }

    function keyword2rgb(keyword) {
      return cssKeywords[keyword];
    }

    function keyword2hsl(args) {
      return rgb2hsl(keyword2rgb(args));
    }

    function keyword2hsv(args) {
      return rgb2hsv(keyword2rgb(args));
    }

    function keyword2hwb(args) {
      return rgb2hwb(keyword2rgb(args));
    }

    function keyword2cmyk(args) {
      return rgb2cmyk(keyword2rgb(args));
    }

    function keyword2lab(args) {
      return rgb2lab(keyword2rgb(args));
    }

    function keyword2xyz(args) {
      return rgb2xyz(keyword2rgb(args));
    }

    var cssKeywords = {
      aliceblue:  [240,248,255],
      antiquewhite: [250,235,215],
      aqua: [0,255,255],
      aquamarine: [127,255,212],
      azure:  [240,255,255],
      beige:  [245,245,220],
      bisque: [255,228,196],
      black:  [0,0,0],
      blanchedalmond: [255,235,205],
      blue: [0,0,255],
      blueviolet: [138,43,226],
      brown:  [165,42,42],
      burlywood:  [222,184,135],
      cadetblue:  [95,158,160],
      chartreuse: [127,255,0],
      chocolate:  [210,105,30],
      coral:  [255,127,80],
      cornflowerblue: [100,149,237],
      cornsilk: [255,248,220],
      crimson:  [220,20,60],
      cyan: [0,255,255],
      darkblue: [0,0,139],
      darkcyan: [0,139,139],
      darkgoldenrod:  [184,134,11],
      darkgray: [169,169,169],
      darkgreen:  [0,100,0],
      darkgrey: [169,169,169],
      darkkhaki:  [189,183,107],
      darkmagenta:  [139,0,139],
      darkolivegreen: [85,107,47],
      darkorange: [255,140,0],
      darkorchid: [153,50,204],
      darkred:  [139,0,0],
      darksalmon: [233,150,122],
      darkseagreen: [143,188,143],
      darkslateblue:  [72,61,139],
      darkslategray:  [47,79,79],
      darkslategrey:  [47,79,79],
      darkturquoise:  [0,206,209],
      darkviolet: [148,0,211],
      deeppink: [255,20,147],
      deepskyblue:  [0,191,255],
      dimgray:  [105,105,105],
      dimgrey:  [105,105,105],
      dodgerblue: [30,144,255],
      firebrick:  [178,34,34],
      floralwhite:  [255,250,240],
      forestgreen:  [34,139,34],
      fuchsia:  [255,0,255],
      gainsboro:  [220,220,220],
      ghostwhite: [248,248,255],
      gold: [255,215,0],
      goldenrod:  [218,165,32],
      gray: [128,128,128],
      green:  [0,128,0],
      greenyellow:  [173,255,47],
      grey: [128,128,128],
      honeydew: [240,255,240],
      hotpink:  [255,105,180],
      indianred:  [205,92,92],
      indigo: [75,0,130],
      ivory:  [255,255,240],
      khaki:  [240,230,140],
      lavender: [230,230,250],
      lavenderblush:  [255,240,245],
      lawngreen:  [124,252,0],
      lemonchiffon: [255,250,205],
      lightblue:  [173,216,230],
      lightcoral: [240,128,128],
      lightcyan:  [224,255,255],
      lightgoldenrodyellow: [250,250,210],
      lightgray:  [211,211,211],
      lightgreen: [144,238,144],
      lightgrey:  [211,211,211],
      lightpink:  [255,182,193],
      lightsalmon:  [255,160,122],
      lightseagreen:  [32,178,170],
      lightskyblue: [135,206,250],
      lightslategray: [119,136,153],
      lightslategrey: [119,136,153],
      lightsteelblue: [176,196,222],
      lightyellow:  [255,255,224],
      lime: [0,255,0],
      limegreen:  [50,205,50],
      linen:  [250,240,230],
      magenta:  [255,0,255],
      maroon: [128,0,0],
      mediumaquamarine: [102,205,170],
      mediumblue: [0,0,205],
      mediumorchid: [186,85,211],
      mediumpurple: [147,112,219],
      mediumseagreen: [60,179,113],
      mediumslateblue:  [123,104,238],
      mediumspringgreen:  [0,250,154],
      mediumturquoise:  [72,209,204],
      mediumvioletred:  [199,21,133],
      midnightblue: [25,25,112],
      mintcream:  [245,255,250],
      mistyrose:  [255,228,225],
      moccasin: [255,228,181],
      navajowhite:  [255,222,173],
      navy: [0,0,128],
      oldlace:  [253,245,230],
      olive:  [128,128,0],
      olivedrab:  [107,142,35],
      orange: [255,165,0],
      orangered:  [255,69,0],
      orchid: [218,112,214],
      palegoldenrod:  [238,232,170],
      palegreen:  [152,251,152],
      paleturquoise:  [175,238,238],
      palevioletred:  [219,112,147],
      papayawhip: [255,239,213],
      peachpuff:  [255,218,185],
      peru: [205,133,63],
      pink: [255,192,203],
      plum: [221,160,221],
      powderblue: [176,224,230],
      purple: [128,0,128],
      rebeccapurple: [102, 51, 153],
      red:  [255,0,0],
      rosybrown:  [188,143,143],
      royalblue:  [65,105,225],
      saddlebrown:  [139,69,19],
      salmon: [250,128,114],
      sandybrown: [244,164,96],
      seagreen: [46,139,87],
      seashell: [255,245,238],
      sienna: [160,82,45],
      silver: [192,192,192],
      skyblue:  [135,206,235],
      slateblue:  [106,90,205],
      slategray:  [112,128,144],
      slategrey:  [112,128,144],
      snow: [255,250,250],
      springgreen:  [0,255,127],
      steelblue:  [70,130,180],
      tan:  [210,180,140],
      teal: [0,128,128],
      thistle:  [216,191,216],
      tomato: [255,99,71],
      turquoise:  [64,224,208],
      violet: [238,130,238],
      wheat:  [245,222,179],
      white:  [255,255,255],
      whitesmoke: [245,245,245],
      yellow: [255,255,0],
      yellowgreen:  [154,205,50]
    };

    var reverseKeywords = {};
    for (var key in cssKeywords) {
      reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
    }

    var convert = function() {
       return new Converter();
    };

    for (var func in conversions) {
      // export Raw versions
      convert[func + "Raw"] =  (function(func) {
        // accept array or plain args
        return function(arg) {
          if (typeof arg == "number")
            arg = Array.prototype.slice.call(arguments);
          return conversions[func](arg);
        }
      })(func);

      var pair = /(\w+)2(\w+)/.exec(func),
          from = pair[1],
          to = pair[2];

      // export rgb2hsl and ["rgb"]["hsl"]
      convert[from] = convert[from] || {};

      convert[from][to] = convert[func] = (function(func) { 
        return function(arg) {
          if (typeof arg == "number")
            arg = Array.prototype.slice.call(arguments);
          
          var val = conversions[func](arg);
          if (typeof val == "string" || val === undefined)
            return val; // keyword

          for (var i = 0; i < val.length; i++)
            val[i] = Math.round(val[i]);
          return val;
        }
      })(func);
    }


    /* Converter does lazy conversion and caching */
    var Converter = function() {
       this.convs = {};
    };

    /* Either get the values for a space or
      set the values for a space, depending on args */
    Converter.prototype.routeSpace = function(space, args) {
       var values = args[0];
       if (values === undefined) {
          // color.rgb()
          return this.getValues(space);
       }
       // color.rgb(10, 10, 10)
       if (typeof values == "number") {
          values = Array.prototype.slice.call(args);        
       }

       return this.setValues(space, values);
    };
      
    /* Set the values for a space, invalidating cache */
    Converter.prototype.setValues = function(space, values) {
       this.space = space;
       this.convs = {};
       this.convs[space] = values;
       return this;
    };

    /* Get the values for a space. If there's already
      a conversion for the space, fetch it, otherwise
      compute it */
    Converter.prototype.getValues = function(space) {
       var vals = this.convs[space];
       if (!vals) {
          var fspace = this.space,
              from = this.convs[fspace];
          vals = convert[fspace][space](from);

          this.convs[space] = vals;
       }
      return vals;
    };

    ["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function(space) {
       Converter.prototype[space] = function(vals) {
          return this.routeSpace(space, arguments);
       };
    });

    var colorConvert = convert;

    var colorName = {
    	"aliceblue": [240, 248, 255],
    	"antiquewhite": [250, 235, 215],
    	"aqua": [0, 255, 255],
    	"aquamarine": [127, 255, 212],
    	"azure": [240, 255, 255],
    	"beige": [245, 245, 220],
    	"bisque": [255, 228, 196],
    	"black": [0, 0, 0],
    	"blanchedalmond": [255, 235, 205],
    	"blue": [0, 0, 255],
    	"blueviolet": [138, 43, 226],
    	"brown": [165, 42, 42],
    	"burlywood": [222, 184, 135],
    	"cadetblue": [95, 158, 160],
    	"chartreuse": [127, 255, 0],
    	"chocolate": [210, 105, 30],
    	"coral": [255, 127, 80],
    	"cornflowerblue": [100, 149, 237],
    	"cornsilk": [255, 248, 220],
    	"crimson": [220, 20, 60],
    	"cyan": [0, 255, 255],
    	"darkblue": [0, 0, 139],
    	"darkcyan": [0, 139, 139],
    	"darkgoldenrod": [184, 134, 11],
    	"darkgray": [169, 169, 169],
    	"darkgreen": [0, 100, 0],
    	"darkgrey": [169, 169, 169],
    	"darkkhaki": [189, 183, 107],
    	"darkmagenta": [139, 0, 139],
    	"darkolivegreen": [85, 107, 47],
    	"darkorange": [255, 140, 0],
    	"darkorchid": [153, 50, 204],
    	"darkred": [139, 0, 0],
    	"darksalmon": [233, 150, 122],
    	"darkseagreen": [143, 188, 143],
    	"darkslateblue": [72, 61, 139],
    	"darkslategray": [47, 79, 79],
    	"darkslategrey": [47, 79, 79],
    	"darkturquoise": [0, 206, 209],
    	"darkviolet": [148, 0, 211],
    	"deeppink": [255, 20, 147],
    	"deepskyblue": [0, 191, 255],
    	"dimgray": [105, 105, 105],
    	"dimgrey": [105, 105, 105],
    	"dodgerblue": [30, 144, 255],
    	"firebrick": [178, 34, 34],
    	"floralwhite": [255, 250, 240],
    	"forestgreen": [34, 139, 34],
    	"fuchsia": [255, 0, 255],
    	"gainsboro": [220, 220, 220],
    	"ghostwhite": [248, 248, 255],
    	"gold": [255, 215, 0],
    	"goldenrod": [218, 165, 32],
    	"gray": [128, 128, 128],
    	"green": [0, 128, 0],
    	"greenyellow": [173, 255, 47],
    	"grey": [128, 128, 128],
    	"honeydew": [240, 255, 240],
    	"hotpink": [255, 105, 180],
    	"indianred": [205, 92, 92],
    	"indigo": [75, 0, 130],
    	"ivory": [255, 255, 240],
    	"khaki": [240, 230, 140],
    	"lavender": [230, 230, 250],
    	"lavenderblush": [255, 240, 245],
    	"lawngreen": [124, 252, 0],
    	"lemonchiffon": [255, 250, 205],
    	"lightblue": [173, 216, 230],
    	"lightcoral": [240, 128, 128],
    	"lightcyan": [224, 255, 255],
    	"lightgoldenrodyellow": [250, 250, 210],
    	"lightgray": [211, 211, 211],
    	"lightgreen": [144, 238, 144],
    	"lightgrey": [211, 211, 211],
    	"lightpink": [255, 182, 193],
    	"lightsalmon": [255, 160, 122],
    	"lightseagreen": [32, 178, 170],
    	"lightskyblue": [135, 206, 250],
    	"lightslategray": [119, 136, 153],
    	"lightslategrey": [119, 136, 153],
    	"lightsteelblue": [176, 196, 222],
    	"lightyellow": [255, 255, 224],
    	"lime": [0, 255, 0],
    	"limegreen": [50, 205, 50],
    	"linen": [250, 240, 230],
    	"magenta": [255, 0, 255],
    	"maroon": [128, 0, 0],
    	"mediumaquamarine": [102, 205, 170],
    	"mediumblue": [0, 0, 205],
    	"mediumorchid": [186, 85, 211],
    	"mediumpurple": [147, 112, 219],
    	"mediumseagreen": [60, 179, 113],
    	"mediumslateblue": [123, 104, 238],
    	"mediumspringgreen": [0, 250, 154],
    	"mediumturquoise": [72, 209, 204],
    	"mediumvioletred": [199, 21, 133],
    	"midnightblue": [25, 25, 112],
    	"mintcream": [245, 255, 250],
    	"mistyrose": [255, 228, 225],
    	"moccasin": [255, 228, 181],
    	"navajowhite": [255, 222, 173],
    	"navy": [0, 0, 128],
    	"oldlace": [253, 245, 230],
    	"olive": [128, 128, 0],
    	"olivedrab": [107, 142, 35],
    	"orange": [255, 165, 0],
    	"orangered": [255, 69, 0],
    	"orchid": [218, 112, 214],
    	"palegoldenrod": [238, 232, 170],
    	"palegreen": [152, 251, 152],
    	"paleturquoise": [175, 238, 238],
    	"palevioletred": [219, 112, 147],
    	"papayawhip": [255, 239, 213],
    	"peachpuff": [255, 218, 185],
    	"peru": [205, 133, 63],
    	"pink": [255, 192, 203],
    	"plum": [221, 160, 221],
    	"powderblue": [176, 224, 230],
    	"purple": [128, 0, 128],
    	"rebeccapurple": [102, 51, 153],
    	"red": [255, 0, 0],
    	"rosybrown": [188, 143, 143],
    	"royalblue": [65, 105, 225],
    	"saddlebrown": [139, 69, 19],
    	"salmon": [250, 128, 114],
    	"sandybrown": [244, 164, 96],
    	"seagreen": [46, 139, 87],
    	"seashell": [255, 245, 238],
    	"sienna": [160, 82, 45],
    	"silver": [192, 192, 192],
    	"skyblue": [135, 206, 235],
    	"slateblue": [106, 90, 205],
    	"slategray": [112, 128, 144],
    	"slategrey": [112, 128, 144],
    	"snow": [255, 250, 250],
    	"springgreen": [0, 255, 127],
    	"steelblue": [70, 130, 180],
    	"tan": [210, 180, 140],
    	"teal": [0, 128, 128],
    	"thistle": [216, 191, 216],
    	"tomato": [255, 99, 71],
    	"turquoise": [64, 224, 208],
    	"violet": [238, 130, 238],
    	"wheat": [245, 222, 179],
    	"white": [255, 255, 255],
    	"whitesmoke": [245, 245, 245],
    	"yellow": [255, 255, 0],
    	"yellowgreen": [154, 205, 50]
    };

    /* MIT license */


    var colorString = {
       getRgba: getRgba,
       getHsla: getHsla,
       getRgb: getRgb,
       getHsl: getHsl,
       getHwb: getHwb,
       getAlpha: getAlpha,

       hexString: hexString,
       rgbString: rgbString,
       rgbaString: rgbaString,
       percentString: percentString,
       percentaString: percentaString,
       hslString: hslString,
       hslaString: hslaString,
       hwbString: hwbString,
       keyword: keyword
    };

    function getRgba(string) {
       if (!string) {
          return;
       }
       var abbr =  /^#([a-fA-F0-9]{3,4})$/i,
           hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,
           rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
           per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
           keyword = /(\w+)/;

       var rgb = [0, 0, 0],
           a = 1,
           match = string.match(abbr),
           hexAlpha = "";
       if (match) {
          match = match[1];
          hexAlpha = match[3];
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match[i] + match[i], 16);
          }
          if (hexAlpha) {
             a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;
          }
       }
       else if (match = string.match(hex)) {
          hexAlpha = match[2];
          match = match[1];
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
          }
          if (hexAlpha) {
             a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;
          }
       }
       else if (match = string.match(rgba)) {
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match[i + 1]);
          }
          a = parseFloat(match[4]);
       }
       else if (match = string.match(per)) {
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
          }
          a = parseFloat(match[4]);
       }
       else if (match = string.match(keyword)) {
          if (match[1] == "transparent") {
             return [0, 0, 0, 0];
          }
          rgb = colorName[match[1]];
          if (!rgb) {
             return;
          }
       }

       for (var i = 0; i < rgb.length; i++) {
          rgb[i] = scale(rgb[i], 0, 255);
       }
       if (!a && a != 0) {
          a = 1;
       }
       else {
          a = scale(a, 0, 1);
       }
       rgb[3] = a;
       return rgb;
    }

    function getHsla(string) {
       if (!string) {
          return;
       }
       var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
       var match = string.match(hsl);
       if (match) {
          var alpha = parseFloat(match[4]);
          var h = scale(parseInt(match[1]), 0, 360),
              s = scale(parseFloat(match[2]), 0, 100),
              l = scale(parseFloat(match[3]), 0, 100),
              a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h, s, l, a];
       }
    }

    function getHwb(string) {
       if (!string) {
          return;
       }
       var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
       var match = string.match(hwb);
       if (match) {
        var alpha = parseFloat(match[4]);
          var h = scale(parseInt(match[1]), 0, 360),
              w = scale(parseFloat(match[2]), 0, 100),
              b = scale(parseFloat(match[3]), 0, 100),
              a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h, w, b, a];
       }
    }

    function getRgb(string) {
       var rgba = getRgba(string);
       return rgba && rgba.slice(0, 3);
    }

    function getHsl(string) {
      var hsla = getHsla(string);
      return hsla && hsla.slice(0, 3);
    }

    function getAlpha(string) {
       var vals = getRgba(string);
       if (vals) {
          return vals[3];
       }
       else if (vals = getHsla(string)) {
          return vals[3];
       }
       else if (vals = getHwb(string)) {
          return vals[3];
       }
    }

    // generators
    function hexString(rgba, a) {
       var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];
       return "#" + hexDouble(rgba[0]) 
                  + hexDouble(rgba[1])
                  + hexDouble(rgba[2])
                  + (
                     (a >= 0 && a < 1)
                     ? hexDouble(Math.round(a * 255))
                     : ""
                  );
    }

    function rgbString(rgba, alpha) {
       if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
          return rgbaString(rgba, alpha);
       }
       return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
    }

    function rgbaString(rgba, alpha) {
       if (alpha === undefined) {
          alpha = (rgba[3] !== undefined ? rgba[3] : 1);
       }
       return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
               + ", " + alpha + ")";
    }

    function percentString(rgba, alpha) {
       if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
          return percentaString(rgba, alpha);
       }
       var r = Math.round(rgba[0]/255 * 100),
           g = Math.round(rgba[1]/255 * 100),
           b = Math.round(rgba[2]/255 * 100);

       return "rgb(" + r + "%, " + g + "%, " + b + "%)";
    }

    function percentaString(rgba, alpha) {
       var r = Math.round(rgba[0]/255 * 100),
           g = Math.round(rgba[1]/255 * 100),
           b = Math.round(rgba[2]/255 * 100);
       return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
    }

    function hslString(hsla, alpha) {
       if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
          return hslaString(hsla, alpha);
       }
       return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
    }

    function hslaString(hsla, alpha) {
       if (alpha === undefined) {
          alpha = (hsla[3] !== undefined ? hsla[3] : 1);
       }
       return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
               + alpha + ")";
    }

    // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
    // (hwb have alpha optional & 1 is default value)
    function hwbString(hwb, alpha) {
       if (alpha === undefined) {
          alpha = (hwb[3] !== undefined ? hwb[3] : 1);
       }
       return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
               + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
    }

    function keyword(rgb) {
      return reverseNames[rgb.slice(0, 3)];
    }

    // helpers
    function scale(num, min, max) {
       return Math.min(Math.max(min, num), max);
    }

    function hexDouble(num) {
      var str = num.toString(16).toUpperCase();
      return (str.length < 2) ? "0" + str : str;
    }


    //create a list of reverse color names
    var reverseNames = {};
    for (var name in colorName) {
       reverseNames[colorName[name]] = name;
    }

    /* MIT license */



    var Color = function (obj) {
    	if (obj instanceof Color) {
    		return obj;
    	}
    	if (!(this instanceof Color)) {
    		return new Color(obj);
    	}

    	this.valid = false;
    	this.values = {
    		rgb: [0, 0, 0],
    		hsl: [0, 0, 0],
    		hsv: [0, 0, 0],
    		hwb: [0, 0, 0],
    		cmyk: [0, 0, 0, 0],
    		alpha: 1
    	};

    	// parse Color() argument
    	var vals;
    	if (typeof obj === 'string') {
    		vals = colorString.getRgba(obj);
    		if (vals) {
    			this.setValues('rgb', vals);
    		} else if (vals = colorString.getHsla(obj)) {
    			this.setValues('hsl', vals);
    		} else if (vals = colorString.getHwb(obj)) {
    			this.setValues('hwb', vals);
    		}
    	} else if (typeof obj === 'object') {
    		vals = obj;
    		if (vals.r !== undefined || vals.red !== undefined) {
    			this.setValues('rgb', vals);
    		} else if (vals.l !== undefined || vals.lightness !== undefined) {
    			this.setValues('hsl', vals);
    		} else if (vals.v !== undefined || vals.value !== undefined) {
    			this.setValues('hsv', vals);
    		} else if (vals.w !== undefined || vals.whiteness !== undefined) {
    			this.setValues('hwb', vals);
    		} else if (vals.c !== undefined || vals.cyan !== undefined) {
    			this.setValues('cmyk', vals);
    		}
    	}
    };

    Color.prototype = {
    	isValid: function () {
    		return this.valid;
    	},
    	rgb: function () {
    		return this.setSpace('rgb', arguments);
    	},
    	hsl: function () {
    		return this.setSpace('hsl', arguments);
    	},
    	hsv: function () {
    		return this.setSpace('hsv', arguments);
    	},
    	hwb: function () {
    		return this.setSpace('hwb', arguments);
    	},
    	cmyk: function () {
    		return this.setSpace('cmyk', arguments);
    	},

    	rgbArray: function () {
    		return this.values.rgb;
    	},
    	hslArray: function () {
    		return this.values.hsl;
    	},
    	hsvArray: function () {
    		return this.values.hsv;
    	},
    	hwbArray: function () {
    		var values = this.values;
    		if (values.alpha !== 1) {
    			return values.hwb.concat([values.alpha]);
    		}
    		return values.hwb;
    	},
    	cmykArray: function () {
    		return this.values.cmyk;
    	},
    	rgbaArray: function () {
    		var values = this.values;
    		return values.rgb.concat([values.alpha]);
    	},
    	hslaArray: function () {
    		var values = this.values;
    		return values.hsl.concat([values.alpha]);
    	},
    	alpha: function (val) {
    		if (val === undefined) {
    			return this.values.alpha;
    		}
    		this.setValues('alpha', val);
    		return this;
    	},

    	red: function (val) {
    		return this.setChannel('rgb', 0, val);
    	},
    	green: function (val) {
    		return this.setChannel('rgb', 1, val);
    	},
    	blue: function (val) {
    		return this.setChannel('rgb', 2, val);
    	},
    	hue: function (val) {
    		if (val) {
    			val %= 360;
    			val = val < 0 ? 360 + val : val;
    		}
    		return this.setChannel('hsl', 0, val);
    	},
    	saturation: function (val) {
    		return this.setChannel('hsl', 1, val);
    	},
    	lightness: function (val) {
    		return this.setChannel('hsl', 2, val);
    	},
    	saturationv: function (val) {
    		return this.setChannel('hsv', 1, val);
    	},
    	whiteness: function (val) {
    		return this.setChannel('hwb', 1, val);
    	},
    	blackness: function (val) {
    		return this.setChannel('hwb', 2, val);
    	},
    	value: function (val) {
    		return this.setChannel('hsv', 2, val);
    	},
    	cyan: function (val) {
    		return this.setChannel('cmyk', 0, val);
    	},
    	magenta: function (val) {
    		return this.setChannel('cmyk', 1, val);
    	},
    	yellow: function (val) {
    		return this.setChannel('cmyk', 2, val);
    	},
    	black: function (val) {
    		return this.setChannel('cmyk', 3, val);
    	},

    	hexString: function () {
    		return colorString.hexString(this.values.rgb);
    	},
    	rgbString: function () {
    		return colorString.rgbString(this.values.rgb, this.values.alpha);
    	},
    	rgbaString: function () {
    		return colorString.rgbaString(this.values.rgb, this.values.alpha);
    	},
    	percentString: function () {
    		return colorString.percentString(this.values.rgb, this.values.alpha);
    	},
    	hslString: function () {
    		return colorString.hslString(this.values.hsl, this.values.alpha);
    	},
    	hslaString: function () {
    		return colorString.hslaString(this.values.hsl, this.values.alpha);
    	},
    	hwbString: function () {
    		return colorString.hwbString(this.values.hwb, this.values.alpha);
    	},
    	keyword: function () {
    		return colorString.keyword(this.values.rgb, this.values.alpha);
    	},

    	rgbNumber: function () {
    		var rgb = this.values.rgb;
    		return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
    	},

    	luminosity: function () {
    		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
    		var rgb = this.values.rgb;
    		var lum = [];
    		for (var i = 0; i < rgb.length; i++) {
    			var chan = rgb[i] / 255;
    			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
    		}
    		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
    	},

    	contrast: function (color2) {
    		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
    		var lum1 = this.luminosity();
    		var lum2 = color2.luminosity();
    		if (lum1 > lum2) {
    			return (lum1 + 0.05) / (lum2 + 0.05);
    		}
    		return (lum2 + 0.05) / (lum1 + 0.05);
    	},

    	level: function (color2) {
    		var contrastRatio = this.contrast(color2);
    		if (contrastRatio >= 7.1) {
    			return 'AAA';
    		}

    		return (contrastRatio >= 4.5) ? 'AA' : '';
    	},

    	dark: function () {
    		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
    		var rgb = this.values.rgb;
    		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
    		return yiq < 128;
    	},

    	light: function () {
    		return !this.dark();
    	},

    	negate: function () {
    		var rgb = [];
    		for (var i = 0; i < 3; i++) {
    			rgb[i] = 255 - this.values.rgb[i];
    		}
    		this.setValues('rgb', rgb);
    		return this;
    	},

    	lighten: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[2] += hsl[2] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	darken: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[2] -= hsl[2] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	saturate: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[1] += hsl[1] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	desaturate: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[1] -= hsl[1] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	whiten: function (ratio) {
    		var hwb = this.values.hwb;
    		hwb[1] += hwb[1] * ratio;
    		this.setValues('hwb', hwb);
    		return this;
    	},

    	blacken: function (ratio) {
    		var hwb = this.values.hwb;
    		hwb[2] += hwb[2] * ratio;
    		this.setValues('hwb', hwb);
    		return this;
    	},

    	greyscale: function () {
    		var rgb = this.values.rgb;
    		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
    		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
    		this.setValues('rgb', [val, val, val]);
    		return this;
    	},

    	clearer: function (ratio) {
    		var alpha = this.values.alpha;
    		this.setValues('alpha', alpha - (alpha * ratio));
    		return this;
    	},

    	opaquer: function (ratio) {
    		var alpha = this.values.alpha;
    		this.setValues('alpha', alpha + (alpha * ratio));
    		return this;
    	},

    	rotate: function (degrees) {
    		var hsl = this.values.hsl;
    		var hue = (hsl[0] + degrees) % 360;
    		hsl[0] = hue < 0 ? 360 + hue : hue;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	/**
    	 * Ported from sass implementation in C
    	 * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
    	 */
    	mix: function (mixinColor, weight) {
    		var color1 = this;
    		var color2 = mixinColor;
    		var p = weight === undefined ? 0.5 : weight;

    		var w = 2 * p - 1;
    		var a = color1.alpha() - color2.alpha();

    		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
    		var w2 = 1 - w1;

    		return this
    			.rgb(
    				w1 * color1.red() + w2 * color2.red(),
    				w1 * color1.green() + w2 * color2.green(),
    				w1 * color1.blue() + w2 * color2.blue()
    			)
    			.alpha(color1.alpha() * p + color2.alpha() * (1 - p));
    	},

    	toJSON: function () {
    		return this.rgb();
    	},

    	clone: function () {
    		// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
    		// making the final build way to big to embed in Chart.js. So let's do it manually,
    		// assuming that values to clone are 1 dimension arrays containing only numbers,
    		// except 'alpha' which is a number.
    		var result = new Color();
    		var source = this.values;
    		var target = result.values;
    		var value, type;

    		for (var prop in source) {
    			if (source.hasOwnProperty(prop)) {
    				value = source[prop];
    				type = ({}).toString.call(value);
    				if (type === '[object Array]') {
    					target[prop] = value.slice(0);
    				} else if (type === '[object Number]') {
    					target[prop] = value;
    				} else {
    					console.error('unexpected color value:', value);
    				}
    			}
    		}

    		return result;
    	}
    };

    Color.prototype.spaces = {
    	rgb: ['red', 'green', 'blue'],
    	hsl: ['hue', 'saturation', 'lightness'],
    	hsv: ['hue', 'saturation', 'value'],
    	hwb: ['hue', 'whiteness', 'blackness'],
    	cmyk: ['cyan', 'magenta', 'yellow', 'black']
    };

    Color.prototype.maxes = {
    	rgb: [255, 255, 255],
    	hsl: [360, 100, 100],
    	hsv: [360, 100, 100],
    	hwb: [360, 100, 100],
    	cmyk: [100, 100, 100, 100]
    };

    Color.prototype.getValues = function (space) {
    	var values = this.values;
    	var vals = {};

    	for (var i = 0; i < space.length; i++) {
    		vals[space.charAt(i)] = values[space][i];
    	}

    	if (values.alpha !== 1) {
    		vals.a = values.alpha;
    	}

    	// {r: 255, g: 255, b: 255, a: 0.4}
    	return vals;
    };

    Color.prototype.setValues = function (space, vals) {
    	var values = this.values;
    	var spaces = this.spaces;
    	var maxes = this.maxes;
    	var alpha = 1;
    	var i;

    	this.valid = true;

    	if (space === 'alpha') {
    		alpha = vals;
    	} else if (vals.length) {
    		// [10, 10, 10]
    		values[space] = vals.slice(0, space.length);
    		alpha = vals[space.length];
    	} else if (vals[space.charAt(0)] !== undefined) {
    		// {r: 10, g: 10, b: 10}
    		for (i = 0; i < space.length; i++) {
    			values[space][i] = vals[space.charAt(i)];
    		}

    		alpha = vals.a;
    	} else if (vals[spaces[space][0]] !== undefined) {
    		// {red: 10, green: 10, blue: 10}
    		var chans = spaces[space];

    		for (i = 0; i < space.length; i++) {
    			values[space][i] = vals[chans[i]];
    		}

    		alpha = vals.alpha;
    	}

    	values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));

    	if (space === 'alpha') {
    		return false;
    	}

    	var capped;

    	// cap values of the space prior converting all values
    	for (i = 0; i < space.length; i++) {
    		capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
    		values[space][i] = Math.round(capped);
    	}

    	// convert to all the other color spaces
    	for (var sname in spaces) {
    		if (sname !== space) {
    			values[sname] = colorConvert[space][sname](values[space]);
    		}
    	}

    	return true;
    };

    Color.prototype.setSpace = function (space, args) {
    	var vals = args[0];

    	if (vals === undefined) {
    		// color.rgb()
    		return this.getValues(space);
    	}

    	// color.rgb(10, 10, 10)
    	if (typeof vals === 'number') {
    		vals = Array.prototype.slice.call(args);
    	}

    	this.setValues(space, vals);
    	return this;
    };

    Color.prototype.setChannel = function (space, index, val) {
    	var svalues = this.values[space];
    	if (val === undefined) {
    		// color.red()
    		return svalues[index];
    	} else if (val === svalues[index]) {
    		// color.red(color.red())
    		return this;
    	}

    	// color.red(100)
    	svalues[index] = val;
    	this.setValues(space, svalues);

    	return this;
    };

    if (typeof window !== 'undefined') {
    	window.Color = Color;
    }

    var chartjsColor = Color;

    /**
     * @namespace Chart.helpers
     */
    var helpers = {
    	/**
    	 * An empty function that can be used, for example, for optional callback.
    	 */
    	noop: function() {},

    	/**
    	 * Returns a unique id, sequentially generated from a global variable.
    	 * @returns {number}
    	 * @function
    	 */
    	uid: (function() {
    		var id = 0;
    		return function() {
    			return id++;
    		};
    	}()),

    	/**
    	 * Returns true if `value` is neither null nor undefined, else returns false.
    	 * @param {*} value - The value to test.
    	 * @returns {boolean}
    	 * @since 2.7.0
    	 */
    	isNullOrUndef: function(value) {
    		return value === null || typeof value === 'undefined';
    	},

    	/**
    	 * Returns true if `value` is an array (including typed arrays), else returns false.
    	 * @param {*} value - The value to test.
    	 * @returns {boolean}
    	 * @function
    	 */
    	isArray: function(value) {
    		if (Array.isArray && Array.isArray(value)) {
    			return true;
    		}
    		var type = Object.prototype.toString.call(value);
    		if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
    			return true;
    		}
    		return false;
    	},

    	/**
    	 * Returns true if `value` is an object (excluding null), else returns false.
    	 * @param {*} value - The value to test.
    	 * @returns {boolean}
    	 * @since 2.7.0
    	 */
    	isObject: function(value) {
    		return value !== null && Object.prototype.toString.call(value) === '[object Object]';
    	},

    	/**
    	 * Returns true if `value` is a finite number, else returns false
    	 * @param {*} value  - The value to test.
    	 * @returns {boolean}
    	 */
    	isFinite: function(value) {
    		return (typeof value === 'number' || value instanceof Number) && isFinite(value);
    	},

    	/**
    	 * Returns `value` if defined, else returns `defaultValue`.
    	 * @param {*} value - The value to return if defined.
    	 * @param {*} defaultValue - The value to return if `value` is undefined.
    	 * @returns {*}
    	 */
    	valueOrDefault: function(value, defaultValue) {
    		return typeof value === 'undefined' ? defaultValue : value;
    	},

    	/**
    	 * Returns value at the given `index` in array if defined, else returns `defaultValue`.
    	 * @param {Array} value - The array to lookup for value at `index`.
    	 * @param {number} index - The index in `value` to lookup for value.
    	 * @param {*} defaultValue - The value to return if `value[index]` is undefined.
    	 * @returns {*}
    	 */
    	valueAtIndexOrDefault: function(value, index, defaultValue) {
    		return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
    	},

    	/**
    	 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
    	 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
    	 * @param {function} fn - The function to call.
    	 * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
    	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
    	 * @returns {*}
    	 */
    	callback: function(fn, args, thisArg) {
    		if (fn && typeof fn.call === 'function') {
    			return fn.apply(thisArg, args);
    		}
    	},

    	/**
    	 * Note(SB) for performance sake, this method should only be used when loopable type
    	 * is unknown or in none intensive code (not called often and small loopable). Else
    	 * it's preferable to use a regular for() loop and save extra function calls.
    	 * @param {object|Array} loopable - The object or array to be iterated.
    	 * @param {function} fn - The function to call for each item.
    	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
    	 * @param {boolean} [reverse] - If true, iterates backward on the loopable.
    	 */
    	each: function(loopable, fn, thisArg, reverse) {
    		var i, len, keys;
    		if (helpers.isArray(loopable)) {
    			len = loopable.length;
    			if (reverse) {
    				for (i = len - 1; i >= 0; i--) {
    					fn.call(thisArg, loopable[i], i);
    				}
    			} else {
    				for (i = 0; i < len; i++) {
    					fn.call(thisArg, loopable[i], i);
    				}
    			}
    		} else if (helpers.isObject(loopable)) {
    			keys = Object.keys(loopable);
    			len = keys.length;
    			for (i = 0; i < len; i++) {
    				fn.call(thisArg, loopable[keys[i]], keys[i]);
    			}
    		}
    	},

    	/**
    	 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
    	 * @see https://stackoverflow.com/a/14853974
    	 * @param {Array} a0 - The array to compare
    	 * @param {Array} a1 - The array to compare
    	 * @returns {boolean}
    	 */
    	arrayEquals: function(a0, a1) {
    		var i, ilen, v0, v1;

    		if (!a0 || !a1 || a0.length !== a1.length) {
    			return false;
    		}

    		for (i = 0, ilen = a0.length; i < ilen; ++i) {
    			v0 = a0[i];
    			v1 = a1[i];

    			if (v0 instanceof Array && v1 instanceof Array) {
    				if (!helpers.arrayEquals(v0, v1)) {
    					return false;
    				}
    			} else if (v0 !== v1) {
    				// NOTE: two different object instances will never be equal: {x:20} != {x:20}
    				return false;
    			}
    		}

    		return true;
    	},

    	/**
    	 * Returns a deep copy of `source` without keeping references on objects and arrays.
    	 * @param {*} source - The value to clone.
    	 * @returns {*}
    	 */
    	clone: function(source) {
    		if (helpers.isArray(source)) {
    			return source.map(helpers.clone);
    		}

    		if (helpers.isObject(source)) {
    			var target = {};
    			var keys = Object.keys(source);
    			var klen = keys.length;
    			var k = 0;

    			for (; k < klen; ++k) {
    				target[keys[k]] = helpers.clone(source[keys[k]]);
    			}

    			return target;
    		}

    		return source;
    	},

    	/**
    	 * The default merger when Chart.helpers.merge is called without merger option.
    	 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
    	 * @private
    	 */
    	_merger: function(key, target, source, options) {
    		var tval = target[key];
    		var sval = source[key];

    		if (helpers.isObject(tval) && helpers.isObject(sval)) {
    			helpers.merge(tval, sval, options);
    		} else {
    			target[key] = helpers.clone(sval);
    		}
    	},

    	/**
    	 * Merges source[key] in target[key] only if target[key] is undefined.
    	 * @private
    	 */
    	_mergerIf: function(key, target, source) {
    		var tval = target[key];
    		var sval = source[key];

    		if (helpers.isObject(tval) && helpers.isObject(sval)) {
    			helpers.mergeIf(tval, sval);
    		} else if (!target.hasOwnProperty(key)) {
    			target[key] = helpers.clone(sval);
    		}
    	},

    	/**
    	 * Recursively deep copies `source` properties into `target` with the given `options`.
    	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
    	 * @param {object} target - The target object in which all sources are merged into.
    	 * @param {object|object[]} source - Object(s) to merge into `target`.
    	 * @param {object} [options] - Merging options:
    	 * @param {function} [options.merger] - The merge method (key, target, source, options)
    	 * @returns {object} The `target` object.
    	 */
    	merge: function(target, source, options) {
    		var sources = helpers.isArray(source) ? source : [source];
    		var ilen = sources.length;
    		var merge, i, keys, klen, k;

    		if (!helpers.isObject(target)) {
    			return target;
    		}

    		options = options || {};
    		merge = options.merger || helpers._merger;

    		for (i = 0; i < ilen; ++i) {
    			source = sources[i];
    			if (!helpers.isObject(source)) {
    				continue;
    			}

    			keys = Object.keys(source);
    			for (k = 0, klen = keys.length; k < klen; ++k) {
    				merge(keys[k], target, source, options);
    			}
    		}

    		return target;
    	},

    	/**
    	 * Recursively deep copies `source` properties into `target` *only* if not defined in target.
    	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
    	 * @param {object} target - The target object in which all sources are merged into.
    	 * @param {object|object[]} source - Object(s) to merge into `target`.
    	 * @returns {object} The `target` object.
    	 */
    	mergeIf: function(target, source) {
    		return helpers.merge(target, source, {merger: helpers._mergerIf});
    	},

    	/**
    	 * Applies the contents of two or more objects together into the first object.
    	 * @param {object} target - The target object in which all objects are merged into.
    	 * @param {object} arg1 - Object containing additional properties to merge in target.
    	 * @param {object} argN - Additional objects containing properties to merge in target.
    	 * @returns {object} The `target` object.
    	 */
    	extend: function(target) {
    		var setFn = function(value, key) {
    			target[key] = value;
    		};
    		for (var i = 1, ilen = arguments.length; i < ilen; ++i) {
    			helpers.each(arguments[i], setFn);
    		}
    		return target;
    	},

    	/**
    	 * Basic javascript inheritance based on the model created in Backbone.js
    	 */
    	inherits: function(extensions) {
    		var me = this;
    		var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
    			return me.apply(this, arguments);
    		};

    		var Surrogate = function() {
    			this.constructor = ChartElement;
    		};

    		Surrogate.prototype = me.prototype;
    		ChartElement.prototype = new Surrogate();
    		ChartElement.extend = helpers.inherits;

    		if (extensions) {
    			helpers.extend(ChartElement.prototype, extensions);
    		}

    		ChartElement.__super__ = me.prototype;
    		return ChartElement;
    	}
    };

    var helpers_core = helpers;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.callback instead.
     * @function Chart.helpers.callCallback
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     * @private
     */
    helpers.callCallback = helpers.callback;

    /**
     * Provided for backward compatibility, use Array.prototype.indexOf instead.
     * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+
     * @function Chart.helpers.indexOf
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.indexOf = function(array, item, fromIndex) {
    	return Array.prototype.indexOf.call(array, item, fromIndex);
    };

    /**
     * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.
     * @function Chart.helpers.getValueOrDefault
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.getValueOrDefault = helpers.valueOrDefault;

    /**
     * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.
     * @function Chart.helpers.getValueAtIndexOrDefault
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;

    /**
     * Easing functions adapted from Robert Penner's easing equations.
     * @namespace Chart.helpers.easingEffects
     * @see http://www.robertpenner.com/easing/
     */
    var effects = {
    	linear: function(t) {
    		return t;
    	},

    	easeInQuad: function(t) {
    		return t * t;
    	},

    	easeOutQuad: function(t) {
    		return -t * (t - 2);
    	},

    	easeInOutQuad: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t;
    		}
    		return -0.5 * ((--t) * (t - 2) - 1);
    	},

    	easeInCubic: function(t) {
    		return t * t * t;
    	},

    	easeOutCubic: function(t) {
    		return (t = t - 1) * t * t + 1;
    	},

    	easeInOutCubic: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t * t;
    		}
    		return 0.5 * ((t -= 2) * t * t + 2);
    	},

    	easeInQuart: function(t) {
    		return t * t * t * t;
    	},

    	easeOutQuart: function(t) {
    		return -((t = t - 1) * t * t * t - 1);
    	},

    	easeInOutQuart: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t * t * t;
    		}
    		return -0.5 * ((t -= 2) * t * t * t - 2);
    	},

    	easeInQuint: function(t) {
    		return t * t * t * t * t;
    	},

    	easeOutQuint: function(t) {
    		return (t = t - 1) * t * t * t * t + 1;
    	},

    	easeInOutQuint: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t * t * t * t;
    		}
    		return 0.5 * ((t -= 2) * t * t * t * t + 2);
    	},

    	easeInSine: function(t) {
    		return -Math.cos(t * (Math.PI / 2)) + 1;
    	},

    	easeOutSine: function(t) {
    		return Math.sin(t * (Math.PI / 2));
    	},

    	easeInOutSine: function(t) {
    		return -0.5 * (Math.cos(Math.PI * t) - 1);
    	},

    	easeInExpo: function(t) {
    		return (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));
    	},

    	easeOutExpo: function(t) {
    		return (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;
    	},

    	easeInOutExpo: function(t) {
    		if (t === 0) {
    			return 0;
    		}
    		if (t === 1) {
    			return 1;
    		}
    		if ((t /= 0.5) < 1) {
    			return 0.5 * Math.pow(2, 10 * (t - 1));
    		}
    		return 0.5 * (-Math.pow(2, -10 * --t) + 2);
    	},

    	easeInCirc: function(t) {
    		if (t >= 1) {
    			return t;
    		}
    		return -(Math.sqrt(1 - t * t) - 1);
    	},

    	easeOutCirc: function(t) {
    		return Math.sqrt(1 - (t = t - 1) * t);
    	},

    	easeInOutCirc: function(t) {
    		if ((t /= 0.5) < 1) {
    			return -0.5 * (Math.sqrt(1 - t * t) - 1);
    		}
    		return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
    	},

    	easeInElastic: function(t) {
    		var s = 1.70158;
    		var p = 0;
    		var a = 1;
    		if (t === 0) {
    			return 0;
    		}
    		if (t === 1) {
    			return 1;
    		}
    		if (!p) {
    			p = 0.3;
    		}
    		if (a < 1) {
    			a = 1;
    			s = p / 4;
    		} else {
    			s = p / (2 * Math.PI) * Math.asin(1 / a);
    		}
    		return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
    	},

    	easeOutElastic: function(t) {
    		var s = 1.70158;
    		var p = 0;
    		var a = 1;
    		if (t === 0) {
    			return 0;
    		}
    		if (t === 1) {
    			return 1;
    		}
    		if (!p) {
    			p = 0.3;
    		}
    		if (a < 1) {
    			a = 1;
    			s = p / 4;
    		} else {
    			s = p / (2 * Math.PI) * Math.asin(1 / a);
    		}
    		return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
    	},

    	easeInOutElastic: function(t) {
    		var s = 1.70158;
    		var p = 0;
    		var a = 1;
    		if (t === 0) {
    			return 0;
    		}
    		if ((t /= 0.5) === 2) {
    			return 1;
    		}
    		if (!p) {
    			p = 0.45;
    		}
    		if (a < 1) {
    			a = 1;
    			s = p / 4;
    		} else {
    			s = p / (2 * Math.PI) * Math.asin(1 / a);
    		}
    		if (t < 1) {
    			return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
    		}
    		return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
    	},
    	easeInBack: function(t) {
    		var s = 1.70158;
    		return t * t * ((s + 1) * t - s);
    	},

    	easeOutBack: function(t) {
    		var s = 1.70158;
    		return (t = t - 1) * t * ((s + 1) * t + s) + 1;
    	},

    	easeInOutBack: function(t) {
    		var s = 1.70158;
    		if ((t /= 0.5) < 1) {
    			return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
    		}
    		return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
    	},

    	easeInBounce: function(t) {
    		return 1 - effects.easeOutBounce(1 - t);
    	},

    	easeOutBounce: function(t) {
    		if (t < (1 / 2.75)) {
    			return 7.5625 * t * t;
    		}
    		if (t < (2 / 2.75)) {
    			return 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;
    		}
    		if (t < (2.5 / 2.75)) {
    			return 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;
    		}
    		return 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;
    	},

    	easeInOutBounce: function(t) {
    		if (t < 0.5) {
    			return effects.easeInBounce(t * 2) * 0.5;
    		}
    		return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
    	}
    };

    var helpers_easing = {
    	effects: effects
    };

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.easing.effects instead.
     * @function Chart.helpers.easingEffects
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.easingEffects = effects;

    var PI = Math.PI;
    var RAD_PER_DEG = PI / 180;
    var DOUBLE_PI = PI * 2;
    var HALF_PI = PI / 2;
    var QUARTER_PI = PI / 4;
    var TWO_THIRDS_PI = PI * 2 / 3;

    /**
     * @namespace Chart.helpers.canvas
     */
    var exports$1 = {
    	/**
    	 * Clears the entire canvas associated to the given `chart`.
    	 * @param {Chart} chart - The chart for which to clear the canvas.
    	 */
    	clear: function(chart) {
    		chart.ctx.clearRect(0, 0, chart.width, chart.height);
    	},

    	/**
    	 * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
    	 * given size (width, height) and the same `radius` for all corners.
    	 * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
    	 * @param {number} x - The x axis of the coordinate for the rectangle starting point.
    	 * @param {number} y - The y axis of the coordinate for the rectangle starting point.
    	 * @param {number} width - The rectangle's width.
    	 * @param {number} height - The rectangle's height.
    	 * @param {number} radius - The rounded amount (in pixels) for the four corners.
    	 * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
    	 */
    	roundedRect: function(ctx, x, y, width, height, radius) {
    		if (radius) {
    			var r = Math.min(radius, height / 2, width / 2);
    			var left = x + r;
    			var top = y + r;
    			var right = x + width - r;
    			var bottom = y + height - r;

    			ctx.moveTo(x, top);
    			if (left < right && top < bottom) {
    				ctx.arc(left, top, r, -PI, -HALF_PI);
    				ctx.arc(right, top, r, -HALF_PI, 0);
    				ctx.arc(right, bottom, r, 0, HALF_PI);
    				ctx.arc(left, bottom, r, HALF_PI, PI);
    			} else if (left < right) {
    				ctx.moveTo(left, y);
    				ctx.arc(right, top, r, -HALF_PI, HALF_PI);
    				ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);
    			} else if (top < bottom) {
    				ctx.arc(left, top, r, -PI, 0);
    				ctx.arc(left, bottom, r, 0, PI);
    			} else {
    				ctx.arc(left, top, r, -PI, PI);
    			}
    			ctx.closePath();
    			ctx.moveTo(x, y);
    		} else {
    			ctx.rect(x, y, width, height);
    		}
    	},

    	drawPoint: function(ctx, style, radius, x, y, rotation) {
    		var type, xOffset, yOffset, size, cornerRadius;
    		var rad = (rotation || 0) * RAD_PER_DEG;

    		if (style && typeof style === 'object') {
    			type = style.toString();
    			if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
    				ctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);
    				return;
    			}
    		}

    		if (isNaN(radius) || radius <= 0) {
    			return;
    		}

    		ctx.beginPath();

    		switch (style) {
    		// Default includes circle
    		default:
    			ctx.arc(x, y, radius, 0, DOUBLE_PI);
    			ctx.closePath();
    			break;
    		case 'triangle':
    			ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    			rad += TWO_THIRDS_PI;
    			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    			rad += TWO_THIRDS_PI;
    			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    			ctx.closePath();
    			break;
    		case 'rectRounded':
    			// NOTE: the rounded rect implementation changed to use `arc` instead of
    			// `quadraticCurveTo` since it generates better results when rect is
    			// almost a circle. 0.516 (instead of 0.5) produces results with visually
    			// closer proportion to the previous impl and it is inscribed in the
    			// circle with `radius`. For more details, see the following PRs:
    			// https://github.com/chartjs/Chart.js/issues/5597
    			// https://github.com/chartjs/Chart.js/issues/5858
    			cornerRadius = radius * 0.516;
    			size = radius - cornerRadius;
    			xOffset = Math.cos(rad + QUARTER_PI) * size;
    			yOffset = Math.sin(rad + QUARTER_PI) * size;
    			ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
    			ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
    			ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
    			ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
    			ctx.closePath();
    			break;
    		case 'rect':
    			if (!rotation) {
    				size = Math.SQRT1_2 * radius;
    				ctx.rect(x - size, y - size, 2 * size, 2 * size);
    				break;
    			}
    			rad += QUARTER_PI;
    			/* falls through */
    		case 'rectRot':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			ctx.closePath();
    			break;
    		case 'crossRot':
    			rad += QUARTER_PI;
    			/* falls through */
    		case 'cross':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.moveTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			break;
    		case 'star':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.moveTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			rad += QUARTER_PI;
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.moveTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			break;
    		case 'line':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			break;
    		case 'dash':
    			ctx.moveTo(x, y);
    			ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
    			break;
    		}

    		ctx.fill();
    		ctx.stroke();
    	},

    	/**
    	 * Returns true if the point is inside the rectangle
    	 * @param {object} point - The point to test
    	 * @param {object} area - The rectangle
    	 * @returns {boolean}
    	 * @private
    	 */
    	_isPointInArea: function(point, area) {
    		var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.

    		return point.x > area.left - epsilon && point.x < area.right + epsilon &&
    			point.y > area.top - epsilon && point.y < area.bottom + epsilon;
    	},

    	clipArea: function(ctx, area) {
    		ctx.save();
    		ctx.beginPath();
    		ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
    		ctx.clip();
    	},

    	unclipArea: function(ctx) {
    		ctx.restore();
    	},

    	lineTo: function(ctx, previous, target, flip) {
    		var stepped = target.steppedLine;
    		if (stepped) {
    			if (stepped === 'middle') {
    				var midpoint = (previous.x + target.x) / 2.0;
    				ctx.lineTo(midpoint, flip ? target.y : previous.y);
    				ctx.lineTo(midpoint, flip ? previous.y : target.y);
    			} else if ((stepped === 'after' && !flip) || (stepped !== 'after' && flip)) {
    				ctx.lineTo(previous.x, target.y);
    			} else {
    				ctx.lineTo(target.x, previous.y);
    			}
    			ctx.lineTo(target.x, target.y);
    			return;
    		}

    		if (!target.tension) {
    			ctx.lineTo(target.x, target.y);
    			return;
    		}

    		ctx.bezierCurveTo(
    			flip ? previous.controlPointPreviousX : previous.controlPointNextX,
    			flip ? previous.controlPointPreviousY : previous.controlPointNextY,
    			flip ? target.controlPointNextX : target.controlPointPreviousX,
    			flip ? target.controlPointNextY : target.controlPointPreviousY,
    			target.x,
    			target.y);
    	}
    };

    var helpers_canvas = exports$1;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.
     * @namespace Chart.helpers.clear
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.clear = exports$1.clear;

    /**
     * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.
     * @namespace Chart.helpers.drawRoundedRectangle
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.drawRoundedRectangle = function(ctx) {
    	ctx.beginPath();
    	exports$1.roundedRect.apply(exports$1, arguments);
    };

    var defaults = {
    	/**
    	 * @private
    	 */
    	_set: function(scope, values) {
    		return helpers_core.merge(this[scope] || (this[scope] = {}), values);
    	}
    };

    defaults._set('global', {
    	defaultColor: 'rgba(0,0,0,0.1)',
    	defaultFontColor: '#666',
    	defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
    	defaultFontSize: 12,
    	defaultFontStyle: 'normal',
    	defaultLineHeight: 1.2,
    	showLines: true
    });

    var core_defaults = defaults;

    var valueOrDefault = helpers_core.valueOrDefault;

    /**
     * Converts the given font object into a CSS font string.
     * @param {object} font - A font object.
     * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
     * @private
     */
    function toFontString(font) {
    	if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {
    		return null;
    	}

    	return (font.style ? font.style + ' ' : '')
    		+ (font.weight ? font.weight + ' ' : '')
    		+ font.size + 'px '
    		+ font.family;
    }

    /**
     * @alias Chart.helpers.options
     * @namespace
     */
    var helpers_options = {
    	/**
    	 * Converts the given line height `value` in pixels for a specific font `size`.
    	 * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
    	 * @param {number} size - The font size (in pixels) used to resolve relative `value`.
    	 * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).
    	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
    	 * @since 2.7.0
    	 */
    	toLineHeight: function(value, size) {
    		var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
    		if (!matches || matches[1] === 'normal') {
    			return size * 1.2;
    		}

    		value = +matches[2];

    		switch (matches[3]) {
    		case 'px':
    			return value;
    		case '%':
    			value /= 100;
    			break;
    		default:
    			break;
    		}

    		return size * value;
    	},

    	/**
    	 * Converts the given value into a padding object with pre-computed width/height.
    	 * @param {number|object} value - If a number, set the value to all TRBL component,
    	 *  else, if and object, use defined properties and sets undefined ones to 0.
    	 * @returns {object} The padding values (top, right, bottom, left, width, height)
    	 * @since 2.7.0
    	 */
    	toPadding: function(value) {
    		var t, r, b, l;

    		if (helpers_core.isObject(value)) {
    			t = +value.top || 0;
    			r = +value.right || 0;
    			b = +value.bottom || 0;
    			l = +value.left || 0;
    		} else {
    			t = r = b = l = +value || 0;
    		}

    		return {
    			top: t,
    			right: r,
    			bottom: b,
    			left: l,
    			height: t + b,
    			width: l + r
    		};
    	},

    	/**
    	 * Parses font options and returns the font object.
    	 * @param {object} options - A object that contains font options to be parsed.
    	 * @return {object} The font object.
    	 * @todo Support font.* options and renamed to toFont().
    	 * @private
    	 */
    	_parseFont: function(options) {
    		var globalDefaults = core_defaults.global;
    		var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
    		var font = {
    			family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),
    			lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),
    			size: size,
    			style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),
    			weight: null,
    			string: ''
    		};

    		font.string = toFontString(font);
    		return font;
    	},

    	/**
    	 * Evaluates the given `inputs` sequentially and returns the first defined value.
    	 * @param {Array} inputs - An array of values, falling back to the last value.
    	 * @param {object} [context] - If defined and the current value is a function, the value
    	 * is called with `context` as first argument and the result becomes the new input.
    	 * @param {number} [index] - If defined and the current value is an array, the value
    	 * at `index` become the new input.
    	 * @since 2.7.0
    	 */
    	resolve: function(inputs, context, index) {
    		var i, ilen, value;

    		for (i = 0, ilen = inputs.length; i < ilen; ++i) {
    			value = inputs[i];
    			if (value === undefined) {
    				continue;
    			}
    			if (context !== undefined && typeof value === 'function') {
    				value = value(context);
    			}
    			if (index !== undefined && helpers_core.isArray(value)) {
    				value = value[index];
    			}
    			if (value !== undefined) {
    				return value;
    			}
    		}
    	}
    };

    var helpers$1 = helpers_core;
    var easing = helpers_easing;
    var canvas = helpers_canvas;
    var options = helpers_options;
    helpers$1.easing = easing;
    helpers$1.canvas = canvas;
    helpers$1.options = options;

    function interpolate(start, view, model, ease) {
    	var keys = Object.keys(model);
    	var i, ilen, key, actual, origin, target, type, c0, c1;

    	for (i = 0, ilen = keys.length; i < ilen; ++i) {
    		key = keys[i];

    		target = model[key];

    		// if a value is added to the model after pivot() has been called, the view
    		// doesn't contain it, so let's initialize the view to the target value.
    		if (!view.hasOwnProperty(key)) {
    			view[key] = target;
    		}

    		actual = view[key];

    		if (actual === target || key[0] === '_') {
    			continue;
    		}

    		if (!start.hasOwnProperty(key)) {
    			start[key] = actual;
    		}

    		origin = start[key];

    		type = typeof target;

    		if (type === typeof origin) {
    			if (type === 'string') {
    				c0 = chartjsColor(origin);
    				if (c0.valid) {
    					c1 = chartjsColor(target);
    					if (c1.valid) {
    						view[key] = c1.mix(c0, ease).rgbString();
    						continue;
    					}
    				}
    			} else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {
    				view[key] = origin + (target - origin) * ease;
    				continue;
    			}
    		}

    		view[key] = target;
    	}
    }

    var Element = function(configuration) {
    	helpers$1.extend(this, configuration);
    	this.initialize.apply(this, arguments);
    };

    helpers$1.extend(Element.prototype, {

    	initialize: function() {
    		this.hidden = false;
    	},

    	pivot: function() {
    		var me = this;
    		if (!me._view) {
    			me._view = helpers$1.clone(me._model);
    		}
    		me._start = {};
    		return me;
    	},

    	transition: function(ease) {
    		var me = this;
    		var model = me._model;
    		var start = me._start;
    		var view = me._view;

    		// No animation -> No Transition
    		if (!model || ease === 1) {
    			me._view = model;
    			me._start = null;
    			return me;
    		}

    		if (!view) {
    			view = me._view = {};
    		}

    		if (!start) {
    			start = me._start = {};
    		}

    		interpolate(start, view, model, ease);

    		return me;
    	},

    	tooltipPosition: function() {
    		return {
    			x: this._model.x,
    			y: this._model.y
    		};
    	},

    	hasValue: function() {
    		return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);
    	}
    });

    Element.extend = helpers$1.inherits;

    var core_element = Element;

    var exports$2 = core_element.extend({
    	chart: null, // the animation associated chart instance
    	currentStep: 0, // the current animation step
    	numSteps: 60, // default number of steps
    	easing: '', // the easing to use for this animation
    	render: null, // render function used by the animation service

    	onAnimationProgress: null, // user specified callback to fire on each step of the animation
    	onAnimationComplete: null, // user specified callback to fire when the animation finishes
    });

    var core_animation = exports$2;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.Animation instead
     * @prop Chart.Animation#animationObject
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     */
    Object.defineProperty(exports$2.prototype, 'animationObject', {
    	get: function() {
    		return this;
    	}
    });

    /**
     * Provided for backward compatibility, use Chart.Animation#chart instead
     * @prop Chart.Animation#chartInstance
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     */
    Object.defineProperty(exports$2.prototype, 'chartInstance', {
    	get: function() {
    		return this.chart;
    	},
    	set: function(value) {
    		this.chart = value;
    	}
    });

    core_defaults._set('global', {
    	animation: {
    		duration: 1000,
    		easing: 'easeOutQuart',
    		onProgress: helpers$1.noop,
    		onComplete: helpers$1.noop
    	}
    });

    var core_animations = {
    	animations: [],
    	request: null,

    	/**
    	 * @param {Chart} chart - The chart to animate.
    	 * @param {Chart.Animation} animation - The animation that we will animate.
    	 * @param {number} duration - The animation duration in ms.
    	 * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
    	 */
    	addAnimation: function(chart, animation, duration, lazy) {
    		var animations = this.animations;
    		var i, ilen;

    		animation.chart = chart;
    		animation.startTime = Date.now();
    		animation.duration = duration;

    		if (!lazy) {
    			chart.animating = true;
    		}

    		for (i = 0, ilen = animations.length; i < ilen; ++i) {
    			if (animations[i].chart === chart) {
    				animations[i] = animation;
    				return;
    			}
    		}

    		animations.push(animation);

    		// If there are no animations queued, manually kickstart a digest, for lack of a better word
    		if (animations.length === 1) {
    			this.requestAnimationFrame();
    		}
    	},

    	cancelAnimation: function(chart) {
    		var index = helpers$1.findIndex(this.animations, function(animation) {
    			return animation.chart === chart;
    		});

    		if (index !== -1) {
    			this.animations.splice(index, 1);
    			chart.animating = false;
    		}
    	},

    	requestAnimationFrame: function() {
    		var me = this;
    		if (me.request === null) {
    			// Skip animation frame requests until the active one is executed.
    			// This can happen when processing mouse events, e.g. 'mousemove'
    			// and 'mouseout' events will trigger multiple renders.
    			me.request = helpers$1.requestAnimFrame.call(window, function() {
    				me.request = null;
    				me.startDigest();
    			});
    		}
    	},

    	/**
    	 * @private
    	 */
    	startDigest: function() {
    		var me = this;

    		me.advance();

    		// Do we have more stuff to animate?
    		if (me.animations.length > 0) {
    			me.requestAnimationFrame();
    		}
    	},

    	/**
    	 * @private
    	 */
    	advance: function() {
    		var animations = this.animations;
    		var animation, chart, numSteps, nextStep;
    		var i = 0;

    		// 1 animation per chart, so we are looping charts here
    		while (i < animations.length) {
    			animation = animations[i];
    			chart = animation.chart;
    			numSteps = animation.numSteps;

    			// Make sure that currentStep starts at 1
    			// https://github.com/chartjs/Chart.js/issues/6104
    			nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;
    			animation.currentStep = Math.min(nextStep, numSteps);

    			helpers$1.callback(animation.render, [chart, animation], chart);
    			helpers$1.callback(animation.onAnimationProgress, [animation], chart);

    			if (animation.currentStep >= numSteps) {
    				helpers$1.callback(animation.onAnimationComplete, [animation], chart);
    				chart.animating = false;
    				animations.splice(i, 1);
    			} else {
    				++i;
    			}
    		}
    	}
    };

    var resolve = helpers$1.options.resolve;

    var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];

    /**
     * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
     * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
     * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
     */
    function listenArrayEvents(array, listener) {
    	if (array._chartjs) {
    		array._chartjs.listeners.push(listener);
    		return;
    	}

    	Object.defineProperty(array, '_chartjs', {
    		configurable: true,
    		enumerable: false,
    		value: {
    			listeners: [listener]
    		}
    	});

    	arrayEvents.forEach(function(key) {
    		var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
    		var base = array[key];

    		Object.defineProperty(array, key, {
    			configurable: true,
    			enumerable: false,
    			value: function() {
    				var args = Array.prototype.slice.call(arguments);
    				var res = base.apply(this, args);

    				helpers$1.each(array._chartjs.listeners, function(object) {
    					if (typeof object[method] === 'function') {
    						object[method].apply(object, args);
    					}
    				});

    				return res;
    			}
    		});
    	});
    }

    /**
     * Removes the given array event listener and cleanup extra attached properties (such as
     * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
     */
    function unlistenArrayEvents(array, listener) {
    	var stub = array._chartjs;
    	if (!stub) {
    		return;
    	}

    	var listeners = stub.listeners;
    	var index = listeners.indexOf(listener);
    	if (index !== -1) {
    		listeners.splice(index, 1);
    	}

    	if (listeners.length > 0) {
    		return;
    	}

    	arrayEvents.forEach(function(key) {
    		delete array[key];
    	});

    	delete array._chartjs;
    }

    // Base class for all dataset controllers (line, bar, etc)
    var DatasetController = function(chart, datasetIndex) {
    	this.initialize(chart, datasetIndex);
    };

    helpers$1.extend(DatasetController.prototype, {

    	/**
    	 * Element type used to generate a meta dataset (e.g. Chart.element.Line).
    	 * @type {Chart.core.element}
    	 */
    	datasetElementType: null,

    	/**
    	 * Element type used to generate a meta data (e.g. Chart.element.Point).
    	 * @type {Chart.core.element}
    	 */
    	dataElementType: null,

    	initialize: function(chart, datasetIndex) {
    		var me = this;
    		me.chart = chart;
    		me.index = datasetIndex;
    		me.linkScales();
    		me.addElements();
    	},

    	updateIndex: function(datasetIndex) {
    		this.index = datasetIndex;
    	},

    	linkScales: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var dataset = me.getDataset();

    		if (meta.xAxisID === null || !(meta.xAxisID in me.chart.scales)) {
    			meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;
    		}
    		if (meta.yAxisID === null || !(meta.yAxisID in me.chart.scales)) {
    			meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;
    		}
    	},

    	getDataset: function() {
    		return this.chart.data.datasets[this.index];
    	},

    	getMeta: function() {
    		return this.chart.getDatasetMeta(this.index);
    	},

    	getScaleForId: function(scaleID) {
    		return this.chart.scales[scaleID];
    	},

    	/**
    	 * @private
    	 */
    	_getValueScaleId: function() {
    		return this.getMeta().yAxisID;
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScaleId: function() {
    		return this.getMeta().xAxisID;
    	},

    	/**
    	 * @private
    	 */
    	_getValueScale: function() {
    		return this.getScaleForId(this._getValueScaleId());
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScale: function() {
    		return this.getScaleForId(this._getIndexScaleId());
    	},

    	reset: function() {
    		this.update(true);
    	},

    	/**
    	 * @private
    	 */
    	destroy: function() {
    		if (this._data) {
    			unlistenArrayEvents(this._data, this);
    		}
    	},

    	createMetaDataset: function() {
    		var me = this;
    		var type = me.datasetElementType;
    		return type && new type({
    			_chart: me.chart,
    			_datasetIndex: me.index
    		});
    	},

    	createMetaData: function(index) {
    		var me = this;
    		var type = me.dataElementType;
    		return type && new type({
    			_chart: me.chart,
    			_datasetIndex: me.index,
    			_index: index
    		});
    	},

    	addElements: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var data = me.getDataset().data || [];
    		var metaData = meta.data;
    		var i, ilen;

    		for (i = 0, ilen = data.length; i < ilen; ++i) {
    			metaData[i] = metaData[i] || me.createMetaData(i);
    		}

    		meta.dataset = meta.dataset || me.createMetaDataset();
    	},

    	addElementAndReset: function(index) {
    		var element = this.createMetaData(index);
    		this.getMeta().data.splice(index, 0, element);
    		this.updateElement(element, index, true);
    	},

    	buildOrUpdateElements: function() {
    		var me = this;
    		var dataset = me.getDataset();
    		var data = dataset.data || (dataset.data = []);

    		// In order to correctly handle data addition/deletion animation (an thus simulate
    		// real-time charts), we need to monitor these data modifications and synchronize
    		// the internal meta data accordingly.
    		if (me._data !== data) {
    			if (me._data) {
    				// This case happens when the user replaced the data array instance.
    				unlistenArrayEvents(me._data, me);
    			}

    			if (data && Object.isExtensible(data)) {
    				listenArrayEvents(data, me);
    			}
    			me._data = data;
    		}

    		// Re-sync meta data in case the user replaced the data array or if we missed
    		// any updates and so make sure that we handle number of datapoints changing.
    		me.resyncElements();
    	},

    	update: helpers$1.noop,

    	transition: function(easingValue) {
    		var meta = this.getMeta();
    		var elements = meta.data || [];
    		var ilen = elements.length;
    		var i = 0;

    		for (; i < ilen; ++i) {
    			elements[i].transition(easingValue);
    		}

    		if (meta.dataset) {
    			meta.dataset.transition(easingValue);
    		}
    	},

    	draw: function() {
    		var meta = this.getMeta();
    		var elements = meta.data || [];
    		var ilen = elements.length;
    		var i = 0;

    		if (meta.dataset) {
    			meta.dataset.draw();
    		}

    		for (; i < ilen; ++i) {
    			elements[i].draw();
    		}
    	},

    	removeHoverStyle: function(element) {
    		helpers$1.merge(element._model, element.$previousStyle || {});
    		delete element.$previousStyle;
    	},

    	setHoverStyle: function(element) {
    		var dataset = this.chart.data.datasets[element._datasetIndex];
    		var index = element._index;
    		var custom = element.custom || {};
    		var model = element._model;
    		var getHoverColor = helpers$1.getHoverColor;

    		element.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth
    		};

    		model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);
    		model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);
    		model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);
    	},

    	/**
    	 * @private
    	 */
    	resyncElements: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var data = me.getDataset().data;
    		var numMeta = meta.data.length;
    		var numData = data.length;

    		if (numData < numMeta) {
    			meta.data.splice(numData, numMeta - numData);
    		} else if (numData > numMeta) {
    			me.insertElements(numMeta, numData - numMeta);
    		}
    	},

    	/**
    	 * @private
    	 */
    	insertElements: function(start, count) {
    		for (var i = 0; i < count; ++i) {
    			this.addElementAndReset(start + i);
    		}
    	},

    	/**
    	 * @private
    	 */
    	onDataPush: function() {
    		var count = arguments.length;
    		this.insertElements(this.getDataset().data.length - count, count);
    	},

    	/**
    	 * @private
    	 */
    	onDataPop: function() {
    		this.getMeta().data.pop();
    	},

    	/**
    	 * @private
    	 */
    	onDataShift: function() {
    		this.getMeta().data.shift();
    	},

    	/**
    	 * @private
    	 */
    	onDataSplice: function(start, count) {
    		this.getMeta().data.splice(start, count);
    		this.insertElements(start, arguments.length - 2);
    	},

    	/**
    	 * @private
    	 */
    	onDataUnshift: function() {
    		this.insertElements(0, arguments.length);
    	}
    });

    DatasetController.extend = helpers$1.inherits;

    var core_datasetController = DatasetController;

    core_defaults._set('global', {
    	elements: {
    		arc: {
    			backgroundColor: core_defaults.global.defaultColor,
    			borderColor: '#fff',
    			borderWidth: 2,
    			borderAlign: 'center'
    		}
    	}
    });

    var element_arc = core_element.extend({
    	inLabelRange: function(mouseX) {
    		var vm = this._view;

    		if (vm) {
    			return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
    		}
    		return false;
    	},

    	inRange: function(chartX, chartY) {
    		var vm = this._view;

    		if (vm) {
    			var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {x: chartX, y: chartY});
    			var	angle = pointRelativePosition.angle;
    			var distance = pointRelativePosition.distance;

    			// Sanitise angle range
    			var startAngle = vm.startAngle;
    			var endAngle = vm.endAngle;
    			while (endAngle < startAngle) {
    				endAngle += 2.0 * Math.PI;
    			}
    			while (angle > endAngle) {
    				angle -= 2.0 * Math.PI;
    			}
    			while (angle < startAngle) {
    				angle += 2.0 * Math.PI;
    			}

    			// Check if within the range of the open/close angle
    			var betweenAngles = (angle >= startAngle && angle <= endAngle);
    			var withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);

    			return (betweenAngles && withinRadius);
    		}
    		return false;
    	},

    	getCenterPoint: function() {
    		var vm = this._view;
    		var halfAngle = (vm.startAngle + vm.endAngle) / 2;
    		var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
    		return {
    			x: vm.x + Math.cos(halfAngle) * halfRadius,
    			y: vm.y + Math.sin(halfAngle) * halfRadius
    		};
    	},

    	getArea: function() {
    		var vm = this._view;
    		return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
    	},

    	tooltipPosition: function() {
    		var vm = this._view;
    		var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);
    		var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;

    		return {
    			x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
    			y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
    		};
    	},

    	draw: function() {
    		var ctx = this._chart.ctx;
    		var vm = this._view;
    		var sA = vm.startAngle;
    		var eA = vm.endAngle;
    		var pixelMargin = (vm.borderAlign === 'inner') ? 0.33 : 0;
    		var angleMargin;

    		ctx.save();

    		ctx.beginPath();
    		ctx.arc(vm.x, vm.y, Math.max(vm.outerRadius - pixelMargin, 0), sA, eA);
    		ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);
    		ctx.closePath();

    		ctx.fillStyle = vm.backgroundColor;
    		ctx.fill();

    		if (vm.borderWidth) {
    			if (vm.borderAlign === 'inner') {
    				// Draw an inner border by cliping the arc and drawing a double-width border
    				// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
    				ctx.beginPath();
    				angleMargin = pixelMargin / vm.outerRadius;
    				ctx.arc(vm.x, vm.y, vm.outerRadius, sA - angleMargin, eA + angleMargin);
    				if (vm.innerRadius > pixelMargin) {
    					angleMargin = pixelMargin / vm.innerRadius;
    					ctx.arc(vm.x, vm.y, vm.innerRadius - pixelMargin, eA + angleMargin, sA - angleMargin, true);
    				} else {
    					ctx.arc(vm.x, vm.y, pixelMargin, eA + Math.PI / 2, sA - Math.PI / 2);
    				}
    				ctx.closePath();
    				ctx.clip();

    				ctx.beginPath();
    				ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
    				ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);
    				ctx.closePath();

    				ctx.lineWidth = vm.borderWidth * 2;
    				ctx.lineJoin = 'round';
    			} else {
    				ctx.lineWidth = vm.borderWidth;
    				ctx.lineJoin = 'bevel';
    			}

    			ctx.strokeStyle = vm.borderColor;
    			ctx.stroke();
    		}

    		ctx.restore();
    	}
    });

    var valueOrDefault$1 = helpers$1.valueOrDefault;

    var defaultColor = core_defaults.global.defaultColor;

    core_defaults._set('global', {
    	elements: {
    		line: {
    			tension: 0.4,
    			backgroundColor: defaultColor,
    			borderWidth: 3,
    			borderColor: defaultColor,
    			borderCapStyle: 'butt',
    			borderDash: [],
    			borderDashOffset: 0.0,
    			borderJoinStyle: 'miter',
    			capBezierPoints: true,
    			fill: true, // do we fill in the area between the line and its base axis
    		}
    	}
    });

    var element_line = core_element.extend({
    	draw: function() {
    		var me = this;
    		var vm = me._view;
    		var ctx = me._chart.ctx;
    		var spanGaps = vm.spanGaps;
    		var points = me._children.slice(); // clone array
    		var globalDefaults = core_defaults.global;
    		var globalOptionLineElements = globalDefaults.elements.line;
    		var lastDrawnIndex = -1;
    		var index, current, previous, currentVM;

    		// If we are looping, adding the first point again
    		if (me._loop && points.length) {
    			points.push(points[0]);
    		}

    		ctx.save();

    		// Stroke Line Options
    		ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;

    		// IE 9 and 10 do not support line dash
    		if (ctx.setLineDash) {
    			ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
    		}

    		ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);
    		ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
    		ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);
    		ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;

    		// Stroke Line
    		ctx.beginPath();
    		lastDrawnIndex = -1;

    		for (index = 0; index < points.length; ++index) {
    			current = points[index];
    			previous = helpers$1.previousItem(points, index);
    			currentVM = current._view;

    			// First point moves to it's starting position no matter what
    			if (index === 0) {
    				if (!currentVM.skip) {
    					ctx.moveTo(currentVM.x, currentVM.y);
    					lastDrawnIndex = index;
    				}
    			} else {
    				previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];

    				if (!currentVM.skip) {
    					if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
    						// There was a gap and this is the first point after the gap
    						ctx.moveTo(currentVM.x, currentVM.y);
    					} else {
    						// Line to next point
    						helpers$1.canvas.lineTo(ctx, previous._view, current._view);
    					}
    					lastDrawnIndex = index;
    				}
    			}
    		}

    		ctx.stroke();
    		ctx.restore();
    	}
    });

    var valueOrDefault$2 = helpers$1.valueOrDefault;

    var defaultColor$1 = core_defaults.global.defaultColor;

    core_defaults._set('global', {
    	elements: {
    		point: {
    			radius: 3,
    			pointStyle: 'circle',
    			backgroundColor: defaultColor$1,
    			borderColor: defaultColor$1,
    			borderWidth: 1,
    			// Hover
    			hitRadius: 1,
    			hoverRadius: 4,
    			hoverBorderWidth: 1
    		}
    	}
    });

    function xRange(mouseX) {
    	var vm = this._view;
    	return vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;
    }

    function yRange(mouseY) {
    	var vm = this._view;
    	return vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;
    }

    var element_point = core_element.extend({
    	inRange: function(mouseX, mouseY) {
    		var vm = this._view;
    		return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
    	},

    	inLabelRange: xRange,
    	inXRange: xRange,
    	inYRange: yRange,

    	getCenterPoint: function() {
    		var vm = this._view;
    		return {
    			x: vm.x,
    			y: vm.y
    		};
    	},

    	getArea: function() {
    		return Math.PI * Math.pow(this._view.radius, 2);
    	},

    	tooltipPosition: function() {
    		var vm = this._view;
    		return {
    			x: vm.x,
    			y: vm.y,
    			padding: vm.radius + vm.borderWidth
    		};
    	},

    	draw: function(chartArea) {
    		var vm = this._view;
    		var ctx = this._chart.ctx;
    		var pointStyle = vm.pointStyle;
    		var rotation = vm.rotation;
    		var radius = vm.radius;
    		var x = vm.x;
    		var y = vm.y;
    		var globalDefaults = core_defaults.global;
    		var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow

    		if (vm.skip) {
    			return;
    		}

    		// Clipping for Points.
    		if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {
    			ctx.strokeStyle = vm.borderColor || defaultColor;
    			ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);
    			ctx.fillStyle = vm.backgroundColor || defaultColor;
    			helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);
    		}
    	}
    });

    var defaultColor$2 = core_defaults.global.defaultColor;

    core_defaults._set('global', {
    	elements: {
    		rectangle: {
    			backgroundColor: defaultColor$2,
    			borderColor: defaultColor$2,
    			borderSkipped: 'bottom',
    			borderWidth: 0
    		}
    	}
    });

    function isVertical(vm) {
    	return vm && vm.width !== undefined;
    }

    /**
     * Helper function to get the bounds of the bar regardless of the orientation
     * @param bar {Chart.Element.Rectangle} the bar
     * @return {Bounds} bounds of the bar
     * @private
     */
    function getBarBounds(vm) {
    	var x1, x2, y1, y2, half;

    	if (isVertical(vm)) {
    		half = vm.width / 2;
    		x1 = vm.x - half;
    		x2 = vm.x + half;
    		y1 = Math.min(vm.y, vm.base);
    		y2 = Math.max(vm.y, vm.base);
    	} else {
    		half = vm.height / 2;
    		x1 = Math.min(vm.x, vm.base);
    		x2 = Math.max(vm.x, vm.base);
    		y1 = vm.y - half;
    		y2 = vm.y + half;
    	}

    	return {
    		left: x1,
    		top: y1,
    		right: x2,
    		bottom: y2
    	};
    }

    function swap(orig, v1, v2) {
    	return orig === v1 ? v2 : orig === v2 ? v1 : orig;
    }

    function parseBorderSkipped(vm) {
    	var edge = vm.borderSkipped;
    	var res = {};

    	if (!edge) {
    		return res;
    	}

    	if (vm.horizontal) {
    		if (vm.base > vm.x) {
    			edge = swap(edge, 'left', 'right');
    		}
    	} else if (vm.base < vm.y) {
    		edge = swap(edge, 'bottom', 'top');
    	}

    	res[edge] = true;
    	return res;
    }

    function parseBorderWidth(vm, maxW, maxH) {
    	var value = vm.borderWidth;
    	var skip = parseBorderSkipped(vm);
    	var t, r, b, l;

    	if (helpers$1.isObject(value)) {
    		t = +value.top || 0;
    		r = +value.right || 0;
    		b = +value.bottom || 0;
    		l = +value.left || 0;
    	} else {
    		t = r = b = l = +value || 0;
    	}

    	return {
    		t: skip.top || (t < 0) ? 0 : t > maxH ? maxH : t,
    		r: skip.right || (r < 0) ? 0 : r > maxW ? maxW : r,
    		b: skip.bottom || (b < 0) ? 0 : b > maxH ? maxH : b,
    		l: skip.left || (l < 0) ? 0 : l > maxW ? maxW : l
    	};
    }

    function boundingRects(vm) {
    	var bounds = getBarBounds(vm);
    	var width = bounds.right - bounds.left;
    	var height = bounds.bottom - bounds.top;
    	var border = parseBorderWidth(vm, width / 2, height / 2);

    	return {
    		outer: {
    			x: bounds.left,
    			y: bounds.top,
    			w: width,
    			h: height
    		},
    		inner: {
    			x: bounds.left + border.l,
    			y: bounds.top + border.t,
    			w: width - border.l - border.r,
    			h: height - border.t - border.b
    		}
    	};
    }

    function inRange(vm, x, y) {
    	var skipX = x === null;
    	var skipY = y === null;
    	var bounds = !vm || (skipX && skipY) ? false : getBarBounds(vm);

    	return bounds
    		&& (skipX || x >= bounds.left && x <= bounds.right)
    		&& (skipY || y >= bounds.top && y <= bounds.bottom);
    }

    var element_rectangle = core_element.extend({
    	draw: function() {
    		var ctx = this._chart.ctx;
    		var vm = this._view;
    		var rects = boundingRects(vm);
    		var outer = rects.outer;
    		var inner = rects.inner;

    		ctx.fillStyle = vm.backgroundColor;
    		ctx.fillRect(outer.x, outer.y, outer.w, outer.h);

    		if (outer.w === inner.w && outer.h === inner.h) {
    			return;
    		}

    		ctx.save();
    		ctx.beginPath();
    		ctx.rect(outer.x, outer.y, outer.w, outer.h);
    		ctx.clip();
    		ctx.fillStyle = vm.borderColor;
    		ctx.rect(inner.x, inner.y, inner.w, inner.h);
    		ctx.fill('evenodd');
    		ctx.restore();
    	},

    	height: function() {
    		var vm = this._view;
    		return vm.base - vm.y;
    	},

    	inRange: function(mouseX, mouseY) {
    		return inRange(this._view, mouseX, mouseY);
    	},

    	inLabelRange: function(mouseX, mouseY) {
    		var vm = this._view;
    		return isVertical(vm)
    			? inRange(vm, mouseX, null)
    			: inRange(vm, null, mouseY);
    	},

    	inXRange: function(mouseX) {
    		return inRange(this._view, mouseX, null);
    	},

    	inYRange: function(mouseY) {
    		return inRange(this._view, null, mouseY);
    	},

    	getCenterPoint: function() {
    		var vm = this._view;
    		var x, y;
    		if (isVertical(vm)) {
    			x = vm.x;
    			y = (vm.y + vm.base) / 2;
    		} else {
    			x = (vm.x + vm.base) / 2;
    			y = vm.y;
    		}

    		return {x: x, y: y};
    	},

    	getArea: function() {
    		var vm = this._view;

    		return isVertical(vm)
    			? vm.width * Math.abs(vm.y - vm.base)
    			: vm.height * Math.abs(vm.x - vm.base);
    	},

    	tooltipPosition: function() {
    		var vm = this._view;
    		return {
    			x: vm.x,
    			y: vm.y
    		};
    	}
    });

    var elements = {};
    var Arc = element_arc;
    var Line = element_line;
    var Point = element_point;
    var Rectangle = element_rectangle;
    elements.Arc = Arc;
    elements.Line = Line;
    elements.Point = Point;
    elements.Rectangle = Rectangle;

    var resolve$1 = helpers$1.options.resolve;

    core_defaults._set('bar', {
    	hover: {
    		mode: 'label'
    	},

    	scales: {
    		xAxes: [{
    			type: 'category',
    			categoryPercentage: 0.8,
    			barPercentage: 0.9,
    			offset: true,
    			gridLines: {
    				offsetGridLines: true
    			}
    		}],

    		yAxes: [{
    			type: 'linear'
    		}]
    	}
    });

    /**
     * Computes the "optimal" sample size to maintain bars equally sized while preventing overlap.
     * @private
     */
    function computeMinSampleSize(scale, pixels) {
    	var min = scale.isHorizontal() ? scale.width : scale.height;
    	var ticks = scale.getTicks();
    	var prev, curr, i, ilen;

    	for (i = 1, ilen = pixels.length; i < ilen; ++i) {
    		min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));
    	}

    	for (i = 0, ilen = ticks.length; i < ilen; ++i) {
    		curr = scale.getPixelForTick(i);
    		min = i > 0 ? Math.min(min, curr - prev) : min;
    		prev = curr;
    	}

    	return min;
    }

    /**
     * Computes an "ideal" category based on the absolute bar thickness or, if undefined or null,
     * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This
     * mode currently always generates bars equally sized (until we introduce scriptable options?).
     * @private
     */
    function computeFitCategoryTraits(index, ruler, options) {
    	var thickness = options.barThickness;
    	var count = ruler.stackCount;
    	var curr = ruler.pixels[index];
    	var size, ratio;

    	if (helpers$1.isNullOrUndef(thickness)) {
    		size = ruler.min * options.categoryPercentage;
    		ratio = options.barPercentage;
    	} else {
    		// When bar thickness is enforced, category and bar percentages are ignored.
    		// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')
    		// and deprecate barPercentage since this value is ignored when thickness is absolute.
    		size = thickness * count;
    		ratio = 1;
    	}

    	return {
    		chunk: size / count,
    		ratio: ratio,
    		start: curr - (size / 2)
    	};
    }

    /**
     * Computes an "optimal" category that globally arranges bars side by side (no gap when
     * percentage options are 1), based on the previous and following categories. This mode
     * generates bars with different widths when data are not evenly spaced.
     * @private
     */
    function computeFlexCategoryTraits(index, ruler, options) {
    	var pixels = ruler.pixels;
    	var curr = pixels[index];
    	var prev = index > 0 ? pixels[index - 1] : null;
    	var next = index < pixels.length - 1 ? pixels[index + 1] : null;
    	var percent = options.categoryPercentage;
    	var start, size;

    	if (prev === null) {
    		// first data: its size is double based on the next point or,
    		// if it's also the last data, we use the scale size.
    		prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
    	}

    	if (next === null) {
    		// last data: its size is also double based on the previous point.
    		next = curr + curr - prev;
    	}

    	start = curr - (curr - Math.min(prev, next)) / 2 * percent;
    	size = Math.abs(next - prev) / 2 * percent;

    	return {
    		chunk: size / ruler.stackCount,
    		ratio: options.barPercentage,
    		start: start
    	};
    }

    var controller_bar = core_datasetController.extend({

    	dataElementType: elements.Rectangle,

    	initialize: function() {
    		var me = this;
    		var meta;

    		core_datasetController.prototype.initialize.apply(me, arguments);

    		meta = me.getMeta();
    		meta.stack = me.getDataset().stack;
    		meta.bar = true;
    	},

    	update: function(reset) {
    		var me = this;
    		var rects = me.getMeta().data;
    		var i, ilen;

    		me._ruler = me.getRuler();

    		for (i = 0, ilen = rects.length; i < ilen; ++i) {
    			me.updateElement(rects[i], i, reset);
    		}
    	},

    	updateElement: function(rectangle, index, reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var dataset = me.getDataset();
    		var options = me._resolveElementOptions(rectangle, index);

    		rectangle._xScale = me.getScaleForId(meta.xAxisID);
    		rectangle._yScale = me.getScaleForId(meta.yAxisID);
    		rectangle._datasetIndex = me.index;
    		rectangle._index = index;
    		rectangle._model = {
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderSkipped: options.borderSkipped,
    			borderWidth: options.borderWidth,
    			datasetLabel: dataset.label,
    			label: me.chart.data.labels[index]
    		};

    		me._updateElementGeometry(rectangle, index, reset);

    		rectangle.pivot();
    	},

    	/**
    	 * @private
    	 */
    	_updateElementGeometry: function(rectangle, index, reset) {
    		var me = this;
    		var model = rectangle._model;
    		var vscale = me._getValueScale();
    		var base = vscale.getBasePixel();
    		var horizontal = vscale.isHorizontal();
    		var ruler = me._ruler || me.getRuler();
    		var vpixels = me.calculateBarValuePixels(me.index, index);
    		var ipixels = me.calculateBarIndexPixels(me.index, index, ruler);

    		model.horizontal = horizontal;
    		model.base = reset ? base : vpixels.base;
    		model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
    		model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
    		model.height = horizontal ? ipixels.size : undefined;
    		model.width = horizontal ? undefined : ipixels.size;
    	},

    	/**
    	 * Returns the stacks based on groups and bar visibility.
    	 * @param {number} [last] - The dataset index
    	 * @returns {string[]} The list of stack IDs
    	 * @private
    	 */
    	_getStacks: function(last) {
    		var me = this;
    		var chart = me.chart;
    		var scale = me._getIndexScale();
    		var stacked = scale.options.stacked;
    		var ilen = last === undefined ? chart.data.datasets.length : last + 1;
    		var stacks = [];
    		var i, meta;

    		for (i = 0; i < ilen; ++i) {
    			meta = chart.getDatasetMeta(i);
    			if (meta.bar && chart.isDatasetVisible(i) &&
    				(stacked === false ||
    				(stacked === true && stacks.indexOf(meta.stack) === -1) ||
    				(stacked === undefined && (meta.stack === undefined || stacks.indexOf(meta.stack) === -1)))) {
    				stacks.push(meta.stack);
    			}
    		}

    		return stacks;
    	},

    	/**
    	 * Returns the effective number of stacks based on groups and bar visibility.
    	 * @private
    	 */
    	getStackCount: function() {
    		return this._getStacks().length;
    	},

    	/**
    	 * Returns the stack index for the given dataset based on groups and bar visibility.
    	 * @param {number} [datasetIndex] - The dataset index
    	 * @param {string} [name] - The stack name to find
    	 * @returns {number} The stack index
    	 * @private
    	 */
    	getStackIndex: function(datasetIndex, name) {
    		var stacks = this._getStacks(datasetIndex);
    		var index = (name !== undefined)
    			? stacks.indexOf(name)
    			: -1; // indexOf returns -1 if element is not present

    		return (index === -1)
    			? stacks.length - 1
    			: index;
    	},

    	/**
    	 * @private
    	 */
    	getRuler: function() {
    		var me = this;
    		var scale = me._getIndexScale();
    		var stackCount = me.getStackCount();
    		var datasetIndex = me.index;
    		var isHorizontal = scale.isHorizontal();
    		var start = isHorizontal ? scale.left : scale.top;
    		var end = start + (isHorizontal ? scale.width : scale.height);
    		var pixels = [];
    		var i, ilen, min;

    		for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
    			pixels.push(scale.getPixelForValue(null, i, datasetIndex));
    		}

    		min = helpers$1.isNullOrUndef(scale.options.barThickness)
    			? computeMinSampleSize(scale, pixels)
    			: -1;

    		return {
    			min: min,
    			pixels: pixels,
    			start: start,
    			end: end,
    			stackCount: stackCount,
    			scale: scale
    		};
    	},

    	/**
    	 * Note: pixel values are not clamped to the scale area.
    	 * @private
    	 */
    	calculateBarValuePixels: function(datasetIndex, index) {
    		var me = this;
    		var chart = me.chart;
    		var meta = me.getMeta();
    		var scale = me._getValueScale();
    		var isHorizontal = scale.isHorizontal();
    		var datasets = chart.data.datasets;
    		var value = +scale.getRightValue(datasets[datasetIndex].data[index]);
    		var minBarLength = scale.options.minBarLength;
    		var stacked = scale.options.stacked;
    		var stack = meta.stack;
    		var start = 0;
    		var i, imeta, ivalue, base, head, size;

    		if (stacked || (stacked === undefined && stack !== undefined)) {
    			for (i = 0; i < datasetIndex; ++i) {
    				imeta = chart.getDatasetMeta(i);

    				if (imeta.bar &&
    					imeta.stack === stack &&
    					imeta.controller._getValueScaleId() === scale.id &&
    					chart.isDatasetVisible(i)) {

    					ivalue = +scale.getRightValue(datasets[i].data[index]);
    					if ((value < 0 && ivalue < 0) || (value >= 0 && ivalue > 0)) {
    						start += ivalue;
    					}
    				}
    			}
    		}

    		base = scale.getPixelForValue(start);
    		head = scale.getPixelForValue(start + value);
    		size = head - base;

    		if (minBarLength !== undefined && Math.abs(size) < minBarLength) {
    			size = minBarLength;
    			if (value >= 0 && !isHorizontal || value < 0 && isHorizontal) {
    				head = base - minBarLength;
    			} else {
    				head = base + minBarLength;
    			}
    		}

    		return {
    			size: size,
    			base: base,
    			head: head,
    			center: head + size / 2
    		};
    	},

    	/**
    	 * @private
    	 */
    	calculateBarIndexPixels: function(datasetIndex, index, ruler) {
    		var me = this;
    		var options = ruler.scale.options;
    		var range = options.barThickness === 'flex'
    			? computeFlexCategoryTraits(index, ruler, options)
    			: computeFitCategoryTraits(index, ruler, options);

    		var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
    		var center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
    		var size = Math.min(
    			helpers$1.valueOrDefault(options.maxBarThickness, Infinity),
    			range.chunk * range.ratio);

    		return {
    			base: center - size / 2,
    			head: center + size / 2,
    			center: center,
    			size: size
    		};
    	},

    	draw: function() {
    		var me = this;
    		var chart = me.chart;
    		var scale = me._getValueScale();
    		var rects = me.getMeta().data;
    		var dataset = me.getDataset();
    		var ilen = rects.length;
    		var i = 0;

    		helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);

    		for (; i < ilen; ++i) {
    			if (!isNaN(scale.getRightValue(dataset.data[i]))) {
    				rects[i].draw();
    			}
    		}

    		helpers$1.canvas.unclipArea(chart.ctx);
    	},

    	/**
    	 * @private
    	 */
    	_resolveElementOptions: function(rectangle, index) {
    		var me = this;
    		var chart = me.chart;
    		var datasets = chart.data.datasets;
    		var dataset = datasets[me.index];
    		var custom = rectangle.custom || {};
    		var options = chart.options.elements.rectangle;
    		var values = {};
    		var i, ilen, key;

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataIndex: index,
    			dataset: dataset,
    			datasetIndex: me.index
    		};

    		var keys = [
    			'backgroundColor',
    			'borderColor',
    			'borderSkipped',
    			'borderWidth'
    		];

    		for (i = 0, ilen = keys.length; i < ilen; ++i) {
    			key = keys[i];
    			values[key] = resolve$1([
    				custom[key],
    				dataset[key],
    				options[key]
    			], context, index);
    		}

    		return values;
    	}
    });

    var valueOrDefault$3 = helpers$1.valueOrDefault;
    var resolve$2 = helpers$1.options.resolve;

    core_defaults._set('bubble', {
    	hover: {
    		mode: 'single'
    	},

    	scales: {
    		xAxes: [{
    			type: 'linear', // bubble should probably use a linear scale by default
    			position: 'bottom',
    			id: 'x-axis-0' // need an ID so datasets can reference the scale
    		}],
    		yAxes: [{
    			type: 'linear',
    			position: 'left',
    			id: 'y-axis-0'
    		}]
    	},

    	tooltips: {
    		callbacks: {
    			title: function() {
    				// Title doesn't make sense for scatter since we format the data as a point
    				return '';
    			},
    			label: function(item, data) {
    				var datasetLabel = data.datasets[item.datasetIndex].label || '';
    				var dataPoint = data.datasets[item.datasetIndex].data[item.index];
    				return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';
    			}
    		}
    	}
    });

    var controller_bubble = core_datasetController.extend({
    	/**
    	 * @protected
    	 */
    	dataElementType: elements.Point,

    	/**
    	 * @protected
    	 */
    	update: function(reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var points = meta.data;

    		// Update Points
    		helpers$1.each(points, function(point, index) {
    			me.updateElement(point, index, reset);
    		});
    	},

    	/**
    	 * @protected
    	 */
    	updateElement: function(point, index, reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var custom = point.custom || {};
    		var xScale = me.getScaleForId(meta.xAxisID);
    		var yScale = me.getScaleForId(meta.yAxisID);
    		var options = me._resolveElementOptions(point, index);
    		var data = me.getDataset().data[index];
    		var dsIndex = me.index;

    		var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);
    		var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);

    		point._xScale = xScale;
    		point._yScale = yScale;
    		point._options = options;
    		point._datasetIndex = dsIndex;
    		point._index = index;
    		point._model = {
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderWidth: options.borderWidth,
    			hitRadius: options.hitRadius,
    			pointStyle: options.pointStyle,
    			rotation: options.rotation,
    			radius: reset ? 0 : options.radius,
    			skip: custom.skip || isNaN(x) || isNaN(y),
    			x: x,
    			y: y,
    		};

    		point.pivot();
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(point) {
    		var model = point._model;
    		var options = point._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		point.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    			radius: model.radius
    		};

    		model.backgroundColor = valueOrDefault$3(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$3(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$3(options.hoverBorderWidth, options.borderWidth);
    		model.radius = options.radius + options.hoverRadius;
    	},

    	/**
    	 * @private
    	 */
    	_resolveElementOptions: function(point, index) {
    		var me = this;
    		var chart = me.chart;
    		var datasets = chart.data.datasets;
    		var dataset = datasets[me.index];
    		var custom = point.custom || {};
    		var options = chart.options.elements.point;
    		var data = dataset.data[index];
    		var values = {};
    		var i, ilen, key;

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataIndex: index,
    			dataset: dataset,
    			datasetIndex: me.index
    		};

    		var keys = [
    			'backgroundColor',
    			'borderColor',
    			'borderWidth',
    			'hoverBackgroundColor',
    			'hoverBorderColor',
    			'hoverBorderWidth',
    			'hoverRadius',
    			'hitRadius',
    			'pointStyle',
    			'rotation'
    		];

    		for (i = 0, ilen = keys.length; i < ilen; ++i) {
    			key = keys[i];
    			values[key] = resolve$2([
    				custom[key],
    				dataset[key],
    				options[key]
    			], context, index);
    		}

    		// Custom radius resolution
    		values.radius = resolve$2([
    			custom.radius,
    			data ? data.r : undefined,
    			dataset.radius,
    			options.radius
    		], context, index);

    		return values;
    	}
    });

    var resolve$3 = helpers$1.options.resolve;
    var valueOrDefault$4 = helpers$1.valueOrDefault;

    core_defaults._set('doughnut', {
    	animation: {
    		// Boolean - Whether we animate the rotation of the Doughnut
    		animateRotate: true,
    		// Boolean - Whether we animate scaling the Doughnut from the centre
    		animateScale: false
    	},
    	hover: {
    		mode: 'single'
    	},
    	legendCallback: function(chart) {
    		var text = [];
    		text.push('<ul class="' + chart.id + '-legend">');

    		var data = chart.data;
    		var datasets = data.datasets;
    		var labels = data.labels;

    		if (datasets.length) {
    			for (var i = 0; i < datasets[0].data.length; ++i) {
    				text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
    				if (labels[i]) {
    					text.push(labels[i]);
    				}
    				text.push('</li>');
    			}
    		}

    		text.push('</ul>');
    		return text.join('');
    	},
    	legend: {
    		labels: {
    			generateLabels: function(chart) {
    				var data = chart.data;
    				if (data.labels.length && data.datasets.length) {
    					return data.labels.map(function(label, i) {
    						var meta = chart.getDatasetMeta(0);
    						var ds = data.datasets[0];
    						var arc = meta.data[i];
    						var custom = arc && arc.custom || {};
    						var arcOpts = chart.options.elements.arc;
    						var fill = resolve$3([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);
    						var stroke = resolve$3([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);
    						var bw = resolve$3([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);

    						return {
    							text: label,
    							fillStyle: fill,
    							strokeStyle: stroke,
    							lineWidth: bw,
    							hidden: isNaN(ds.data[i]) || meta.data[i].hidden,

    							// Extra data used for toggling the correct item
    							index: i
    						};
    					});
    				}
    				return [];
    			}
    		},

    		onClick: function(e, legendItem) {
    			var index = legendItem.index;
    			var chart = this.chart;
    			var i, ilen, meta;

    			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
    				meta = chart.getDatasetMeta(i);
    				// toggle visibility of index if exists
    				if (meta.data[index]) {
    					meta.data[index].hidden = !meta.data[index].hidden;
    				}
    			}

    			chart.update();
    		}
    	},

    	// The percentage of the chart that we cut out of the middle.
    	cutoutPercentage: 50,

    	// The rotation of the chart, where the first data arc begins.
    	rotation: Math.PI * -0.5,

    	// The total circumference of the chart.
    	circumference: Math.PI * 2.0,

    	// Need to override these to give a nice default
    	tooltips: {
    		callbacks: {
    			title: function() {
    				return '';
    			},
    			label: function(tooltipItem, data) {
    				var dataLabel = data.labels[tooltipItem.index];
    				var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

    				if (helpers$1.isArray(dataLabel)) {
    					// show value on first line of multiline label
    					// need to clone because we are changing the value
    					dataLabel = dataLabel.slice();
    					dataLabel[0] += value;
    				} else {
    					dataLabel += value;
    				}

    				return dataLabel;
    			}
    		}
    	}
    });

    var controller_doughnut = core_datasetController.extend({

    	dataElementType: elements.Arc,

    	linkScales: helpers$1.noop,

    	// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
    	getRingIndex: function(datasetIndex) {
    		var ringIndex = 0;

    		for (var j = 0; j < datasetIndex; ++j) {
    			if (this.chart.isDatasetVisible(j)) {
    				++ringIndex;
    			}
    		}

    		return ringIndex;
    	},

    	update: function(reset) {
    		var me = this;
    		var chart = me.chart;
    		var chartArea = chart.chartArea;
    		var opts = chart.options;
    		var availableWidth = chartArea.right - chartArea.left;
    		var availableHeight = chartArea.bottom - chartArea.top;
    		var minSize = Math.min(availableWidth, availableHeight);
    		var offset = {x: 0, y: 0};
    		var meta = me.getMeta();
    		var arcs = meta.data;
    		var cutoutPercentage = opts.cutoutPercentage;
    		var circumference = opts.circumference;
    		var chartWeight = me._getRingWeight(me.index);
    		var i, ilen;

    		// If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc
    		if (circumference < Math.PI * 2.0) {
    			var startAngle = opts.rotation % (Math.PI * 2.0);
    			startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);
    			var endAngle = startAngle + circumference;
    			var start = {x: Math.cos(startAngle), y: Math.sin(startAngle)};
    			var end = {x: Math.cos(endAngle), y: Math.sin(endAngle)};
    			var contains0 = (startAngle <= 0 && endAngle >= 0) || (startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle);
    			var contains90 = (startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle);
    			var contains180 = (startAngle <= -Math.PI && -Math.PI <= endAngle) || (startAngle <= Math.PI && Math.PI <= endAngle);
    			var contains270 = (startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle);
    			var cutout = cutoutPercentage / 100.0;
    			var min = {x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)), y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))};
    			var max = {x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)), y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))};
    			var size = {width: (max.x - min.x) * 0.5, height: (max.y - min.y) * 0.5};
    			minSize = Math.min(availableWidth / size.width, availableHeight / size.height);
    			offset = {x: (max.x + min.x) * -0.5, y: (max.y + min.y) * -0.5};
    		}

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			arcs[i]._options = me._resolveElementOptions(arcs[i], i);
    		}

    		chart.borderWidth = me.getMaxBorderWidth();
    		chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);
    		chart.innerRadius = Math.max(cutoutPercentage ? (chart.outerRadius / 100) * (cutoutPercentage) : 0, 0);
    		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);
    		chart.offsetX = offset.x * chart.outerRadius;
    		chart.offsetY = offset.y * chart.outerRadius;

    		meta.total = me.calculateTotal();

    		me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);
    		me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			me.updateElement(arcs[i], i, reset);
    		}
    	},

    	updateElement: function(arc, index, reset) {
    		var me = this;
    		var chart = me.chart;
    		var chartArea = chart.chartArea;
    		var opts = chart.options;
    		var animationOpts = opts.animation;
    		var centerX = (chartArea.left + chartArea.right) / 2;
    		var centerY = (chartArea.top + chartArea.bottom) / 2;
    		var startAngle = opts.rotation; // non reset case handled later
    		var endAngle = opts.rotation; // non reset case handled later
    		var dataset = me.getDataset();
    		var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI));
    		var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
    		var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
    		var options = arc._options || {};

    		helpers$1.extend(arc, {
    			// Utility
    			_datasetIndex: me.index,
    			_index: index,

    			// Desired view properties
    			_model: {
    				backgroundColor: options.backgroundColor,
    				borderColor: options.borderColor,
    				borderWidth: options.borderWidth,
    				borderAlign: options.borderAlign,
    				x: centerX + chart.offsetX,
    				y: centerY + chart.offsetY,
    				startAngle: startAngle,
    				endAngle: endAngle,
    				circumference: circumference,
    				outerRadius: outerRadius,
    				innerRadius: innerRadius,
    				label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
    			}
    		});

    		var model = arc._model;

    		// Set correct angles if not resetting
    		if (!reset || !animationOpts.animateRotate) {
    			if (index === 0) {
    				model.startAngle = opts.rotation;
    			} else {
    				model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
    			}

    			model.endAngle = model.startAngle + model.circumference;
    		}

    		arc.pivot();
    	},

    	calculateTotal: function() {
    		var dataset = this.getDataset();
    		var meta = this.getMeta();
    		var total = 0;
    		var value;

    		helpers$1.each(meta.data, function(element, index) {
    			value = dataset.data[index];
    			if (!isNaN(value) && !element.hidden) {
    				total += Math.abs(value);
    			}
    		});

    		/* if (total === 0) {
    			total = NaN;
    		}*/

    		return total;
    	},

    	calculateCircumference: function(value) {
    		var total = this.getMeta().total;
    		if (total > 0 && !isNaN(value)) {
    			return (Math.PI * 2.0) * (Math.abs(value) / total);
    		}
    		return 0;
    	},

    	// gets the max border or hover width to properly scale pie charts
    	getMaxBorderWidth: function(arcs) {
    		var me = this;
    		var max = 0;
    		var chart = me.chart;
    		var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;

    		if (!arcs) {
    			// Find the outmost visible dataset
    			for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
    				if (chart.isDatasetVisible(i)) {
    					meta = chart.getDatasetMeta(i);
    					arcs = meta.data;
    					if (i !== me.index) {
    						controller = meta.controller;
    					}
    					break;
    				}
    			}
    		}

    		if (!arcs) {
    			return 0;
    		}

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			arc = arcs[i];
    			options = controller ? controller._resolveElementOptions(arc, i) : arc._options;
    			if (options.borderAlign !== 'inner') {
    				borderWidth = options.borderWidth;
    				hoverWidth = options.hoverBorderWidth;

    				max = borderWidth > max ? borderWidth : max;
    				max = hoverWidth > max ? hoverWidth : max;
    			}
    		}
    		return max;
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(arc) {
    		var model = arc._model;
    		var options = arc._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		arc.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    		};

    		model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);
    	},

    	/**
    	 * @private
    	 */
    	_resolveElementOptions: function(arc, index) {
    		var me = this;
    		var chart = me.chart;
    		var dataset = me.getDataset();
    		var custom = arc.custom || {};
    		var options = chart.options.elements.arc;
    		var values = {};
    		var i, ilen, key;

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataIndex: index,
    			dataset: dataset,
    			datasetIndex: me.index
    		};

    		var keys = [
    			'backgroundColor',
    			'borderColor',
    			'borderWidth',
    			'borderAlign',
    			'hoverBackgroundColor',
    			'hoverBorderColor',
    			'hoverBorderWidth',
    		];

    		for (i = 0, ilen = keys.length; i < ilen; ++i) {
    			key = keys[i];
    			values[key] = resolve$3([
    				custom[key],
    				dataset[key],
    				options[key]
    			], context, index);
    		}

    		return values;
    	},

    	/**
    	 * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly
    	 * @private
    	 */
    	_getRingWeightOffset: function(datasetIndex) {
    		var ringWeightOffset = 0;

    		for (var i = 0; i < datasetIndex; ++i) {
    			if (this.chart.isDatasetVisible(i)) {
    				ringWeightOffset += this._getRingWeight(i);
    			}
    		}

    		return ringWeightOffset;
    	},

    	/**
    	 * @private
    	 */
    	_getRingWeight: function(dataSetIndex) {
    		return Math.max(valueOrDefault$4(this.chart.data.datasets[dataSetIndex].weight, 1), 0);
    	},

    	/**
    	 * Returns the sum of all visibile data set weights.  This value can be 0.
    	 * @private
    	 */
    	_getVisibleDatasetWeightTotal: function() {
    		return this._getRingWeightOffset(this.chart.data.datasets.length);
    	}
    });

    core_defaults._set('horizontalBar', {
    	hover: {
    		mode: 'index',
    		axis: 'y'
    	},

    	scales: {
    		xAxes: [{
    			type: 'linear',
    			position: 'bottom'
    		}],

    		yAxes: [{
    			type: 'category',
    			position: 'left',
    			categoryPercentage: 0.8,
    			barPercentage: 0.9,
    			offset: true,
    			gridLines: {
    				offsetGridLines: true
    			}
    		}]
    	},

    	elements: {
    		rectangle: {
    			borderSkipped: 'left'
    		}
    	},

    	tooltips: {
    		mode: 'index',
    		axis: 'y'
    	}
    });

    var controller_horizontalBar = controller_bar.extend({
    	/**
    	 * @private
    	 */
    	_getValueScaleId: function() {
    		return this.getMeta().xAxisID;
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScaleId: function() {
    		return this.getMeta().yAxisID;
    	}
    });

    var valueOrDefault$5 = helpers$1.valueOrDefault;
    var resolve$4 = helpers$1.options.resolve;
    var isPointInArea = helpers$1.canvas._isPointInArea;

    core_defaults._set('line', {
    	showLines: true,
    	spanGaps: false,

    	hover: {
    		mode: 'label'
    	},

    	scales: {
    		xAxes: [{
    			type: 'category',
    			id: 'x-axis-0'
    		}],
    		yAxes: [{
    			type: 'linear',
    			id: 'y-axis-0'
    		}]
    	}
    });

    function lineEnabled(dataset, options) {
    	return valueOrDefault$5(dataset.showLine, options.showLines);
    }

    var controller_line = core_datasetController.extend({

    	datasetElementType: elements.Line,

    	dataElementType: elements.Point,

    	update: function(reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var line = meta.dataset;
    		var points = meta.data || [];
    		var scale = me.getScaleForId(meta.yAxisID);
    		var dataset = me.getDataset();
    		var showLine = lineEnabled(dataset, me.chart.options);
    		var i, ilen;

    		// Update Line
    		if (showLine) {
    			// Compatibility: If the properties are defined with only the old name, use those values
    			if ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {
    				dataset.lineTension = dataset.tension;
    			}

    			// Utility
    			line._scale = scale;
    			line._datasetIndex = me.index;
    			// Data
    			line._children = points;
    			// Model
    			line._model = me._resolveLineOptions(line);

    			line.pivot();
    		}

    		// Update Points
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			me.updateElement(points[i], i, reset);
    		}

    		if (showLine && line._model.tension !== 0) {
    			me.updateBezierControlPoints();
    		}

    		// Now pivot the point for animation
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			points[i].pivot();
    		}
    	},

    	updateElement: function(point, index, reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var custom = point.custom || {};
    		var dataset = me.getDataset();
    		var datasetIndex = me.index;
    		var value = dataset.data[index];
    		var yScale = me.getScaleForId(meta.yAxisID);
    		var xScale = me.getScaleForId(meta.xAxisID);
    		var lineModel = meta.dataset._model;
    		var x, y;

    		var options = me._resolvePointOptions(point, index);

    		x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);
    		y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);

    		// Utility
    		point._xScale = xScale;
    		point._yScale = yScale;
    		point._options = options;
    		point._datasetIndex = datasetIndex;
    		point._index = index;

    		// Desired view properties
    		point._model = {
    			x: x,
    			y: y,
    			skip: custom.skip || isNaN(x) || isNaN(y),
    			// Appearance
    			radius: options.radius,
    			pointStyle: options.pointStyle,
    			rotation: options.rotation,
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderWidth: options.borderWidth,
    			tension: valueOrDefault$5(custom.tension, lineModel ? lineModel.tension : 0),
    			steppedLine: lineModel ? lineModel.steppedLine : false,
    			// Tooltip
    			hitRadius: options.hitRadius
    		};
    	},

    	/**
    	 * @private
    	 */
    	_resolvePointOptions: function(element, index) {
    		var me = this;
    		var chart = me.chart;
    		var dataset = chart.data.datasets[me.index];
    		var custom = element.custom || {};
    		var options = chart.options.elements.point;
    		var values = {};
    		var i, ilen, key;

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataIndex: index,
    			dataset: dataset,
    			datasetIndex: me.index
    		};

    		var ELEMENT_OPTIONS = {
    			backgroundColor: 'pointBackgroundColor',
    			borderColor: 'pointBorderColor',
    			borderWidth: 'pointBorderWidth',
    			hitRadius: 'pointHitRadius',
    			hoverBackgroundColor: 'pointHoverBackgroundColor',
    			hoverBorderColor: 'pointHoverBorderColor',
    			hoverBorderWidth: 'pointHoverBorderWidth',
    			hoverRadius: 'pointHoverRadius',
    			pointStyle: 'pointStyle',
    			radius: 'pointRadius',
    			rotation: 'pointRotation'
    		};
    		var keys = Object.keys(ELEMENT_OPTIONS);

    		for (i = 0, ilen = keys.length; i < ilen; ++i) {
    			key = keys[i];
    			values[key] = resolve$4([
    				custom[key],
    				dataset[ELEMENT_OPTIONS[key]],
    				dataset[key],
    				options[key]
    			], context, index);
    		}

    		return values;
    	},

    	/**
    	 * @private
    	 */
    	_resolveLineOptions: function(element) {
    		var me = this;
    		var chart = me.chart;
    		var dataset = chart.data.datasets[me.index];
    		var custom = element.custom || {};
    		var options = chart.options;
    		var elementOptions = options.elements.line;
    		var values = {};
    		var i, ilen, key;

    		var keys = [
    			'backgroundColor',
    			'borderWidth',
    			'borderColor',
    			'borderCapStyle',
    			'borderDash',
    			'borderDashOffset',
    			'borderJoinStyle',
    			'fill',
    			'cubicInterpolationMode'
    		];

    		for (i = 0, ilen = keys.length; i < ilen; ++i) {
    			key = keys[i];
    			values[key] = resolve$4([
    				custom[key],
    				dataset[key],
    				elementOptions[key]
    			]);
    		}

    		// The default behavior of lines is to break at null values, according
    		// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
    		// This option gives lines the ability to span gaps
    		values.spanGaps = valueOrDefault$5(dataset.spanGaps, options.spanGaps);
    		values.tension = valueOrDefault$5(dataset.lineTension, elementOptions.tension);
    		values.steppedLine = resolve$4([custom.steppedLine, dataset.steppedLine, elementOptions.stepped]);

    		return values;
    	},

    	calculatePointY: function(value, index, datasetIndex) {
    		var me = this;
    		var chart = me.chart;
    		var meta = me.getMeta();
    		var yScale = me.getScaleForId(meta.yAxisID);
    		var sumPos = 0;
    		var sumNeg = 0;
    		var i, ds, dsMeta;

    		if (yScale.options.stacked) {
    			for (i = 0; i < datasetIndex; i++) {
    				ds = chart.data.datasets[i];
    				dsMeta = chart.getDatasetMeta(i);
    				if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {
    					var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));
    					if (stackedRightValue < 0) {
    						sumNeg += stackedRightValue || 0;
    					} else {
    						sumPos += stackedRightValue || 0;
    					}
    				}
    			}

    			var rightValue = Number(yScale.getRightValue(value));
    			if (rightValue < 0) {
    				return yScale.getPixelForValue(sumNeg + rightValue);
    			}
    			return yScale.getPixelForValue(sumPos + rightValue);
    		}

    		return yScale.getPixelForValue(value);
    	},

    	updateBezierControlPoints: function() {
    		var me = this;
    		var chart = me.chart;
    		var meta = me.getMeta();
    		var lineModel = meta.dataset._model;
    		var area = chart.chartArea;
    		var points = meta.data || [];
    		var i, ilen, model, controlPoints;

    		// Only consider points that are drawn in case the spanGaps option is used
    		if (lineModel.spanGaps) {
    			points = points.filter(function(pt) {
    				return !pt._model.skip;
    			});
    		}

    		function capControlPoint(pt, min, max) {
    			return Math.max(Math.min(pt, max), min);
    		}

    		if (lineModel.cubicInterpolationMode === 'monotone') {
    			helpers$1.splineCurveMonotone(points);
    		} else {
    			for (i = 0, ilen = points.length; i < ilen; ++i) {
    				model = points[i]._model;
    				controlPoints = helpers$1.splineCurve(
    					helpers$1.previousItem(points, i)._model,
    					model,
    					helpers$1.nextItem(points, i)._model,
    					lineModel.tension
    				);
    				model.controlPointPreviousX = controlPoints.previous.x;
    				model.controlPointPreviousY = controlPoints.previous.y;
    				model.controlPointNextX = controlPoints.next.x;
    				model.controlPointNextY = controlPoints.next.y;
    			}
    		}

    		if (chart.options.elements.line.capBezierPoints) {
    			for (i = 0, ilen = points.length; i < ilen; ++i) {
    				model = points[i]._model;
    				if (isPointInArea(model, area)) {
    					if (i > 0 && isPointInArea(points[i - 1]._model, area)) {
    						model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
    						model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
    					}
    					if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {
    						model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
    						model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
    					}
    				}
    			}
    		}
    	},

    	draw: function() {
    		var me = this;
    		var chart = me.chart;
    		var meta = me.getMeta();
    		var points = meta.data || [];
    		var area = chart.chartArea;
    		var ilen = points.length;
    		var halfBorderWidth;
    		var i = 0;

    		if (lineEnabled(me.getDataset(), chart.options)) {
    			halfBorderWidth = (meta.dataset._model.borderWidth || 0) / 2;

    			helpers$1.canvas.clipArea(chart.ctx, {
    				left: area.left,
    				right: area.right,
    				top: area.top - halfBorderWidth,
    				bottom: area.bottom + halfBorderWidth
    			});

    			meta.dataset.draw();

    			helpers$1.canvas.unclipArea(chart.ctx);
    		}

    		// Draw the points
    		for (; i < ilen; ++i) {
    			points[i].draw(area);
    		}
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(point) {
    		var model = point._model;
    		var options = point._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		point.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    			radius: model.radius
    		};

    		model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);
    		model.radius = valueOrDefault$5(options.hoverRadius, options.radius);
    	},
    });

    var resolve$5 = helpers$1.options.resolve;

    core_defaults._set('polarArea', {
    	scale: {
    		type: 'radialLinear',
    		angleLines: {
    			display: false
    		},
    		gridLines: {
    			circular: true
    		},
    		pointLabels: {
    			display: false
    		},
    		ticks: {
    			beginAtZero: true
    		}
    	},

    	// Boolean - Whether to animate the rotation of the chart
    	animation: {
    		animateRotate: true,
    		animateScale: true
    	},

    	startAngle: -0.5 * Math.PI,
    	legendCallback: function(chart) {
    		var text = [];
    		text.push('<ul class="' + chart.id + '-legend">');

    		var data = chart.data;
    		var datasets = data.datasets;
    		var labels = data.labels;

    		if (datasets.length) {
    			for (var i = 0; i < datasets[0].data.length; ++i) {
    				text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
    				if (labels[i]) {
    					text.push(labels[i]);
    				}
    				text.push('</li>');
    			}
    		}

    		text.push('</ul>');
    		return text.join('');
    	},
    	legend: {
    		labels: {
    			generateLabels: function(chart) {
    				var data = chart.data;
    				if (data.labels.length && data.datasets.length) {
    					return data.labels.map(function(label, i) {
    						var meta = chart.getDatasetMeta(0);
    						var ds = data.datasets[0];
    						var arc = meta.data[i];
    						var custom = arc.custom || {};
    						var arcOpts = chart.options.elements.arc;
    						var fill = resolve$5([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);
    						var stroke = resolve$5([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);
    						var bw = resolve$5([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);

    						return {
    							text: label,
    							fillStyle: fill,
    							strokeStyle: stroke,
    							lineWidth: bw,
    							hidden: isNaN(ds.data[i]) || meta.data[i].hidden,

    							// Extra data used for toggling the correct item
    							index: i
    						};
    					});
    				}
    				return [];
    			}
    		},

    		onClick: function(e, legendItem) {
    			var index = legendItem.index;
    			var chart = this.chart;
    			var i, ilen, meta;

    			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
    				meta = chart.getDatasetMeta(i);
    				meta.data[index].hidden = !meta.data[index].hidden;
    			}

    			chart.update();
    		}
    	},

    	// Need to override these to give a nice default
    	tooltips: {
    		callbacks: {
    			title: function() {
    				return '';
    			},
    			label: function(item, data) {
    				return data.labels[item.index] + ': ' + item.yLabel;
    			}
    		}
    	}
    });

    var controller_polarArea = core_datasetController.extend({

    	dataElementType: elements.Arc,

    	linkScales: helpers$1.noop,

    	update: function(reset) {
    		var me = this;
    		var dataset = me.getDataset();
    		var meta = me.getMeta();
    		var start = me.chart.options.startAngle || 0;
    		var starts = me._starts = [];
    		var angles = me._angles = [];
    		var arcs = meta.data;
    		var i, ilen, angle;

    		me._updateRadius();

    		meta.count = me.countVisibleElements();

    		for (i = 0, ilen = dataset.data.length; i < ilen; i++) {
    			starts[i] = start;
    			angle = me._computeAngle(i);
    			angles[i] = angle;
    			start += angle;
    		}

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			arcs[i]._options = me._resolveElementOptions(arcs[i], i);
    			me.updateElement(arcs[i], i, reset);
    		}
    	},

    	/**
    	 * @private
    	 */
    	_updateRadius: function() {
    		var me = this;
    		var chart = me.chart;
    		var chartArea = chart.chartArea;
    		var opts = chart.options;
    		var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);

    		chart.outerRadius = Math.max(minSize / 2, 0);
    		chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
    		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();

    		me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
    		me.innerRadius = me.outerRadius - chart.radiusLength;
    	},

    	updateElement: function(arc, index, reset) {
    		var me = this;
    		var chart = me.chart;
    		var dataset = me.getDataset();
    		var opts = chart.options;
    		var animationOpts = opts.animation;
    		var scale = chart.scale;
    		var labels = chart.data.labels;

    		var centerX = scale.xCenter;
    		var centerY = scale.yCenter;

    		// var negHalfPI = -0.5 * Math.PI;
    		var datasetStartAngle = opts.startAngle;
    		var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
    		var startAngle = me._starts[index];
    		var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);

    		var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
    		var options = arc._options || {};

    		helpers$1.extend(arc, {
    			// Utility
    			_datasetIndex: me.index,
    			_index: index,
    			_scale: scale,

    			// Desired view properties
    			_model: {
    				backgroundColor: options.backgroundColor,
    				borderColor: options.borderColor,
    				borderWidth: options.borderWidth,
    				borderAlign: options.borderAlign,
    				x: centerX,
    				y: centerY,
    				innerRadius: 0,
    				outerRadius: reset ? resetRadius : distance,
    				startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
    				endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
    				label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])
    			}
    		});

    		arc.pivot();
    	},

    	countVisibleElements: function() {
    		var dataset = this.getDataset();
    		var meta = this.getMeta();
    		var count = 0;

    		helpers$1.each(meta.data, function(element, index) {
    			if (!isNaN(dataset.data[index]) && !element.hidden) {
    				count++;
    			}
    		});

    		return count;
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(arc) {
    		var model = arc._model;
    		var options = arc._options;
    		var getHoverColor = helpers$1.getHoverColor;
    		var valueOrDefault = helpers$1.valueOrDefault;

    		arc.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    		};

    		model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);
    	},

    	/**
    	 * @private
    	 */
    	_resolveElementOptions: function(arc, index) {
    		var me = this;
    		var chart = me.chart;
    		var dataset = me.getDataset();
    		var custom = arc.custom || {};
    		var options = chart.options.elements.arc;
    		var values = {};
    		var i, ilen, key;

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataIndex: index,
    			dataset: dataset,
    			datasetIndex: me.index
    		};

    		var keys = [
    			'backgroundColor',
    			'borderColor',
    			'borderWidth',
    			'borderAlign',
    			'hoverBackgroundColor',
    			'hoverBorderColor',
    			'hoverBorderWidth',
    		];

    		for (i = 0, ilen = keys.length; i < ilen; ++i) {
    			key = keys[i];
    			values[key] = resolve$5([
    				custom[key],
    				dataset[key],
    				options[key]
    			], context, index);
    		}

    		return values;
    	},

    	/**
    	 * @private
    	 */
    	_computeAngle: function(index) {
    		var me = this;
    		var count = this.getMeta().count;
    		var dataset = me.getDataset();
    		var meta = me.getMeta();

    		if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
    			return 0;
    		}

    		// Scriptable options
    		var context = {
    			chart: me.chart,
    			dataIndex: index,
    			dataset: dataset,
    			datasetIndex: me.index
    		};

    		return resolve$5([
    			me.chart.options.elements.arc.angle,
    			(2 * Math.PI) / count
    		], context, index);
    	}
    });

    core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));
    core_defaults._set('pie', {
    	cutoutPercentage: 0
    });

    // Pie charts are Doughnut chart with different defaults
    var controller_pie = controller_doughnut;

    var valueOrDefault$6 = helpers$1.valueOrDefault;
    var resolve$6 = helpers$1.options.resolve;

    core_defaults._set('radar', {
    	scale: {
    		type: 'radialLinear'
    	},
    	elements: {
    		line: {
    			tension: 0 // no bezier in radar
    		}
    	}
    });

    var controller_radar = core_datasetController.extend({

    	datasetElementType: elements.Line,

    	dataElementType: elements.Point,

    	linkScales: helpers$1.noop,

    	update: function(reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var line = meta.dataset;
    		var points = meta.data || [];
    		var scale = me.chart.scale;
    		var dataset = me.getDataset();
    		var i, ilen;

    		// Compatibility: If the properties are defined with only the old name, use those values
    		if ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {
    			dataset.lineTension = dataset.tension;
    		}

    		// Utility
    		line._scale = scale;
    		line._datasetIndex = me.index;
    		// Data
    		line._children = points;
    		line._loop = true;
    		// Model
    		line._model = me._resolveLineOptions(line);

    		line.pivot();

    		// Update Points
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			me.updateElement(points[i], i, reset);
    		}

    		// Update bezier control points
    		me.updateBezierControlPoints();

    		// Now pivot the point for animation
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			points[i].pivot();
    		}
    	},

    	updateElement: function(point, index, reset) {
    		var me = this;
    		var custom = point.custom || {};
    		var dataset = me.getDataset();
    		var scale = me.chart.scale;
    		var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
    		var options = me._resolvePointOptions(point, index);
    		var lineModel = me.getMeta().dataset._model;
    		var x = reset ? scale.xCenter : pointPosition.x;
    		var y = reset ? scale.yCenter : pointPosition.y;

    		// Utility
    		point._scale = scale;
    		point._options = options;
    		point._datasetIndex = me.index;
    		point._index = index;

    		// Desired view properties
    		point._model = {
    			x: x, // value not used in dataset scale, but we want a consistent API between scales
    			y: y,
    			skip: custom.skip || isNaN(x) || isNaN(y),
    			// Appearance
    			radius: options.radius,
    			pointStyle: options.pointStyle,
    			rotation: options.rotation,
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderWidth: options.borderWidth,
    			tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),

    			// Tooltip
    			hitRadius: options.hitRadius
    		};
    	},

    	/**
    	 * @private
    	 */
    	_resolvePointOptions: function(element, index) {
    		var me = this;
    		var chart = me.chart;
    		var dataset = chart.data.datasets[me.index];
    		var custom = element.custom || {};
    		var options = chart.options.elements.point;
    		var values = {};
    		var i, ilen, key;

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataIndex: index,
    			dataset: dataset,
    			datasetIndex: me.index
    		};

    		var ELEMENT_OPTIONS = {
    			backgroundColor: 'pointBackgroundColor',
    			borderColor: 'pointBorderColor',
    			borderWidth: 'pointBorderWidth',
    			hitRadius: 'pointHitRadius',
    			hoverBackgroundColor: 'pointHoverBackgroundColor',
    			hoverBorderColor: 'pointHoverBorderColor',
    			hoverBorderWidth: 'pointHoverBorderWidth',
    			hoverRadius: 'pointHoverRadius',
    			pointStyle: 'pointStyle',
    			radius: 'pointRadius',
    			rotation: 'pointRotation'
    		};
    		var keys = Object.keys(ELEMENT_OPTIONS);

    		for (i = 0, ilen = keys.length; i < ilen; ++i) {
    			key = keys[i];
    			values[key] = resolve$6([
    				custom[key],
    				dataset[ELEMENT_OPTIONS[key]],
    				dataset[key],
    				options[key]
    			], context, index);
    		}

    		return values;
    	},

    	/**
    	 * @private
    	 */
    	_resolveLineOptions: function(element) {
    		var me = this;
    		var chart = me.chart;
    		var dataset = chart.data.datasets[me.index];
    		var custom = element.custom || {};
    		var options = chart.options.elements.line;
    		var values = {};
    		var i, ilen, key;

    		var keys = [
    			'backgroundColor',
    			'borderWidth',
    			'borderColor',
    			'borderCapStyle',
    			'borderDash',
    			'borderDashOffset',
    			'borderJoinStyle',
    			'fill'
    		];

    		for (i = 0, ilen = keys.length; i < ilen; ++i) {
    			key = keys[i];
    			values[key] = resolve$6([
    				custom[key],
    				dataset[key],
    				options[key]
    			]);
    		}

    		values.tension = valueOrDefault$6(dataset.lineTension, options.tension);

    		return values;
    	},

    	updateBezierControlPoints: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var area = me.chart.chartArea;
    		var points = meta.data || [];
    		var i, ilen, model, controlPoints;

    		function capControlPoint(pt, min, max) {
    			return Math.max(Math.min(pt, max), min);
    		}

    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			model = points[i]._model;
    			controlPoints = helpers$1.splineCurve(
    				helpers$1.previousItem(points, i, true)._model,
    				model,
    				helpers$1.nextItem(points, i, true)._model,
    				model.tension
    			);

    			// Prevent the bezier going outside of the bounds of the graph
    			model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);
    			model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);
    			model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);
    			model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);
    		}
    	},

    	setHoverStyle: function(point) {
    		var model = point._model;
    		var options = point._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		point.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    			radius: model.radius
    		};

    		model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);
    		model.radius = valueOrDefault$6(options.hoverRadius, options.radius);
    	}
    });

    core_defaults._set('scatter', {
    	hover: {
    		mode: 'single'
    	},

    	scales: {
    		xAxes: [{
    			id: 'x-axis-1',    // need an ID so datasets can reference the scale
    			type: 'linear',    // scatter should not use a category axis
    			position: 'bottom'
    		}],
    		yAxes: [{
    			id: 'y-axis-1',
    			type: 'linear',
    			position: 'left'
    		}]
    	},

    	showLines: false,

    	tooltips: {
    		callbacks: {
    			title: function() {
    				return '';     // doesn't make sense for scatter since data are formatted as a point
    			},
    			label: function(item) {
    				return '(' + item.xLabel + ', ' + item.yLabel + ')';
    			}
    		}
    	}
    });

    // Scatter charts use line controllers
    var controller_scatter = controller_line;

    // NOTE export a map in which the key represents the controller type, not
    // the class, and so must be CamelCase in order to be correctly retrieved
    // by the controller in core.controller.js (`controllers[meta.type]`).

    var controllers = {
    	bar: controller_bar,
    	bubble: controller_bubble,
    	doughnut: controller_doughnut,
    	horizontalBar: controller_horizontalBar,
    	line: controller_line,
    	polarArea: controller_polarArea,
    	pie: controller_pie,
    	radar: controller_radar,
    	scatter: controller_scatter
    };

    /**
     * Helper function to get relative position for an event
     * @param {Event|IEvent} event - The event to get the position for
     * @param {Chart} chart - The chart
     * @returns {object} the event position
     */
    function getRelativePosition(e, chart) {
    	if (e.native) {
    		return {
    			x: e.x,
    			y: e.y
    		};
    	}

    	return helpers$1.getRelativePosition(e, chart);
    }

    /**
     * Helper function to traverse all of the visible elements in the chart
     * @param {Chart} chart - the chart
     * @param {function} handler - the callback to execute for each visible item
     */
    function parseVisibleItems(chart, handler) {
    	var datasets = chart.data.datasets;
    	var meta, i, j, ilen, jlen;

    	for (i = 0, ilen = datasets.length; i < ilen; ++i) {
    		if (!chart.isDatasetVisible(i)) {
    			continue;
    		}

    		meta = chart.getDatasetMeta(i);
    		for (j = 0, jlen = meta.data.length; j < jlen; ++j) {
    			var element = meta.data[j];
    			if (!element._view.skip) {
    				handler(element);
    			}
    		}
    	}
    }

    /**
     * Helper function to get the items that intersect the event position
     * @param {ChartElement[]} items - elements to filter
     * @param {object} position - the point to be nearest to
     * @return {ChartElement[]} the nearest items
     */
    function getIntersectItems(chart, position) {
    	var elements = [];

    	parseVisibleItems(chart, function(element) {
    		if (element.inRange(position.x, position.y)) {
    			elements.push(element);
    		}
    	});

    	return elements;
    }

    /**
     * Helper function to get the items nearest to the event position considering all visible items in teh chart
     * @param {Chart} chart - the chart to look at elements from
     * @param {object} position - the point to be nearest to
     * @param {boolean} intersect - if true, only consider items that intersect the position
     * @param {function} distanceMetric - function to provide the distance between points
     * @return {ChartElement[]} the nearest items
     */
    function getNearestItems(chart, position, intersect, distanceMetric) {
    	var minDistance = Number.POSITIVE_INFINITY;
    	var nearestItems = [];

    	parseVisibleItems(chart, function(element) {
    		if (intersect && !element.inRange(position.x, position.y)) {
    			return;
    		}

    		var center = element.getCenterPoint();
    		var distance = distanceMetric(position, center);
    		if (distance < minDistance) {
    			nearestItems = [element];
    			minDistance = distance;
    		} else if (distance === minDistance) {
    			// Can have multiple items at the same distance in which case we sort by size
    			nearestItems.push(element);
    		}
    	});

    	return nearestItems;
    }

    /**
     * Get a distance metric function for two points based on the
     * axis mode setting
     * @param {string} axis - the axis mode. x|y|xy
     */
    function getDistanceMetricForAxis(axis) {
    	var useX = axis.indexOf('x') !== -1;
    	var useY = axis.indexOf('y') !== -1;

    	return function(pt1, pt2) {
    		var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    		var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    		return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
    	};
    }

    function indexMode(chart, e, options) {
    	var position = getRelativePosition(e, chart);
    	// Default axis for index mode is 'x' to match old behaviour
    	options.axis = options.axis || 'x';
    	var distanceMetric = getDistanceMetricForAxis(options.axis);
    	var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
    	var elements = [];

    	if (!items.length) {
    		return [];
    	}

    	chart.data.datasets.forEach(function(dataset, datasetIndex) {
    		if (chart.isDatasetVisible(datasetIndex)) {
    			var meta = chart.getDatasetMeta(datasetIndex);
    			var element = meta.data[items[0]._index];

    			// don't count items that are skipped (null data)
    			if (element && !element._view.skip) {
    				elements.push(element);
    			}
    		}
    	});

    	return elements;
    }

    /**
     * @interface IInteractionOptions
     */
    /**
     * If true, only consider items that intersect the point
     * @name IInterfaceOptions#boolean
     * @type Boolean
     */

    /**
     * Contains interaction related functions
     * @namespace Chart.Interaction
     */
    var core_interaction = {
    	// Helper function for different modes
    	modes: {
    		single: function(chart, e) {
    			var position = getRelativePosition(e, chart);
    			var elements = [];

    			parseVisibleItems(chart, function(element) {
    				if (element.inRange(position.x, position.y)) {
    					elements.push(element);
    					return elements;
    				}
    			});

    			return elements.slice(0, 1);
    		},

    		/**
    		 * @function Chart.Interaction.modes.label
    		 * @deprecated since version 2.4.0
    		 * @todo remove at version 3
    		 * @private
    		 */
    		label: indexMode,

    		/**
    		 * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
    		 * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
    		 * @function Chart.Interaction.modes.index
    		 * @since v2.4.0
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use during interaction
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		index: indexMode,

    		/**
    		 * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
    		 * If the options.intersect is false, we find the nearest item and return the items in that dataset
    		 * @function Chart.Interaction.modes.dataset
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use during interaction
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		dataset: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			options.axis = options.axis || 'xy';
    			var distanceMetric = getDistanceMetricForAxis(options.axis);
    			var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);

    			if (items.length > 0) {
    				items = chart.getDatasetMeta(items[0]._datasetIndex).data;
    			}

    			return items;
    		},

    		/**
    		 * @function Chart.Interaction.modes.x-axis
    		 * @deprecated since version 2.4.0. Use index mode and intersect == true
    		 * @todo remove at version 3
    		 * @private
    		 */
    		'x-axis': function(chart, e) {
    			return indexMode(chart, e, {intersect: false});
    		},

    		/**
    		 * Point mode returns all elements that hit test based on the event position
    		 * of the event
    		 * @function Chart.Interaction.modes.intersect
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		point: function(chart, e) {
    			var position = getRelativePosition(e, chart);
    			return getIntersectItems(chart, position);
    		},

    		/**
    		 * nearest mode returns the element closest to the point
    		 * @function Chart.Interaction.modes.intersect
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		nearest: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			options.axis = options.axis || 'xy';
    			var distanceMetric = getDistanceMetricForAxis(options.axis);
    			return getNearestItems(chart, position, options.intersect, distanceMetric);
    		},

    		/**
    		 * x mode returns the elements that hit-test at the current x coordinate
    		 * @function Chart.Interaction.modes.x
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		x: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			var items = [];
    			var intersectsItem = false;

    			parseVisibleItems(chart, function(element) {
    				if (element.inXRange(position.x)) {
    					items.push(element);
    				}

    				if (element.inRange(position.x, position.y)) {
    					intersectsItem = true;
    				}
    			});

    			// If we want to trigger on an intersect and we don't have any items
    			// that intersect the position, return nothing
    			if (options.intersect && !intersectsItem) {
    				items = [];
    			}
    			return items;
    		},

    		/**
    		 * y mode returns the elements that hit-test at the current y coordinate
    		 * @function Chart.Interaction.modes.y
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		y: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			var items = [];
    			var intersectsItem = false;

    			parseVisibleItems(chart, function(element) {
    				if (element.inYRange(position.y)) {
    					items.push(element);
    				}

    				if (element.inRange(position.x, position.y)) {
    					intersectsItem = true;
    				}
    			});

    			// If we want to trigger on an intersect and we don't have any items
    			// that intersect the position, return nothing
    			if (options.intersect && !intersectsItem) {
    				items = [];
    			}
    			return items;
    		}
    	}
    };

    function filterByPosition(array, position) {
    	return helpers$1.where(array, function(v) {
    		return v.position === position;
    	});
    }

    function sortByWeight(array, reverse) {
    	array.forEach(function(v, i) {
    		v._tmpIndex_ = i;
    		return v;
    	});
    	array.sort(function(a, b) {
    		var v0 = reverse ? b : a;
    		var v1 = reverse ? a : b;
    		return v0.weight === v1.weight ?
    			v0._tmpIndex_ - v1._tmpIndex_ :
    			v0.weight - v1.weight;
    	});
    	array.forEach(function(v) {
    		delete v._tmpIndex_;
    	});
    }

    function findMaxPadding(boxes) {
    	var top = 0;
    	var left = 0;
    	var bottom = 0;
    	var right = 0;
    	helpers$1.each(boxes, function(box) {
    		if (box.getPadding) {
    			var boxPadding = box.getPadding();
    			top = Math.max(top, boxPadding.top);
    			left = Math.max(left, boxPadding.left);
    			bottom = Math.max(bottom, boxPadding.bottom);
    			right = Math.max(right, boxPadding.right);
    		}
    	});
    	return {
    		top: top,
    		left: left,
    		bottom: bottom,
    		right: right
    	};
    }

    function addSizeByPosition(boxes, size) {
    	helpers$1.each(boxes, function(box) {
    		size[box.position] += box.isHorizontal() ? box.height : box.width;
    	});
    }

    core_defaults._set('global', {
    	layout: {
    		padding: {
    			top: 0,
    			right: 0,
    			bottom: 0,
    			left: 0
    		}
    	}
    });

    /**
     * @interface ILayoutItem
     * @prop {string} position - The position of the item in the chart layout. Possible values are
     * 'left', 'top', 'right', 'bottom', and 'chartArea'
     * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area
     * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down
     * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)
     * @prop {function} update - Takes two parameters: width and height. Returns size of item
     * @prop {function} getPadding -  Returns an object with padding on the edges
     * @prop {number} width - Width of item. Must be valid after update()
     * @prop {number} height - Height of item. Must be valid after update()
     * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update
     * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update
     * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update
     * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update
     */

    // The layout service is very self explanatory.  It's responsible for the layout within a chart.
    // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
    // It is this service's responsibility of carrying out that layout.
    var core_layouts = {
    	defaults: {},

    	/**
    	 * Register a box to a chart.
    	 * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
    	 * @param {Chart} chart - the chart to use
    	 * @param {ILayoutItem} item - the item to add to be layed out
    	 */
    	addBox: function(chart, item) {
    		if (!chart.boxes) {
    			chart.boxes = [];
    		}

    		// initialize item with default values
    		item.fullWidth = item.fullWidth || false;
    		item.position = item.position || 'top';
    		item.weight = item.weight || 0;

    		chart.boxes.push(item);
    	},

    	/**
    	 * Remove a layoutItem from a chart
    	 * @param {Chart} chart - the chart to remove the box from
    	 * @param {ILayoutItem} layoutItem - the item to remove from the layout
    	 */
    	removeBox: function(chart, layoutItem) {
    		var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
    		if (index !== -1) {
    			chart.boxes.splice(index, 1);
    		}
    	},

    	/**
    	 * Sets (or updates) options on the given `item`.
    	 * @param {Chart} chart - the chart in which the item lives (or will be added to)
    	 * @param {ILayoutItem} item - the item to configure with the given options
    	 * @param {object} options - the new item options.
    	 */
    	configure: function(chart, item, options) {
    		var props = ['fullWidth', 'position', 'weight'];
    		var ilen = props.length;
    		var i = 0;
    		var prop;

    		for (; i < ilen; ++i) {
    			prop = props[i];
    			if (options.hasOwnProperty(prop)) {
    				item[prop] = options[prop];
    			}
    		}
    	},

    	/**
    	 * Fits boxes of the given chart into the given size by having each box measure itself
    	 * then running a fitting algorithm
    	 * @param {Chart} chart - the chart
    	 * @param {number} width - the width to fit into
    	 * @param {number} height - the height to fit into
    	 */
    	update: function(chart, width, height) {
    		if (!chart) {
    			return;
    		}

    		var layoutOptions = chart.options.layout || {};
    		var padding = helpers$1.options.toPadding(layoutOptions.padding);
    		var leftPadding = padding.left;
    		var rightPadding = padding.right;
    		var topPadding = padding.top;
    		var bottomPadding = padding.bottom;

    		var leftBoxes = filterByPosition(chart.boxes, 'left');
    		var rightBoxes = filterByPosition(chart.boxes, 'right');
    		var topBoxes = filterByPosition(chart.boxes, 'top');
    		var bottomBoxes = filterByPosition(chart.boxes, 'bottom');
    		var chartAreaBoxes = filterByPosition(chart.boxes, 'chartArea');

    		// Sort boxes by weight. A higher weight is further away from the chart area
    		sortByWeight(leftBoxes, true);
    		sortByWeight(rightBoxes, false);
    		sortByWeight(topBoxes, true);
    		sortByWeight(bottomBoxes, false);

    		var verticalBoxes = leftBoxes.concat(rightBoxes);
    		var horizontalBoxes = topBoxes.concat(bottomBoxes);
    		var outerBoxes = verticalBoxes.concat(horizontalBoxes);

    		// Essentially we now have any number of boxes on each of the 4 sides.
    		// Our canvas looks like the following.
    		// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
    		// B1 is the bottom axis
    		// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
    		// These locations are single-box locations only, when trying to register a chartArea location that is already taken,
    		// an error will be thrown.
    		//
    		// |----------------------------------------------------|
    		// |                  T1 (Full Width)                   |
    		// |----------------------------------------------------|
    		// |    |    |                 T2                  |    |
    		// |    |----|-------------------------------------|----|
    		// |    |    | C1 |                           | C2 |    |
    		// |    |    |----|                           |----|    |
    		// |    |    |                                     |    |
    		// | L1 | L2 |           ChartArea (C0)            | R1 |
    		// |    |    |                                     |    |
    		// |    |    |----|                           |----|    |
    		// |    |    | C3 |                           | C4 |    |
    		// |    |----|-------------------------------------|----|
    		// |    |    |                 B1                  |    |
    		// |----------------------------------------------------|
    		// |                  B2 (Full Width)                   |
    		// |----------------------------------------------------|
    		//
    		// What we do to find the best sizing, we do the following
    		// 1. Determine the minimum size of the chart area.
    		// 2. Split the remaining width equally between each vertical axis
    		// 3. Split the remaining height equally between each horizontal axis
    		// 4. Give each layout the maximum size it can be. The layout will return it's minimum size
    		// 5. Adjust the sizes of each axis based on it's minimum reported size.
    		// 6. Refit each axis
    		// 7. Position each axis in the final location
    		// 8. Tell the chart the final location of the chart area
    		// 9. Tell any axes that overlay the chart area the positions of the chart area

    		// Step 1
    		var chartWidth = width - leftPadding - rightPadding;
    		var chartHeight = height - topPadding - bottomPadding;
    		var chartAreaWidth = chartWidth / 2; // min 50%

    		// Step 2
    		var verticalBoxWidth = (width - chartAreaWidth) / verticalBoxes.length;

    		// Step 3
    		// TODO re-limit horizontal axis height (this limit has affected only padding calculation since PR 1837)
    		// var horizontalBoxHeight = (height - chartAreaHeight) / horizontalBoxes.length;

    		// Step 4
    		var maxChartAreaWidth = chartWidth;
    		var maxChartAreaHeight = chartHeight;
    		var outerBoxSizes = {top: topPadding, left: leftPadding, bottom: bottomPadding, right: rightPadding};
    		var minBoxSizes = [];
    		var maxPadding;

    		function getMinimumBoxSize(box) {
    			var minSize;
    			var isHorizontal = box.isHorizontal();

    			if (isHorizontal) {
    				minSize = box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2);
    				maxChartAreaHeight -= minSize.height;
    			} else {
    				minSize = box.update(verticalBoxWidth, maxChartAreaHeight);
    				maxChartAreaWidth -= minSize.width;
    			}

    			minBoxSizes.push({
    				horizontal: isHorizontal,
    				width: minSize.width,
    				box: box,
    			});
    		}

    		helpers$1.each(outerBoxes, getMinimumBoxSize);

    		// If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)
    		maxPadding = findMaxPadding(outerBoxes);

    		// At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could
    		// be if the axes are drawn at their minimum sizes.
    		// Steps 5 & 6

    		// Function to fit a box
    		function fitBox(box) {
    			var minBoxSize = helpers$1.findNextWhere(minBoxSizes, function(minBox) {
    				return minBox.box === box;
    			});

    			if (minBoxSize) {
    				if (minBoxSize.horizontal) {
    					var scaleMargin = {
    						left: Math.max(outerBoxSizes.left, maxPadding.left),
    						right: Math.max(outerBoxSizes.right, maxPadding.right),
    						top: 0,
    						bottom: 0
    					};

    					// Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends
    					// on the margin. Sometimes they need to increase in size slightly
    					box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);
    				} else {
    					box.update(minBoxSize.width, maxChartAreaHeight);
    				}
    			}
    		}

    		// Update, and calculate the left and right margins for the horizontal boxes
    		helpers$1.each(verticalBoxes, fitBox);
    		addSizeByPosition(verticalBoxes, outerBoxSizes);

    		// Set the Left and Right margins for the horizontal boxes
    		helpers$1.each(horizontalBoxes, fitBox);
    		addSizeByPosition(horizontalBoxes, outerBoxSizes);

    		function finalFitVerticalBox(box) {
    			var minBoxSize = helpers$1.findNextWhere(minBoxSizes, function(minSize) {
    				return minSize.box === box;
    			});

    			var scaleMargin = {
    				left: 0,
    				right: 0,
    				top: outerBoxSizes.top,
    				bottom: outerBoxSizes.bottom
    			};

    			if (minBoxSize) {
    				box.update(minBoxSize.width, maxChartAreaHeight, scaleMargin);
    			}
    		}

    		// Let the left layout know the final margin
    		helpers$1.each(verticalBoxes, finalFitVerticalBox);

    		// Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)
    		outerBoxSizes = {top: topPadding, left: leftPadding, bottom: bottomPadding, right: rightPadding};
    		addSizeByPosition(outerBoxes, outerBoxSizes);

    		// We may be adding some padding to account for rotated x axis labels
    		var leftPaddingAddition = Math.max(maxPadding.left - outerBoxSizes.left, 0);
    		outerBoxSizes.left += leftPaddingAddition;
    		outerBoxSizes.right += Math.max(maxPadding.right - outerBoxSizes.right, 0);

    		var topPaddingAddition = Math.max(maxPadding.top - outerBoxSizes.top, 0);
    		outerBoxSizes.top += topPaddingAddition;
    		outerBoxSizes.bottom += Math.max(maxPadding.bottom - outerBoxSizes.bottom, 0);

    		// Figure out if our chart area changed. This would occur if the dataset layout label rotation
    		// changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do
    		// without calling `fit` again
    		var newMaxChartAreaHeight = height - outerBoxSizes.top - outerBoxSizes.bottom;
    		var newMaxChartAreaWidth = width - outerBoxSizes.left - outerBoxSizes.right;

    		if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {
    			helpers$1.each(verticalBoxes, function(box) {
    				box.height = newMaxChartAreaHeight;
    			});

    			helpers$1.each(horizontalBoxes, function(box) {
    				if (!box.fullWidth) {
    					box.width = newMaxChartAreaWidth;
    				}
    			});

    			maxChartAreaHeight = newMaxChartAreaHeight;
    			maxChartAreaWidth = newMaxChartAreaWidth;
    		}

    		// Step 7 - Position the boxes
    		var left = leftPadding + leftPaddingAddition;
    		var top = topPadding + topPaddingAddition;

    		function placeBox(box) {
    			if (box.isHorizontal()) {
    				box.left = box.fullWidth ? leftPadding : outerBoxSizes.left;
    				box.right = box.fullWidth ? width - rightPadding : outerBoxSizes.left + maxChartAreaWidth;
    				box.top = top;
    				box.bottom = top + box.height;

    				// Move to next point
    				top = box.bottom;

    			} else {

    				box.left = left;
    				box.right = left + box.width;
    				box.top = outerBoxSizes.top;
    				box.bottom = outerBoxSizes.top + maxChartAreaHeight;

    				// Move to next point
    				left = box.right;
    			}
    		}

    		helpers$1.each(leftBoxes.concat(topBoxes), placeBox);

    		// Account for chart width and height
    		left += maxChartAreaWidth;
    		top += maxChartAreaHeight;

    		helpers$1.each(rightBoxes, placeBox);
    		helpers$1.each(bottomBoxes, placeBox);

    		// Step 8
    		chart.chartArea = {
    			left: outerBoxSizes.left,
    			top: outerBoxSizes.top,
    			right: outerBoxSizes.left + maxChartAreaWidth,
    			bottom: outerBoxSizes.top + maxChartAreaHeight
    		};

    		// Step 9
    		helpers$1.each(chartAreaBoxes, function(box) {
    			box.left = chart.chartArea.left;
    			box.top = chart.chartArea.top;
    			box.right = chart.chartArea.right;
    			box.bottom = chart.chartArea.bottom;

    			box.update(maxChartAreaWidth, maxChartAreaHeight);
    		});
    	}
    };

    /**
     * Platform fallback implementation (minimal).
     * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939
     */

    var platform_basic = {
    	acquireContext: function(item) {
    		if (item && item.canvas) {
    			// Support for any object associated to a canvas (including a context2d)
    			item = item.canvas;
    		}

    		return item && item.getContext('2d') || null;
    	}
    };

    var platform_dom = "/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n";

    var platform_dom$1 = /*#__PURE__*/Object.freeze({
    default: platform_dom
    });

    function getCjsExportFromNamespace (n) {
    	return n && n.default || n;
    }

    var stylesheet = getCjsExportFromNamespace(platform_dom$1);

    var EXPANDO_KEY = '$chartjs';
    var CSS_PREFIX = 'chartjs-';
    var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';
    var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';
    var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';
    var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];

    /**
     * DOM event types -> Chart.js event types.
     * Note: only events with different types are mapped.
     * @see https://developer.mozilla.org/en-US/docs/Web/Events
     */
    var EVENT_TYPES = {
    	touchstart: 'mousedown',
    	touchmove: 'mousemove',
    	touchend: 'mouseup',
    	pointerenter: 'mouseenter',
    	pointerdown: 'mousedown',
    	pointermove: 'mousemove',
    	pointerup: 'mouseup',
    	pointerleave: 'mouseout',
    	pointerout: 'mouseout'
    };

    /**
     * The "used" size is the final value of a dimension property after all calculations have
     * been performed. This method uses the computed style of `element` but returns undefined
     * if the computed style is not expressed in pixels. That can happen in some cases where
     * `element` has a size relative to its parent and this last one is not yet displayed,
     * for example because of `display: none` on a parent node.
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
     * @returns {number} Size in pixels or undefined if unknown.
     */
    function readUsedSize(element, property) {
    	var value = helpers$1.getStyle(element, property);
    	var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
    	return matches ? Number(matches[1]) : undefined;
    }

    /**
     * Initializes the canvas style and render size without modifying the canvas display size,
     * since responsiveness is handled by the controller.resize() method. The config is used
     * to determine the aspect ratio to apply in case no explicit height has been specified.
     */
    function initCanvas(canvas, config) {
    	var style = canvas.style;

    	// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
    	// returns null or '' if no explicit value has been set to the canvas attribute.
    	var renderHeight = canvas.getAttribute('height');
    	var renderWidth = canvas.getAttribute('width');

    	// Chart.js modifies some canvas values that we want to restore on destroy
    	canvas[EXPANDO_KEY] = {
    		initial: {
    			height: renderHeight,
    			width: renderWidth,
    			style: {
    				display: style.display,
    				height: style.height,
    				width: style.width
    			}
    		}
    	};

    	// Force canvas to display as block to avoid extra space caused by inline
    	// elements, which would interfere with the responsive resize process.
    	// https://github.com/chartjs/Chart.js/issues/2538
    	style.display = style.display || 'block';

    	if (renderWidth === null || renderWidth === '') {
    		var displayWidth = readUsedSize(canvas, 'width');
    		if (displayWidth !== undefined) {
    			canvas.width = displayWidth;
    		}
    	}

    	if (renderHeight === null || renderHeight === '') {
    		if (canvas.style.height === '') {
    			// If no explicit render height and style height, let's apply the aspect ratio,
    			// which one can be specified by the user but also by charts as default option
    			// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
    			canvas.height = canvas.width / (config.options.aspectRatio || 2);
    		} else {
    			var displayHeight = readUsedSize(canvas, 'height');
    			if (displayWidth !== undefined) {
    				canvas.height = displayHeight;
    			}
    		}
    	}

    	return canvas;
    }

    /**
     * Detects support for options object argument in addEventListener.
     * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
     * @private
     */
    var supportsEventListenerOptions = (function() {
    	var supports = false;
    	try {
    		var options = Object.defineProperty({}, 'passive', {
    			// eslint-disable-next-line getter-return
    			get: function() {
    				supports = true;
    			}
    		});
    		window.addEventListener('e', null, options);
    	} catch (e) {
    		// continue regardless of error
    	}
    	return supports;
    }());

    // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
    // https://github.com/chartjs/Chart.js/issues/4287
    var eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;

    function addListener(node, type, listener) {
    	node.addEventListener(type, listener, eventListenerOptions);
    }

    function removeListener(node, type, listener) {
    	node.removeEventListener(type, listener, eventListenerOptions);
    }

    function createEvent(type, chart, x, y, nativeEvent) {
    	return {
    		type: type,
    		chart: chart,
    		native: nativeEvent || null,
    		x: x !== undefined ? x : null,
    		y: y !== undefined ? y : null,
    	};
    }

    function fromNativeEvent(event, chart) {
    	var type = EVENT_TYPES[event.type] || event.type;
    	var pos = helpers$1.getRelativePosition(event, chart);
    	return createEvent(type, chart, pos.x, pos.y, event);
    }

    function throttled(fn, thisArg) {
    	var ticking = false;
    	var args = [];

    	return function() {
    		args = Array.prototype.slice.call(arguments);
    		thisArg = thisArg || this;

    		if (!ticking) {
    			ticking = true;
    			helpers$1.requestAnimFrame.call(window, function() {
    				ticking = false;
    				fn.apply(thisArg, args);
    			});
    		}
    	};
    }

    function createDiv(cls) {
    	var el = document.createElement('div');
    	el.className = cls || '';
    	return el;
    }

    // Implementation based on https://github.com/marcj/css-element-queries
    function createResizer(handler) {
    	var maxSize = 1000000;

    	// NOTE(SB) Don't use innerHTML because it could be considered unsafe.
    	// https://github.com/chartjs/Chart.js/issues/5902
    	var resizer = createDiv(CSS_SIZE_MONITOR);
    	var expand = createDiv(CSS_SIZE_MONITOR + '-expand');
    	var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');

    	expand.appendChild(createDiv());
    	shrink.appendChild(createDiv());

    	resizer.appendChild(expand);
    	resizer.appendChild(shrink);
    	resizer._reset = function() {
    		expand.scrollLeft = maxSize;
    		expand.scrollTop = maxSize;
    		shrink.scrollLeft = maxSize;
    		shrink.scrollTop = maxSize;
    	};

    	var onScroll = function() {
    		resizer._reset();
    		handler();
    	};

    	addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));
    	addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));

    	return resizer;
    }

    // https://davidwalsh.name/detect-node-insertion
    function watchForRender(node, handler) {
    	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
    	var proxy = expando.renderProxy = function(e) {
    		if (e.animationName === CSS_RENDER_ANIMATION) {
    			handler();
    		}
    	};

    	helpers$1.each(ANIMATION_START_EVENTS, function(type) {
    		addListener(node, type, proxy);
    	});

    	// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class
    	// is removed then added back immediately (same animation frame?). Accessing the
    	// `offsetParent` property will force a reflow and re-evaluate the CSS animation.
    	// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics
    	// https://github.com/chartjs/Chart.js/issues/4737
    	expando.reflow = !!node.offsetParent;

    	node.classList.add(CSS_RENDER_MONITOR);
    }

    function unwatchForRender(node) {
    	var expando = node[EXPANDO_KEY] || {};
    	var proxy = expando.renderProxy;

    	if (proxy) {
    		helpers$1.each(ANIMATION_START_EVENTS, function(type) {
    			removeListener(node, type, proxy);
    		});

    		delete expando.renderProxy;
    	}

    	node.classList.remove(CSS_RENDER_MONITOR);
    }

    function addResizeListener(node, listener, chart) {
    	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});

    	// Let's keep track of this added resizer and thus avoid DOM query when removing it.
    	var resizer = expando.resizer = createResizer(throttled(function() {
    		if (expando.resizer) {
    			var container = chart.options.maintainAspectRatio && node.parentNode;
    			var w = container ? container.clientWidth : 0;
    			listener(createEvent('resize', chart));
    			if (container && container.clientWidth < w && chart.canvas) {
    				// If the container size shrank during chart resize, let's assume
    				// scrollbar appeared. So we resize again with the scrollbar visible -
    				// effectively making chart smaller and the scrollbar hidden again.
    				// Because we are inside `throttled`, and currently `ticking`, scroll
    				// events are ignored during this whole 2 resize process.
    				// If we assumed wrong and something else happened, we are resizing
    				// twice in a frame (potential performance issue)
    				listener(createEvent('resize', chart));
    			}
    		}
    	}));

    	// The resizer needs to be attached to the node parent, so we first need to be
    	// sure that `node` is attached to the DOM before injecting the resizer element.
    	watchForRender(node, function() {
    		if (expando.resizer) {
    			var container = node.parentNode;
    			if (container && container !== resizer.parentNode) {
    				container.insertBefore(resizer, container.firstChild);
    			}

    			// The container size might have changed, let's reset the resizer state.
    			resizer._reset();
    		}
    	});
    }

    function removeResizeListener(node) {
    	var expando = node[EXPANDO_KEY] || {};
    	var resizer = expando.resizer;

    	delete expando.resizer;
    	unwatchForRender(node);

    	if (resizer && resizer.parentNode) {
    		resizer.parentNode.removeChild(resizer);
    	}
    }

    function injectCSS(platform, css) {
    	// https://stackoverflow.com/q/3922139
    	var style = platform._style || document.createElement('style');
    	if (!platform._style) {
    		platform._style = style;
    		css = '/* Chart.js */\n' + css;
    		style.setAttribute('type', 'text/css');
    		document.getElementsByTagName('head')[0].appendChild(style);
    	}

    	style.appendChild(document.createTextNode(css));
    }

    var platform_dom$2 = {
    	/**
    	 * When `true`, prevents the automatic injection of the stylesheet required to
    	 * correctly detect when the chart is added to the DOM and then resized. This
    	 * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)
    	 * to be manually imported to make this library compatible with any CSP.
    	 * See https://github.com/chartjs/Chart.js/issues/5208
    	 */
    	disableCSSInjection: false,

    	/**
    	 * This property holds whether this platform is enabled for the current environment.
    	 * Currently used by platform.js to select the proper implementation.
    	 * @private
    	 */
    	_enabled: typeof window !== 'undefined' && typeof document !== 'undefined',

    	/**
    	 * @private
    	 */
    	_ensureLoaded: function() {
    		if (this._loaded) {
    			return;
    		}

    		this._loaded = true;

    		// https://github.com/chartjs/Chart.js/issues/5208
    		if (!this.disableCSSInjection) {
    			injectCSS(this, stylesheet);
    		}
    	},

    	acquireContext: function(item, config) {
    		if (typeof item === 'string') {
    			item = document.getElementById(item);
    		} else if (item.length) {
    			// Support for array based queries (such as jQuery)
    			item = item[0];
    		}

    		if (item && item.canvas) {
    			// Support for any object associated to a canvas (including a context2d)
    			item = item.canvas;
    		}

    		// To prevent canvas fingerprinting, some add-ons undefine the getContext
    		// method, for example: https://github.com/kkapsner/CanvasBlocker
    		// https://github.com/chartjs/Chart.js/issues/2807
    		var context = item && item.getContext && item.getContext('2d');

    		// Load platform resources on first chart creation, to make possible to change
    		// platform options after importing the library (e.g. `disableCSSInjection`).
    		this._ensureLoaded();

    		// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is
    		// inside an iframe or when running in a protected environment. We could guess the
    		// types from their toString() value but let's keep things flexible and assume it's
    		// a sufficient condition if the item has a context2D which has item as `canvas`.
    		// https://github.com/chartjs/Chart.js/issues/3887
    		// https://github.com/chartjs/Chart.js/issues/4102
    		// https://github.com/chartjs/Chart.js/issues/4152
    		if (context && context.canvas === item) {
    			initCanvas(item, config);
    			return context;
    		}

    		return null;
    	},

    	releaseContext: function(context) {
    		var canvas = context.canvas;
    		if (!canvas[EXPANDO_KEY]) {
    			return;
    		}

    		var initial = canvas[EXPANDO_KEY].initial;
    		['height', 'width'].forEach(function(prop) {
    			var value = initial[prop];
    			if (helpers$1.isNullOrUndef(value)) {
    				canvas.removeAttribute(prop);
    			} else {
    				canvas.setAttribute(prop, value);
    			}
    		});

    		helpers$1.each(initial.style || {}, function(value, key) {
    			canvas.style[key] = value;
    		});

    		// The canvas render size might have been changed (and thus the state stack discarded),
    		// we can't use save() and restore() to restore the initial state. So make sure that at
    		// least the canvas context is reset to the default state by setting the canvas width.
    		// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
    		// eslint-disable-next-line no-self-assign
    		canvas.width = canvas.width;

    		delete canvas[EXPANDO_KEY];
    	},

    	addEventListener: function(chart, type, listener) {
    		var canvas = chart.canvas;
    		if (type === 'resize') {
    			// Note: the resize event is not supported on all browsers.
    			addResizeListener(canvas, listener, chart);
    			return;
    		}

    		var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
    		var proxies = expando.proxies || (expando.proxies = {});
    		var proxy = proxies[chart.id + '_' + type] = function(event) {
    			listener(fromNativeEvent(event, chart));
    		};

    		addListener(canvas, type, proxy);
    	},

    	removeEventListener: function(chart, type, listener) {
    		var canvas = chart.canvas;
    		if (type === 'resize') {
    			// Note: the resize event is not supported on all browsers.
    			removeResizeListener(canvas);
    			return;
    		}

    		var expando = listener[EXPANDO_KEY] || {};
    		var proxies = expando.proxies || {};
    		var proxy = proxies[chart.id + '_' + type];
    		if (!proxy) {
    			return;
    		}

    		removeListener(canvas, type, proxy);
    	}
    };

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use EventTarget.addEventListener instead.
     * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
     * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
     * @function Chart.helpers.addEvent
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.addEvent = addListener;

    /**
     * Provided for backward compatibility, use EventTarget.removeEventListener instead.
     * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
     * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
     * @function Chart.helpers.removeEvent
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.removeEvent = removeListener;

    // @TODO Make possible to select another platform at build time.
    var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;

    /**
     * @namespace Chart.platform
     * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
     * @since 2.4.0
     */
    var platform = helpers$1.extend({
    	/**
    	 * @since 2.7.0
    	 */
    	initialize: function() {},

    	/**
    	 * Called at chart construction time, returns a context2d instance implementing
    	 * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
    	 * @param {*} item - The native item from which to acquire context (platform specific)
    	 * @param {object} options - The chart options
    	 * @returns {CanvasRenderingContext2D} context2d instance
    	 */
    	acquireContext: function() {},

    	/**
    	 * Called at chart destruction time, releases any resources associated to the context
    	 * previously returned by the acquireContext() method.
    	 * @param {CanvasRenderingContext2D} context - The context2d instance
    	 * @returns {boolean} true if the method succeeded, else false
    	 */
    	releaseContext: function() {},

    	/**
    	 * Registers the specified listener on the given chart.
    	 * @param {Chart} chart - Chart from which to listen for event
    	 * @param {string} type - The ({@link IEvent}) type to listen for
    	 * @param {function} listener - Receives a notification (an object that implements
    	 * the {@link IEvent} interface) when an event of the specified type occurs.
    	 */
    	addEventListener: function() {},

    	/**
    	 * Removes the specified listener previously registered with addEventListener.
    	 * @param {Chart} chart - Chart from which to remove the listener
    	 * @param {string} type - The ({@link IEvent}) type to remove
    	 * @param {function} listener - The listener function to remove from the event target.
    	 */
    	removeEventListener: function() {}

    }, implementation);

    core_defaults._set('global', {
    	plugins: {}
    });

    /**
     * The plugin service singleton
     * @namespace Chart.plugins
     * @since 2.1.0
     */
    var core_plugins = {
    	/**
    	 * Globally registered plugins.
    	 * @private
    	 */
    	_plugins: [],

    	/**
    	 * This identifier is used to invalidate the descriptors cache attached to each chart
    	 * when a global plugin is registered or unregistered. In this case, the cache ID is
    	 * incremented and descriptors are regenerated during following API calls.
    	 * @private
    	 */
    	_cacheId: 0,

    	/**
    	 * Registers the given plugin(s) if not already registered.
    	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
    	 */
    	register: function(plugins) {
    		var p = this._plugins;
    		([]).concat(plugins).forEach(function(plugin) {
    			if (p.indexOf(plugin) === -1) {
    				p.push(plugin);
    			}
    		});

    		this._cacheId++;
    	},

    	/**
    	 * Unregisters the given plugin(s) only if registered.
    	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
    	 */
    	unregister: function(plugins) {
    		var p = this._plugins;
    		([]).concat(plugins).forEach(function(plugin) {
    			var idx = p.indexOf(plugin);
    			if (idx !== -1) {
    				p.splice(idx, 1);
    			}
    		});

    		this._cacheId++;
    	},

    	/**
    	 * Remove all registered plugins.
    	 * @since 2.1.5
    	 */
    	clear: function() {
    		this._plugins = [];
    		this._cacheId++;
    	},

    	/**
    	 * Returns the number of registered plugins?
    	 * @returns {number}
    	 * @since 2.1.5
    	 */
    	count: function() {
    		return this._plugins.length;
    	},

    	/**
    	 * Returns all registered plugin instances.
    	 * @returns {IPlugin[]} array of plugin objects.
    	 * @since 2.1.5
    	 */
    	getAll: function() {
    		return this._plugins;
    	},

    	/**
    	 * Calls enabled plugins for `chart` on the specified hook and with the given args.
    	 * This method immediately returns as soon as a plugin explicitly returns false. The
    	 * returned value can be used, for instance, to interrupt the current action.
    	 * @param {Chart} chart - The chart instance for which plugins should be called.
    	 * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
    	 * @param {Array} [args] - Extra arguments to apply to the hook call.
    	 * @returns {boolean} false if any of the plugins return false, else returns true.
    	 */
    	notify: function(chart, hook, args) {
    		var descriptors = this.descriptors(chart);
    		var ilen = descriptors.length;
    		var i, descriptor, plugin, params, method;

    		for (i = 0; i < ilen; ++i) {
    			descriptor = descriptors[i];
    			plugin = descriptor.plugin;
    			method = plugin[hook];
    			if (typeof method === 'function') {
    				params = [chart].concat(args || []);
    				params.push(descriptor.options);
    				if (method.apply(plugin, params) === false) {
    					return false;
    				}
    			}
    		}

    		return true;
    	},

    	/**
    	 * Returns descriptors of enabled plugins for the given chart.
    	 * @returns {object[]} [{ plugin, options }]
    	 * @private
    	 */
    	descriptors: function(chart) {
    		var cache = chart.$plugins || (chart.$plugins = {});
    		if (cache.id === this._cacheId) {
    			return cache.descriptors;
    		}

    		var plugins = [];
    		var descriptors = [];
    		var config = (chart && chart.config) || {};
    		var options = (config.options && config.options.plugins) || {};

    		this._plugins.concat(config.plugins || []).forEach(function(plugin) {
    			var idx = plugins.indexOf(plugin);
    			if (idx !== -1) {
    				return;
    			}

    			var id = plugin.id;
    			var opts = options[id];
    			if (opts === false) {
    				return;
    			}

    			if (opts === true) {
    				opts = helpers$1.clone(core_defaults.global.plugins[id]);
    			}

    			plugins.push(plugin);
    			descriptors.push({
    				plugin: plugin,
    				options: opts || {}
    			});
    		});

    		cache.descriptors = descriptors;
    		cache.id = this._cacheId;
    		return descriptors;
    	},

    	/**
    	 * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
    	 * but in some cases, this reference can be changed by the user when updating options.
    	 * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
    	 * @private
    	 */
    	_invalidate: function(chart) {
    		delete chart.$plugins;
    	}
    };

    var core_scaleService = {
    	// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
    	// use the new chart options to grab the correct scale
    	constructors: {},
    	// Use a registration function so that we can move to an ES6 map when we no longer need to support
    	// old browsers

    	// Scale config defaults
    	defaults: {},
    	registerScaleType: function(type, scaleConstructor, scaleDefaults) {
    		this.constructors[type] = scaleConstructor;
    		this.defaults[type] = helpers$1.clone(scaleDefaults);
    	},
    	getScaleConstructor: function(type) {
    		return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
    	},
    	getScaleDefaults: function(type) {
    		// Return the scale defaults merged with the global settings so that we always use the latest ones
    		return this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};
    	},
    	updateScaleDefaults: function(type, additions) {
    		var me = this;
    		if (me.defaults.hasOwnProperty(type)) {
    			me.defaults[type] = helpers$1.extend(me.defaults[type], additions);
    		}
    	},
    	addScalesToLayout: function(chart) {
    		// Adds each scale to the chart.boxes array to be sized accordingly
    		helpers$1.each(chart.scales, function(scale) {
    			// Set ILayoutItem parameters for backwards compatibility
    			scale.fullWidth = scale.options.fullWidth;
    			scale.position = scale.options.position;
    			scale.weight = scale.options.weight;
    			core_layouts.addBox(chart, scale);
    		});
    	}
    };

    var valueOrDefault$7 = helpers$1.valueOrDefault;

    core_defaults._set('global', {
    	tooltips: {
    		enabled: true,
    		custom: null,
    		mode: 'nearest',
    		position: 'average',
    		intersect: true,
    		backgroundColor: 'rgba(0,0,0,0.8)',
    		titleFontStyle: 'bold',
    		titleSpacing: 2,
    		titleMarginBottom: 6,
    		titleFontColor: '#fff',
    		titleAlign: 'left',
    		bodySpacing: 2,
    		bodyFontColor: '#fff',
    		bodyAlign: 'left',
    		footerFontStyle: 'bold',
    		footerSpacing: 2,
    		footerMarginTop: 6,
    		footerFontColor: '#fff',
    		footerAlign: 'left',
    		yPadding: 6,
    		xPadding: 6,
    		caretPadding: 2,
    		caretSize: 5,
    		cornerRadius: 6,
    		multiKeyBackground: '#fff',
    		displayColors: true,
    		borderColor: 'rgba(0,0,0,0)',
    		borderWidth: 0,
    		callbacks: {
    			// Args are: (tooltipItems, data)
    			beforeTitle: helpers$1.noop,
    			title: function(tooltipItems, data) {
    				var title = '';
    				var labels = data.labels;
    				var labelCount = labels ? labels.length : 0;

    				if (tooltipItems.length > 0) {
    					var item = tooltipItems[0];
    					if (item.label) {
    						title = item.label;
    					} else if (item.xLabel) {
    						title = item.xLabel;
    					} else if (labelCount > 0 && item.index < labelCount) {
    						title = labels[item.index];
    					}
    				}

    				return title;
    			},
    			afterTitle: helpers$1.noop,

    			// Args are: (tooltipItems, data)
    			beforeBody: helpers$1.noop,

    			// Args are: (tooltipItem, data)
    			beforeLabel: helpers$1.noop,
    			label: function(tooltipItem, data) {
    				var label = data.datasets[tooltipItem.datasetIndex].label || '';

    				if (label) {
    					label += ': ';
    				}
    				if (!helpers$1.isNullOrUndef(tooltipItem.value)) {
    					label += tooltipItem.value;
    				} else {
    					label += tooltipItem.yLabel;
    				}
    				return label;
    			},
    			labelColor: function(tooltipItem, chart) {
    				var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
    				var activeElement = meta.data[tooltipItem.index];
    				var view = activeElement._view;
    				return {
    					borderColor: view.borderColor,
    					backgroundColor: view.backgroundColor
    				};
    			},
    			labelTextColor: function() {
    				return this._options.bodyFontColor;
    			},
    			afterLabel: helpers$1.noop,

    			// Args are: (tooltipItems, data)
    			afterBody: helpers$1.noop,

    			// Args are: (tooltipItems, data)
    			beforeFooter: helpers$1.noop,
    			footer: helpers$1.noop,
    			afterFooter: helpers$1.noop
    		}
    	}
    });

    var positioners = {
    	/**
    	 * Average mode places the tooltip at the average position of the elements shown
    	 * @function Chart.Tooltip.positioners.average
    	 * @param elements {ChartElement[]} the elements being displayed in the tooltip
    	 * @returns {object} tooltip position
    	 */
    	average: function(elements) {
    		if (!elements.length) {
    			return false;
    		}

    		var i, len;
    		var x = 0;
    		var y = 0;
    		var count = 0;

    		for (i = 0, len = elements.length; i < len; ++i) {
    			var el = elements[i];
    			if (el && el.hasValue()) {
    				var pos = el.tooltipPosition();
    				x += pos.x;
    				y += pos.y;
    				++count;
    			}
    		}

    		return {
    			x: x / count,
    			y: y / count
    		};
    	},

    	/**
    	 * Gets the tooltip position nearest of the item nearest to the event position
    	 * @function Chart.Tooltip.positioners.nearest
    	 * @param elements {Chart.Element[]} the tooltip elements
    	 * @param eventPosition {object} the position of the event in canvas coordinates
    	 * @returns {object} the tooltip position
    	 */
    	nearest: function(elements, eventPosition) {
    		var x = eventPosition.x;
    		var y = eventPosition.y;
    		var minDistance = Number.POSITIVE_INFINITY;
    		var i, len, nearestElement;

    		for (i = 0, len = elements.length; i < len; ++i) {
    			var el = elements[i];
    			if (el && el.hasValue()) {
    				var center = el.getCenterPoint();
    				var d = helpers$1.distanceBetweenPoints(eventPosition, center);

    				if (d < minDistance) {
    					minDistance = d;
    					nearestElement = el;
    				}
    			}
    		}

    		if (nearestElement) {
    			var tp = nearestElement.tooltipPosition();
    			x = tp.x;
    			y = tp.y;
    		}

    		return {
    			x: x,
    			y: y
    		};
    	}
    };

    // Helper to push or concat based on if the 2nd parameter is an array or not
    function pushOrConcat(base, toPush) {
    	if (toPush) {
    		if (helpers$1.isArray(toPush)) {
    			// base = base.concat(toPush);
    			Array.prototype.push.apply(base, toPush);
    		} else {
    			base.push(toPush);
    		}
    	}

    	return base;
    }

    /**
     * Returns array of strings split by newline
     * @param {string} value - The value to split by newline.
     * @returns {string[]} value if newline present - Returned from String split() method
     * @function
     */
    function splitNewlines(str) {
    	if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
    		return str.split('\n');
    	}
    	return str;
    }


    /**
     * Private helper to create a tooltip item model
     * @param element - the chart element (point, arc, bar) to create the tooltip item for
     * @return new tooltip item
     */
    function createTooltipItem(element) {
    	var xScale = element._xScale;
    	var yScale = element._yScale || element._scale; // handle radar || polarArea charts
    	var index = element._index;
    	var datasetIndex = element._datasetIndex;
    	var controller = element._chart.getDatasetMeta(datasetIndex).controller;
    	var indexScale = controller._getIndexScale();
    	var valueScale = controller._getValueScale();

    	return {
    		xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
    		yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
    		label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',
    		value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',
    		index: index,
    		datasetIndex: datasetIndex,
    		x: element._model.x,
    		y: element._model.y
    	};
    }

    /**
     * Helper to get the reset model for the tooltip
     * @param tooltipOpts {object} the tooltip options
     */
    function getBaseModel(tooltipOpts) {
    	var globalDefaults = core_defaults.global;

    	return {
    		// Positioning
    		xPadding: tooltipOpts.xPadding,
    		yPadding: tooltipOpts.yPadding,
    		xAlign: tooltipOpts.xAlign,
    		yAlign: tooltipOpts.yAlign,

    		// Body
    		bodyFontColor: tooltipOpts.bodyFontColor,
    		_bodyFontFamily: valueOrDefault$7(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
    		_bodyFontStyle: valueOrDefault$7(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
    		_bodyAlign: tooltipOpts.bodyAlign,
    		bodyFontSize: valueOrDefault$7(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
    		bodySpacing: tooltipOpts.bodySpacing,

    		// Title
    		titleFontColor: tooltipOpts.titleFontColor,
    		_titleFontFamily: valueOrDefault$7(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
    		_titleFontStyle: valueOrDefault$7(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
    		titleFontSize: valueOrDefault$7(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
    		_titleAlign: tooltipOpts.titleAlign,
    		titleSpacing: tooltipOpts.titleSpacing,
    		titleMarginBottom: tooltipOpts.titleMarginBottom,

    		// Footer
    		footerFontColor: tooltipOpts.footerFontColor,
    		_footerFontFamily: valueOrDefault$7(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
    		_footerFontStyle: valueOrDefault$7(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
    		footerFontSize: valueOrDefault$7(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
    		_footerAlign: tooltipOpts.footerAlign,
    		footerSpacing: tooltipOpts.footerSpacing,
    		footerMarginTop: tooltipOpts.footerMarginTop,

    		// Appearance
    		caretSize: tooltipOpts.caretSize,
    		cornerRadius: tooltipOpts.cornerRadius,
    		backgroundColor: tooltipOpts.backgroundColor,
    		opacity: 0,
    		legendColorBackground: tooltipOpts.multiKeyBackground,
    		displayColors: tooltipOpts.displayColors,
    		borderColor: tooltipOpts.borderColor,
    		borderWidth: tooltipOpts.borderWidth
    	};
    }

    /**
     * Get the size of the tooltip
     */
    function getTooltipSize(tooltip, model) {
    	var ctx = tooltip._chart.ctx;

    	var height = model.yPadding * 2; // Tooltip Padding
    	var width = 0;

    	// Count of all lines in the body
    	var body = model.body;
    	var combinedBodyLength = body.reduce(function(count, bodyItem) {
    		return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
    	}, 0);
    	combinedBodyLength += model.beforeBody.length + model.afterBody.length;

    	var titleLineCount = model.title.length;
    	var footerLineCount = model.footer.length;
    	var titleFontSize = model.titleFontSize;
    	var bodyFontSize = model.bodyFontSize;
    	var footerFontSize = model.footerFontSize;

    	height += titleLineCount * titleFontSize; // Title Lines
    	height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
    	height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
    	height += combinedBodyLength * bodyFontSize; // Body Lines
    	height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
    	height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
    	height += footerLineCount * (footerFontSize); // Footer Lines
    	height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing

    	// Title width
    	var widthPadding = 0;
    	var maxLineWidth = function(line) {
    		width = Math.max(width, ctx.measureText(line).width + widthPadding);
    	};

    	ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
    	helpers$1.each(model.title, maxLineWidth);

    	// Body width
    	ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
    	helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);

    	// Body lines may include some extra width due to the color box
    	widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
    	helpers$1.each(body, function(bodyItem) {
    		helpers$1.each(bodyItem.before, maxLineWidth);
    		helpers$1.each(bodyItem.lines, maxLineWidth);
    		helpers$1.each(bodyItem.after, maxLineWidth);
    	});

    	// Reset back to 0
    	widthPadding = 0;

    	// Footer width
    	ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
    	helpers$1.each(model.footer, maxLineWidth);

    	// Add padding
    	width += 2 * model.xPadding;

    	return {
    		width: width,
    		height: height
    	};
    }

    /**
     * Helper to get the alignment of a tooltip given the size
     */
    function determineAlignment(tooltip, size) {
    	var model = tooltip._model;
    	var chart = tooltip._chart;
    	var chartArea = tooltip._chart.chartArea;
    	var xAlign = 'center';
    	var yAlign = 'center';

    	if (model.y < size.height) {
    		yAlign = 'top';
    	} else if (model.y > (chart.height - size.height)) {
    		yAlign = 'bottom';
    	}

    	var lf, rf; // functions to determine left, right alignment
    	var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
    	var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
    	var midX = (chartArea.left + chartArea.right) / 2;
    	var midY = (chartArea.top + chartArea.bottom) / 2;

    	if (yAlign === 'center') {
    		lf = function(x) {
    			return x <= midX;
    		};
    		rf = function(x) {
    			return x > midX;
    		};
    	} else {
    		lf = function(x) {
    			return x <= (size.width / 2);
    		};
    		rf = function(x) {
    			return x >= (chart.width - (size.width / 2));
    		};
    	}

    	olf = function(x) {
    		return x + size.width + model.caretSize + model.caretPadding > chart.width;
    	};
    	orf = function(x) {
    		return x - size.width - model.caretSize - model.caretPadding < 0;
    	};
    	yf = function(y) {
    		return y <= midY ? 'top' : 'bottom';
    	};

    	if (lf(model.x)) {
    		xAlign = 'left';

    		// Is tooltip too wide and goes over the right side of the chart.?
    		if (olf(model.x)) {
    			xAlign = 'center';
    			yAlign = yf(model.y);
    		}
    	} else if (rf(model.x)) {
    		xAlign = 'right';

    		// Is tooltip too wide and goes outside left edge of canvas?
    		if (orf(model.x)) {
    			xAlign = 'center';
    			yAlign = yf(model.y);
    		}
    	}

    	var opts = tooltip._options;
    	return {
    		xAlign: opts.xAlign ? opts.xAlign : xAlign,
    		yAlign: opts.yAlign ? opts.yAlign : yAlign
    	};
    }

    /**
     * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
     */
    function getBackgroundPoint(vm, size, alignment, chart) {
    	// Background Position
    	var x = vm.x;
    	var y = vm.y;

    	var caretSize = vm.caretSize;
    	var caretPadding = vm.caretPadding;
    	var cornerRadius = vm.cornerRadius;
    	var xAlign = alignment.xAlign;
    	var yAlign = alignment.yAlign;
    	var paddingAndSize = caretSize + caretPadding;
    	var radiusAndPadding = cornerRadius + caretPadding;

    	if (xAlign === 'right') {
    		x -= size.width;
    	} else if (xAlign === 'center') {
    		x -= (size.width / 2);
    		if (x + size.width > chart.width) {
    			x = chart.width - size.width;
    		}
    		if (x < 0) {
    			x = 0;
    		}
    	}

    	if (yAlign === 'top') {
    		y += paddingAndSize;
    	} else if (yAlign === 'bottom') {
    		y -= size.height + paddingAndSize;
    	} else {
    		y -= (size.height / 2);
    	}

    	if (yAlign === 'center') {
    		if (xAlign === 'left') {
    			x += paddingAndSize;
    		} else if (xAlign === 'right') {
    			x -= paddingAndSize;
    		}
    	} else if (xAlign === 'left') {
    		x -= radiusAndPadding;
    	} else if (xAlign === 'right') {
    		x += radiusAndPadding;
    	}

    	return {
    		x: x,
    		y: y
    	};
    }

    function getAlignedX(vm, align) {
    	return align === 'center'
    		? vm.x + vm.width / 2
    		: align === 'right'
    			? vm.x + vm.width - vm.xPadding
    			: vm.x + vm.xPadding;
    }

    /**
     * Helper to build before and after body lines
     */
    function getBeforeAfterBodyLines(callback) {
    	return pushOrConcat([], splitNewlines(callback));
    }

    var exports$3 = core_element.extend({
    	initialize: function() {
    		this._model = getBaseModel(this._options);
    		this._lastActive = [];
    	},

    	// Get the title
    	// Args are: (tooltipItem, data)
    	getTitle: function() {
    		var me = this;
    		var opts = me._options;
    		var callbacks = opts.callbacks;

    		var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
    		var title = callbacks.title.apply(me, arguments);
    		var afterTitle = callbacks.afterTitle.apply(me, arguments);

    		var lines = [];
    		lines = pushOrConcat(lines, splitNewlines(beforeTitle));
    		lines = pushOrConcat(lines, splitNewlines(title));
    		lines = pushOrConcat(lines, splitNewlines(afterTitle));

    		return lines;
    	},

    	// Args are: (tooltipItem, data)
    	getBeforeBody: function() {
    		return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
    	},

    	// Args are: (tooltipItem, data)
    	getBody: function(tooltipItems, data) {
    		var me = this;
    		var callbacks = me._options.callbacks;
    		var bodyItems = [];

    		helpers$1.each(tooltipItems, function(tooltipItem) {
    			var bodyItem = {
    				before: [],
    				lines: [],
    				after: []
    			};
    			pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
    			pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
    			pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));

    			bodyItems.push(bodyItem);
    		});

    		return bodyItems;
    	},

    	// Args are: (tooltipItem, data)
    	getAfterBody: function() {
    		return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
    	},

    	// Get the footer and beforeFooter and afterFooter lines
    	// Args are: (tooltipItem, data)
    	getFooter: function() {
    		var me = this;
    		var callbacks = me._options.callbacks;

    		var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
    		var footer = callbacks.footer.apply(me, arguments);
    		var afterFooter = callbacks.afterFooter.apply(me, arguments);

    		var lines = [];
    		lines = pushOrConcat(lines, splitNewlines(beforeFooter));
    		lines = pushOrConcat(lines, splitNewlines(footer));
    		lines = pushOrConcat(lines, splitNewlines(afterFooter));

    		return lines;
    	},

    	update: function(changed) {
    		var me = this;
    		var opts = me._options;

    		// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
    		// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
    		// which breaks any animations.
    		var existingModel = me._model;
    		var model = me._model = getBaseModel(opts);
    		var active = me._active;

    		var data = me._data;

    		// In the case where active.length === 0 we need to keep these at existing values for good animations
    		var alignment = {
    			xAlign: existingModel.xAlign,
    			yAlign: existingModel.yAlign
    		};
    		var backgroundPoint = {
    			x: existingModel.x,
    			y: existingModel.y
    		};
    		var tooltipSize = {
    			width: existingModel.width,
    			height: existingModel.height
    		};
    		var tooltipPosition = {
    			x: existingModel.caretX,
    			y: existingModel.caretY
    		};

    		var i, len;

    		if (active.length) {
    			model.opacity = 1;

    			var labelColors = [];
    			var labelTextColors = [];
    			tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);

    			var tooltipItems = [];
    			for (i = 0, len = active.length; i < len; ++i) {
    				tooltipItems.push(createTooltipItem(active[i]));
    			}

    			// If the user provided a filter function, use it to modify the tooltip items
    			if (opts.filter) {
    				tooltipItems = tooltipItems.filter(function(a) {
    					return opts.filter(a, data);
    				});
    			}

    			// If the user provided a sorting function, use it to modify the tooltip items
    			if (opts.itemSort) {
    				tooltipItems = tooltipItems.sort(function(a, b) {
    					return opts.itemSort(a, b, data);
    				});
    			}

    			// Determine colors for boxes
    			helpers$1.each(tooltipItems, function(tooltipItem) {
    				labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
    				labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
    			});


    			// Build the Text Lines
    			model.title = me.getTitle(tooltipItems, data);
    			model.beforeBody = me.getBeforeBody(tooltipItems, data);
    			model.body = me.getBody(tooltipItems, data);
    			model.afterBody = me.getAfterBody(tooltipItems, data);
    			model.footer = me.getFooter(tooltipItems, data);

    			// Initial positioning and colors
    			model.x = tooltipPosition.x;
    			model.y = tooltipPosition.y;
    			model.caretPadding = opts.caretPadding;
    			model.labelColors = labelColors;
    			model.labelTextColors = labelTextColors;

    			// data points
    			model.dataPoints = tooltipItems;

    			// We need to determine alignment of the tooltip
    			tooltipSize = getTooltipSize(this, model);
    			alignment = determineAlignment(this, tooltipSize);
    			// Final Size and Position
    			backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
    		} else {
    			model.opacity = 0;
    		}

    		model.xAlign = alignment.xAlign;
    		model.yAlign = alignment.yAlign;
    		model.x = backgroundPoint.x;
    		model.y = backgroundPoint.y;
    		model.width = tooltipSize.width;
    		model.height = tooltipSize.height;

    		// Point where the caret on the tooltip points to
    		model.caretX = tooltipPosition.x;
    		model.caretY = tooltipPosition.y;

    		me._model = model;

    		if (changed && opts.custom) {
    			opts.custom.call(me, model);
    		}

    		return me;
    	},

    	drawCaret: function(tooltipPoint, size) {
    		var ctx = this._chart.ctx;
    		var vm = this._view;
    		var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);

    		ctx.lineTo(caretPosition.x1, caretPosition.y1);
    		ctx.lineTo(caretPosition.x2, caretPosition.y2);
    		ctx.lineTo(caretPosition.x3, caretPosition.y3);
    	},
    	getCaretPosition: function(tooltipPoint, size, vm) {
    		var x1, x2, x3, y1, y2, y3;
    		var caretSize = vm.caretSize;
    		var cornerRadius = vm.cornerRadius;
    		var xAlign = vm.xAlign;
    		var yAlign = vm.yAlign;
    		var ptX = tooltipPoint.x;
    		var ptY = tooltipPoint.y;
    		var width = size.width;
    		var height = size.height;

    		if (yAlign === 'center') {
    			y2 = ptY + (height / 2);

    			if (xAlign === 'left') {
    				x1 = ptX;
    				x2 = x1 - caretSize;
    				x3 = x1;

    				y1 = y2 + caretSize;
    				y3 = y2 - caretSize;
    			} else {
    				x1 = ptX + width;
    				x2 = x1 + caretSize;
    				x3 = x1;

    				y1 = y2 - caretSize;
    				y3 = y2 + caretSize;
    			}
    		} else {
    			if (xAlign === 'left') {
    				x2 = ptX + cornerRadius + (caretSize);
    				x1 = x2 - caretSize;
    				x3 = x2 + caretSize;
    			} else if (xAlign === 'right') {
    				x2 = ptX + width - cornerRadius - caretSize;
    				x1 = x2 - caretSize;
    				x3 = x2 + caretSize;
    			} else {
    				x2 = vm.caretX;
    				x1 = x2 - caretSize;
    				x3 = x2 + caretSize;
    			}
    			if (yAlign === 'top') {
    				y1 = ptY;
    				y2 = y1 - caretSize;
    				y3 = y1;
    			} else {
    				y1 = ptY + height;
    				y2 = y1 + caretSize;
    				y3 = y1;
    				// invert drawing order
    				var tmp = x3;
    				x3 = x1;
    				x1 = tmp;
    			}
    		}
    		return {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};
    	},

    	drawTitle: function(pt, vm, ctx) {
    		var title = vm.title;

    		if (title.length) {
    			pt.x = getAlignedX(vm, vm._titleAlign);

    			ctx.textAlign = vm._titleAlign;
    			ctx.textBaseline = 'top';

    			var titleFontSize = vm.titleFontSize;
    			var titleSpacing = vm.titleSpacing;

    			ctx.fillStyle = vm.titleFontColor;
    			ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);

    			var i, len;
    			for (i = 0, len = title.length; i < len; ++i) {
    				ctx.fillText(title[i], pt.x, pt.y);
    				pt.y += titleFontSize + titleSpacing; // Line Height and spacing

    				if (i + 1 === title.length) {
    					pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
    				}
    			}
    		}
    	},

    	drawBody: function(pt, vm, ctx) {
    		var bodyFontSize = vm.bodyFontSize;
    		var bodySpacing = vm.bodySpacing;
    		var bodyAlign = vm._bodyAlign;
    		var body = vm.body;
    		var drawColorBoxes = vm.displayColors;
    		var labelColors = vm.labelColors;
    		var xLinePadding = 0;
    		var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;
    		var textColor;

    		ctx.textAlign = bodyAlign;
    		ctx.textBaseline = 'top';
    		ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);

    		pt.x = getAlignedX(vm, bodyAlign);

    		// Before Body
    		var fillLineOfText = function(line) {
    			ctx.fillText(line, pt.x + xLinePadding, pt.y);
    			pt.y += bodyFontSize + bodySpacing;
    		};

    		// Before body lines
    		ctx.fillStyle = vm.bodyFontColor;
    		helpers$1.each(vm.beforeBody, fillLineOfText);

    		xLinePadding = drawColorBoxes && bodyAlign !== 'right'
    			? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)
    			: 0;

    		// Draw body lines now
    		helpers$1.each(body, function(bodyItem, i) {
    			textColor = vm.labelTextColors[i];
    			ctx.fillStyle = textColor;
    			helpers$1.each(bodyItem.before, fillLineOfText);

    			helpers$1.each(bodyItem.lines, function(line) {
    				// Draw Legend-like boxes if needed
    				if (drawColorBoxes) {
    					// Fill a white rect so that colours merge nicely if the opacity is < 1
    					ctx.fillStyle = vm.legendColorBackground;
    					ctx.fillRect(colorX, pt.y, bodyFontSize, bodyFontSize);

    					// Border
    					ctx.lineWidth = 1;
    					ctx.strokeStyle = labelColors[i].borderColor;
    					ctx.strokeRect(colorX, pt.y, bodyFontSize, bodyFontSize);

    					// Inner square
    					ctx.fillStyle = labelColors[i].backgroundColor;
    					ctx.fillRect(colorX + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
    					ctx.fillStyle = textColor;
    				}

    				fillLineOfText(line);
    			});

    			helpers$1.each(bodyItem.after, fillLineOfText);
    		});

    		// Reset back to 0 for after body
    		xLinePadding = 0;

    		// After body lines
    		helpers$1.each(vm.afterBody, fillLineOfText);
    		pt.y -= bodySpacing; // Remove last body spacing
    	},

    	drawFooter: function(pt, vm, ctx) {
    		var footer = vm.footer;

    		if (footer.length) {
    			pt.x = getAlignedX(vm, vm._footerAlign);
    			pt.y += vm.footerMarginTop;

    			ctx.textAlign = vm._footerAlign;
    			ctx.textBaseline = 'top';

    			ctx.fillStyle = vm.footerFontColor;
    			ctx.font = helpers$1.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);

    			helpers$1.each(footer, function(line) {
    				ctx.fillText(line, pt.x, pt.y);
    				pt.y += vm.footerFontSize + vm.footerSpacing;
    			});
    		}
    	},

    	drawBackground: function(pt, vm, ctx, tooltipSize) {
    		ctx.fillStyle = vm.backgroundColor;
    		ctx.strokeStyle = vm.borderColor;
    		ctx.lineWidth = vm.borderWidth;
    		var xAlign = vm.xAlign;
    		var yAlign = vm.yAlign;
    		var x = pt.x;
    		var y = pt.y;
    		var width = tooltipSize.width;
    		var height = tooltipSize.height;
    		var radius = vm.cornerRadius;

    		ctx.beginPath();
    		ctx.moveTo(x + radius, y);
    		if (yAlign === 'top') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x + width - radius, y);
    		ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    		if (yAlign === 'center' && xAlign === 'right') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x + width, y + height - radius);
    		ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    		if (yAlign === 'bottom') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x + radius, y + height);
    		ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    		if (yAlign === 'center' && xAlign === 'left') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x, y + radius);
    		ctx.quadraticCurveTo(x, y, x + radius, y);
    		ctx.closePath();

    		ctx.fill();

    		if (vm.borderWidth > 0) {
    			ctx.stroke();
    		}
    	},

    	draw: function() {
    		var ctx = this._chart.ctx;
    		var vm = this._view;

    		if (vm.opacity === 0) {
    			return;
    		}

    		var tooltipSize = {
    			width: vm.width,
    			height: vm.height
    		};
    		var pt = {
    			x: vm.x,
    			y: vm.y
    		};

    		// IE11/Edge does not like very small opacities, so snap to 0
    		var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;

    		// Truthy/falsey value for empty tooltip
    		var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;

    		if (this._options.enabled && hasTooltipContent) {
    			ctx.save();
    			ctx.globalAlpha = opacity;

    			// Draw Background
    			this.drawBackground(pt, vm, ctx, tooltipSize);

    			// Draw Title, Body, and Footer
    			pt.y += vm.yPadding;

    			// Titles
    			this.drawTitle(pt, vm, ctx);

    			// Body
    			this.drawBody(pt, vm, ctx);

    			// Footer
    			this.drawFooter(pt, vm, ctx);

    			ctx.restore();
    		}
    	},

    	/**
    	 * Handle an event
    	 * @private
    	 * @param {IEvent} event - The event to handle
    	 * @returns {boolean} true if the tooltip changed
    	 */
    	handleEvent: function(e) {
    		var me = this;
    		var options = me._options;
    		var changed = false;

    		me._lastActive = me._lastActive || [];

    		// Find Active Elements for tooltips
    		if (e.type === 'mouseout') {
    			me._active = [];
    		} else {
    			me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);
    		}

    		// Remember Last Actives
    		changed = !helpers$1.arrayEquals(me._active, me._lastActive);

    		// Only handle target event on tooltip change
    		if (changed) {
    			me._lastActive = me._active;

    			if (options.enabled || options.custom) {
    				me._eventPosition = {
    					x: e.x,
    					y: e.y
    				};

    				me.update(true);
    				me.pivot();
    			}
    		}

    		return changed;
    	}
    });

    /**
     * @namespace Chart.Tooltip.positioners
     */
    var positioners_1 = positioners;

    var core_tooltip = exports$3;
    core_tooltip.positioners = positioners_1;

    var valueOrDefault$8 = helpers$1.valueOrDefault;

    core_defaults._set('global', {
    	elements: {},
    	events: [
    		'mousemove',
    		'mouseout',
    		'click',
    		'touchstart',
    		'touchmove'
    	],
    	hover: {
    		onHover: null,
    		mode: 'nearest',
    		intersect: true,
    		animationDuration: 400
    	},
    	onClick: null,
    	maintainAspectRatio: true,
    	responsive: true,
    	responsiveAnimationDuration: 0
    });

    /**
     * Recursively merge the given config objects representing the `scales` option
     * by incorporating scale defaults in `xAxes` and `yAxes` array items, then
     * returns a deep copy of the result, thus doesn't alter inputs.
     */
    function mergeScaleConfig(/* config objects ... */) {
    	return helpers$1.merge({}, [].slice.call(arguments), {
    		merger: function(key, target, source, options) {
    			if (key === 'xAxes' || key === 'yAxes') {
    				var slen = source[key].length;
    				var i, type, scale;

    				if (!target[key]) {
    					target[key] = [];
    				}

    				for (i = 0; i < slen; ++i) {
    					scale = source[key][i];
    					type = valueOrDefault$8(scale.type, key === 'xAxes' ? 'category' : 'linear');

    					if (i >= target[key].length) {
    						target[key].push({});
    					}

    					if (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {
    						// new/untyped scale or type changed: let's apply the new defaults
    						// then merge source scale to correctly overwrite the defaults.
    						helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);
    					} else {
    						// scales type are the same
    						helpers$1.merge(target[key][i], scale);
    					}
    				}
    			} else {
    				helpers$1._merger(key, target, source, options);
    			}
    		}
    	});
    }

    /**
     * Recursively merge the given config objects as the root options by handling
     * default scale options for the `scales` and `scale` properties, then returns
     * a deep copy of the result, thus doesn't alter inputs.
     */
    function mergeConfig(/* config objects ... */) {
    	return helpers$1.merge({}, [].slice.call(arguments), {
    		merger: function(key, target, source, options) {
    			var tval = target[key] || {};
    			var sval = source[key];

    			if (key === 'scales') {
    				// scale config merging is complex. Add our own function here for that
    				target[key] = mergeScaleConfig(tval, sval);
    			} else if (key === 'scale') {
    				// used in polar area & radar charts since there is only one scale
    				target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);
    			} else {
    				helpers$1._merger(key, target, source, options);
    			}
    		}
    	});
    }

    function initConfig(config) {
    	config = config || {};

    	// Do NOT use mergeConfig for the data object because this method merges arrays
    	// and so would change references to labels and datasets, preventing data updates.
    	var data = config.data = config.data || {};
    	data.datasets = data.datasets || [];
    	data.labels = data.labels || [];

    	config.options = mergeConfig(
    		core_defaults.global,
    		core_defaults[config.type],
    		config.options || {});

    	return config;
    }

    function updateConfig(chart) {
    	var newOptions = chart.options;

    	helpers$1.each(chart.scales, function(scale) {
    		core_layouts.removeBox(chart, scale);
    	});

    	newOptions = mergeConfig(
    		core_defaults.global,
    		core_defaults[chart.config.type],
    		newOptions);

    	chart.options = chart.config.options = newOptions;
    	chart.ensureScalesHaveIDs();
    	chart.buildOrUpdateScales();

    	// Tooltip
    	chart.tooltip._options = newOptions.tooltips;
    	chart.tooltip.initialize();
    }

    function positionIsHorizontal(position) {
    	return position === 'top' || position === 'bottom';
    }

    var Chart = function(item, config) {
    	this.construct(item, config);
    	return this;
    };

    helpers$1.extend(Chart.prototype, /** @lends Chart */ {
    	/**
    	 * @private
    	 */
    	construct: function(item, config) {
    		var me = this;

    		config = initConfig(config);

    		var context = platform.acquireContext(item, config);
    		var canvas = context && context.canvas;
    		var height = canvas && canvas.height;
    		var width = canvas && canvas.width;

    		me.id = helpers$1.uid();
    		me.ctx = context;
    		me.canvas = canvas;
    		me.config = config;
    		me.width = width;
    		me.height = height;
    		me.aspectRatio = height ? width / height : null;
    		me.options = config.options;
    		me._bufferedRender = false;

    		/**
    		 * Provided for backward compatibility, Chart and Chart.Controller have been merged,
    		 * the "instance" still need to be defined since it might be called from plugins.
    		 * @prop Chart#chart
    		 * @deprecated since version 2.6.0
    		 * @todo remove at version 3
    		 * @private
    		 */
    		me.chart = me;
    		me.controller = me; // chart.chart.controller #inception

    		// Add the chart instance to the global namespace
    		Chart.instances[me.id] = me;

    		// Define alias to the config data: `chart.data === chart.config.data`
    		Object.defineProperty(me, 'data', {
    			get: function() {
    				return me.config.data;
    			},
    			set: function(value) {
    				me.config.data = value;
    			}
    		});

    		if (!context || !canvas) {
    			// The given item is not a compatible context2d element, let's return before finalizing
    			// the chart initialization but after setting basic chart / controller properties that
    			// can help to figure out that the chart is not valid (e.g chart.canvas !== null);
    			// https://github.com/chartjs/Chart.js/issues/2807
    			console.error("Failed to create chart: can't acquire context from the given item");
    			return;
    		}

    		me.initialize();
    		me.update();
    	},

    	/**
    	 * @private
    	 */
    	initialize: function() {
    		var me = this;

    		// Before init plugin notification
    		core_plugins.notify(me, 'beforeInit');

    		helpers$1.retinaScale(me, me.options.devicePixelRatio);

    		me.bindEvents();

    		if (me.options.responsive) {
    			// Initial resize before chart draws (must be silent to preserve initial animations).
    			me.resize(true);
    		}

    		// Make sure scales have IDs and are built before we build any controllers.
    		me.ensureScalesHaveIDs();
    		me.buildOrUpdateScales();
    		me.initToolTip();

    		// After init plugin notification
    		core_plugins.notify(me, 'afterInit');

    		return me;
    	},

    	clear: function() {
    		helpers$1.canvas.clear(this);
    		return this;
    	},

    	stop: function() {
    		// Stops any current animation loop occurring
    		core_animations.cancelAnimation(this);
    		return this;
    	},

    	resize: function(silent) {
    		var me = this;
    		var options = me.options;
    		var canvas = me.canvas;
    		var aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;

    		// the canvas render width and height will be casted to integers so make sure that
    		// the canvas display style uses the same integer values to avoid blurring effect.

    		// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed
    		var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));
    		var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));

    		if (me.width === newWidth && me.height === newHeight) {
    			return;
    		}

    		canvas.width = me.width = newWidth;
    		canvas.height = me.height = newHeight;
    		canvas.style.width = newWidth + 'px';
    		canvas.style.height = newHeight + 'px';

    		helpers$1.retinaScale(me, options.devicePixelRatio);

    		if (!silent) {
    			// Notify any plugins about the resize
    			var newSize = {width: newWidth, height: newHeight};
    			core_plugins.notify(me, 'resize', [newSize]);

    			// Notify of resize
    			if (options.onResize) {
    				options.onResize(me, newSize);
    			}

    			me.stop();
    			me.update({
    				duration: options.responsiveAnimationDuration
    			});
    		}
    	},

    	ensureScalesHaveIDs: function() {
    		var options = this.options;
    		var scalesOptions = options.scales || {};
    		var scaleOptions = options.scale;

    		helpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {
    			xAxisOptions.id = xAxisOptions.id || ('x-axis-' + index);
    		});

    		helpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {
    			yAxisOptions.id = yAxisOptions.id || ('y-axis-' + index);
    		});

    		if (scaleOptions) {
    			scaleOptions.id = scaleOptions.id || 'scale';
    		}
    	},

    	/**
    	 * Builds a map of scale ID to scale object for future lookup.
    	 */
    	buildOrUpdateScales: function() {
    		var me = this;
    		var options = me.options;
    		var scales = me.scales || {};
    		var items = [];
    		var updated = Object.keys(scales).reduce(function(obj, id) {
    			obj[id] = false;
    			return obj;
    		}, {});

    		if (options.scales) {
    			items = items.concat(
    				(options.scales.xAxes || []).map(function(xAxisOptions) {
    					return {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};
    				}),
    				(options.scales.yAxes || []).map(function(yAxisOptions) {
    					return {options: yAxisOptions, dtype: 'linear', dposition: 'left'};
    				})
    			);
    		}

    		if (options.scale) {
    			items.push({
    				options: options.scale,
    				dtype: 'radialLinear',
    				isDefault: true,
    				dposition: 'chartArea'
    			});
    		}

    		helpers$1.each(items, function(item) {
    			var scaleOptions = item.options;
    			var id = scaleOptions.id;
    			var scaleType = valueOrDefault$8(scaleOptions.type, item.dtype);

    			if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
    				scaleOptions.position = item.dposition;
    			}

    			updated[id] = true;
    			var scale = null;
    			if (id in scales && scales[id].type === scaleType) {
    				scale = scales[id];
    				scale.options = scaleOptions;
    				scale.ctx = me.ctx;
    				scale.chart = me;
    			} else {
    				var scaleClass = core_scaleService.getScaleConstructor(scaleType);
    				if (!scaleClass) {
    					return;
    				}
    				scale = new scaleClass({
    					id: id,
    					type: scaleType,
    					options: scaleOptions,
    					ctx: me.ctx,
    					chart: me
    				});
    				scales[scale.id] = scale;
    			}

    			scale.mergeTicksOptions();

    			// TODO(SB): I think we should be able to remove this custom case (options.scale)
    			// and consider it as a regular scale part of the "scales"" map only! This would
    			// make the logic easier and remove some useless? custom code.
    			if (item.isDefault) {
    				me.scale = scale;
    			}
    		});
    		// clear up discarded scales
    		helpers$1.each(updated, function(hasUpdated, id) {
    			if (!hasUpdated) {
    				delete scales[id];
    			}
    		});

    		me.scales = scales;

    		core_scaleService.addScalesToLayout(this);
    	},

    	buildOrUpdateControllers: function() {
    		var me = this;
    		var newControllers = [];

    		helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
    			var meta = me.getDatasetMeta(datasetIndex);
    			var type = dataset.type || me.config.type;

    			if (meta.type && meta.type !== type) {
    				me.destroyDatasetMeta(datasetIndex);
    				meta = me.getDatasetMeta(datasetIndex);
    			}
    			meta.type = type;

    			if (meta.controller) {
    				meta.controller.updateIndex(datasetIndex);
    				meta.controller.linkScales();
    			} else {
    				var ControllerClass = controllers[meta.type];
    				if (ControllerClass === undefined) {
    					throw new Error('"' + meta.type + '" is not a chart type.');
    				}

    				meta.controller = new ControllerClass(me, datasetIndex);
    				newControllers.push(meta.controller);
    			}
    		}, me);

    		return newControllers;
    	},

    	/**
    	 * Reset the elements of all datasets
    	 * @private
    	 */
    	resetElements: function() {
    		var me = this;
    		helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
    			me.getDatasetMeta(datasetIndex).controller.reset();
    		}, me);
    	},

    	/**
    	* Resets the chart back to it's state before the initial animation
    	*/
    	reset: function() {
    		this.resetElements();
    		this.tooltip.initialize();
    	},

    	update: function(config) {
    		var me = this;

    		if (!config || typeof config !== 'object') {
    			// backwards compatibility
    			config = {
    				duration: config,
    				lazy: arguments[1]
    			};
    		}

    		updateConfig(me);

    		// plugins options references might have change, let's invalidate the cache
    		// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
    		core_plugins._invalidate(me);

    		if (core_plugins.notify(me, 'beforeUpdate') === false) {
    			return;
    		}

    		// In case the entire data object changed
    		me.tooltip._data = me.data;

    		// Make sure dataset controllers are updated and new controllers are reset
    		var newControllers = me.buildOrUpdateControllers();

    		// Make sure all dataset controllers have correct meta data counts
    		helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
    			me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();
    		}, me);

    		me.updateLayout();

    		// Can only reset the new controllers after the scales have been updated
    		if (me.options.animation && me.options.animation.duration) {
    			helpers$1.each(newControllers, function(controller) {
    				controller.reset();
    			});
    		}

    		me.updateDatasets();

    		// Need to reset tooltip in case it is displayed with elements that are removed
    		// after update.
    		me.tooltip.initialize();

    		// Last active contains items that were previously in the tooltip.
    		// When we reset the tooltip, we need to clear it
    		me.lastActive = [];

    		// Do this before render so that any plugins that need final scale updates can use it
    		core_plugins.notify(me, 'afterUpdate');

    		if (me._bufferedRender) {
    			me._bufferedRequest = {
    				duration: config.duration,
    				easing: config.easing,
    				lazy: config.lazy
    			};
    		} else {
    			me.render(config);
    		}
    	},

    	/**
    	 * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
    	 * hook, in which case, plugins will not be called on `afterLayout`.
    	 * @private
    	 */
    	updateLayout: function() {
    		var me = this;

    		if (core_plugins.notify(me, 'beforeLayout') === false) {
    			return;
    		}

    		core_layouts.update(this, this.width, this.height);

    		/**
    		 * Provided for backward compatibility, use `afterLayout` instead.
    		 * @method IPlugin#afterScaleUpdate
    		 * @deprecated since version 2.5.0
    		 * @todo remove at version 3
    		 * @private
    		 */
    		core_plugins.notify(me, 'afterScaleUpdate');
    		core_plugins.notify(me, 'afterLayout');
    	},

    	/**
    	 * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
    	 * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
    	 * @private
    	 */
    	updateDatasets: function() {
    		var me = this;

    		if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {
    			return;
    		}

    		for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
    			me.updateDataset(i);
    		}

    		core_plugins.notify(me, 'afterDatasetsUpdate');
    	},

    	/**
    	 * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
    	 * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
    	 * @private
    	 */
    	updateDataset: function(index) {
    		var me = this;
    		var meta = me.getDatasetMeta(index);
    		var args = {
    			meta: meta,
    			index: index
    		};

    		if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {
    			return;
    		}

    		meta.controller.update();

    		core_plugins.notify(me, 'afterDatasetUpdate', [args]);
    	},

    	render: function(config) {
    		var me = this;

    		if (!config || typeof config !== 'object') {
    			// backwards compatibility
    			config = {
    				duration: config,
    				lazy: arguments[1]
    			};
    		}

    		var animationOptions = me.options.animation;
    		var duration = valueOrDefault$8(config.duration, animationOptions && animationOptions.duration);
    		var lazy = config.lazy;

    		if (core_plugins.notify(me, 'beforeRender') === false) {
    			return;
    		}

    		var onComplete = function(animation) {
    			core_plugins.notify(me, 'afterRender');
    			helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);
    		};

    		if (animationOptions && duration) {
    			var animation = new core_animation({
    				numSteps: duration / 16.66, // 60 fps
    				easing: config.easing || animationOptions.easing,

    				render: function(chart, animationObject) {
    					var easingFunction = helpers$1.easing.effects[animationObject.easing];
    					var currentStep = animationObject.currentStep;
    					var stepDecimal = currentStep / animationObject.numSteps;

    					chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
    				},

    				onAnimationProgress: animationOptions.onProgress,
    				onAnimationComplete: onComplete
    			});

    			core_animations.addAnimation(me, animation, duration, lazy);
    		} else {
    			me.draw();

    			// See https://github.com/chartjs/Chart.js/issues/3781
    			onComplete(new core_animation({numSteps: 0, chart: me}));
    		}

    		return me;
    	},

    	draw: function(easingValue) {
    		var me = this;

    		me.clear();

    		if (helpers$1.isNullOrUndef(easingValue)) {
    			easingValue = 1;
    		}

    		me.transition(easingValue);

    		if (me.width <= 0 || me.height <= 0) {
    			return;
    		}

    		if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
    			return;
    		}

    		// Draw all the scales
    		helpers$1.each(me.boxes, function(box) {
    			box.draw(me.chartArea);
    		}, me);

    		me.drawDatasets(easingValue);
    		me._drawTooltip(easingValue);

    		core_plugins.notify(me, 'afterDraw', [easingValue]);
    	},

    	/**
    	 * @private
    	 */
    	transition: function(easingValue) {
    		var me = this;

    		for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
    			if (me.isDatasetVisible(i)) {
    				me.getDatasetMeta(i).controller.transition(easingValue);
    			}
    		}

    		me.tooltip.transition(easingValue);
    	},

    	/**
    	 * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
    	 * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
    	 * @private
    	 */
    	drawDatasets: function(easingValue) {
    		var me = this;

    		if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
    			return;
    		}

    		// Draw datasets reversed to support proper line stacking
    		for (var i = (me.data.datasets || []).length - 1; i >= 0; --i) {
    			if (me.isDatasetVisible(i)) {
    				me.drawDataset(i, easingValue);
    			}
    		}

    		core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
    	},

    	/**
    	 * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
    	 * hook, in which case, plugins will not be called on `afterDatasetDraw`.
    	 * @private
    	 */
    	drawDataset: function(index, easingValue) {
    		var me = this;
    		var meta = me.getDatasetMeta(index);
    		var args = {
    			meta: meta,
    			index: index,
    			easingValue: easingValue
    		};

    		if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {
    			return;
    		}

    		meta.controller.draw(easingValue);

    		core_plugins.notify(me, 'afterDatasetDraw', [args]);
    	},

    	/**
    	 * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
    	 * hook, in which case, plugins will not be called on `afterTooltipDraw`.
    	 * @private
    	 */
    	_drawTooltip: function(easingValue) {
    		var me = this;
    		var tooltip = me.tooltip;
    		var args = {
    			tooltip: tooltip,
    			easingValue: easingValue
    		};

    		if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {
    			return;
    		}

    		tooltip.draw();

    		core_plugins.notify(me, 'afterTooltipDraw', [args]);
    	},

    	/**
    	 * Get the single element that was clicked on
    	 * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
    	 */
    	getElementAtEvent: function(e) {
    		return core_interaction.modes.single(this, e);
    	},

    	getElementsAtEvent: function(e) {
    		return core_interaction.modes.label(this, e, {intersect: true});
    	},

    	getElementsAtXAxis: function(e) {
    		return core_interaction.modes['x-axis'](this, e, {intersect: true});
    	},

    	getElementsAtEventForMode: function(e, mode, options) {
    		var method = core_interaction.modes[mode];
    		if (typeof method === 'function') {
    			return method(this, e, options);
    		}

    		return [];
    	},

    	getDatasetAtEvent: function(e) {
    		return core_interaction.modes.dataset(this, e, {intersect: true});
    	},

    	getDatasetMeta: function(datasetIndex) {
    		var me = this;
    		var dataset = me.data.datasets[datasetIndex];
    		if (!dataset._meta) {
    			dataset._meta = {};
    		}

    		var meta = dataset._meta[me.id];
    		if (!meta) {
    			meta = dataset._meta[me.id] = {
    				type: null,
    				data: [],
    				dataset: null,
    				controller: null,
    				hidden: null,			// See isDatasetVisible() comment
    				xAxisID: null,
    				yAxisID: null
    			};
    		}

    		return meta;
    	},

    	getVisibleDatasetCount: function() {
    		var count = 0;
    		for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
    			if (this.isDatasetVisible(i)) {
    				count++;
    			}
    		}
    		return count;
    	},

    	isDatasetVisible: function(datasetIndex) {
    		var meta = this.getDatasetMeta(datasetIndex);

    		// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
    		// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
    		return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
    	},

    	generateLegend: function() {
    		return this.options.legendCallback(this);
    	},

    	/**
    	 * @private
    	 */
    	destroyDatasetMeta: function(datasetIndex) {
    		var id = this.id;
    		var dataset = this.data.datasets[datasetIndex];
    		var meta = dataset._meta && dataset._meta[id];

    		if (meta) {
    			meta.controller.destroy();
    			delete dataset._meta[id];
    		}
    	},

    	destroy: function() {
    		var me = this;
    		var canvas = me.canvas;
    		var i, ilen;

    		me.stop();

    		// dataset controllers need to cleanup associated data
    		for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
    			me.destroyDatasetMeta(i);
    		}

    		if (canvas) {
    			me.unbindEvents();
    			helpers$1.canvas.clear(me);
    			platform.releaseContext(me.ctx);
    			me.canvas = null;
    			me.ctx = null;
    		}

    		core_plugins.notify(me, 'destroy');

    		delete Chart.instances[me.id];
    	},

    	toBase64Image: function() {
    		return this.canvas.toDataURL.apply(this.canvas, arguments);
    	},

    	initToolTip: function() {
    		var me = this;
    		me.tooltip = new core_tooltip({
    			_chart: me,
    			_chartInstance: me, // deprecated, backward compatibility
    			_data: me.data,
    			_options: me.options.tooltips
    		}, me);
    	},

    	/**
    	 * @private
    	 */
    	bindEvents: function() {
    		var me = this;
    		var listeners = me._listeners = {};
    		var listener = function() {
    			me.eventHandler.apply(me, arguments);
    		};

    		helpers$1.each(me.options.events, function(type) {
    			platform.addEventListener(me, type, listener);
    			listeners[type] = listener;
    		});

    		// Elements used to detect size change should not be injected for non responsive charts.
    		// See https://github.com/chartjs/Chart.js/issues/2210
    		if (me.options.responsive) {
    			listener = function() {
    				me.resize();
    			};

    			platform.addEventListener(me, 'resize', listener);
    			listeners.resize = listener;
    		}
    	},

    	/**
    	 * @private
    	 */
    	unbindEvents: function() {
    		var me = this;
    		var listeners = me._listeners;
    		if (!listeners) {
    			return;
    		}

    		delete me._listeners;
    		helpers$1.each(listeners, function(listener, type) {
    			platform.removeEventListener(me, type, listener);
    		});
    	},

    	updateHoverStyle: function(elements, mode, enabled) {
    		var method = enabled ? 'setHoverStyle' : 'removeHoverStyle';
    		var element, i, ilen;

    		for (i = 0, ilen = elements.length; i < ilen; ++i) {
    			element = elements[i];
    			if (element) {
    				this.getDatasetMeta(element._datasetIndex).controller[method](element);
    			}
    		}
    	},

    	/**
    	 * @private
    	 */
    	eventHandler: function(e) {
    		var me = this;
    		var tooltip = me.tooltip;

    		if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {
    			return;
    		}

    		// Buffer any update calls so that renders do not occur
    		me._bufferedRender = true;
    		me._bufferedRequest = null;

    		var changed = me.handleEvent(e);
    		// for smooth tooltip animations issue #4989
    		// the tooltip should be the source of change
    		// Animation check workaround:
    		// tooltip._start will be null when tooltip isn't animating
    		if (tooltip) {
    			changed = tooltip._start
    				? tooltip.handleEvent(e)
    				: changed | tooltip.handleEvent(e);
    		}

    		core_plugins.notify(me, 'afterEvent', [e]);

    		var bufferedRequest = me._bufferedRequest;
    		if (bufferedRequest) {
    			// If we have an update that was triggered, we need to do a normal render
    			me.render(bufferedRequest);
    		} else if (changed && !me.animating) {
    			// If entering, leaving, or changing elements, animate the change via pivot
    			me.stop();

    			// We only need to render at this point. Updating will cause scales to be
    			// recomputed generating flicker & using more memory than necessary.
    			me.render({
    				duration: me.options.hover.animationDuration,
    				lazy: true
    			});
    		}

    		me._bufferedRender = false;
    		me._bufferedRequest = null;

    		return me;
    	},

    	/**
    	 * Handle an event
    	 * @private
    	 * @param {IEvent} event the event to handle
    	 * @return {boolean} true if the chart needs to re-render
    	 */
    	handleEvent: function(e) {
    		var me = this;
    		var options = me.options || {};
    		var hoverOptions = options.hover;
    		var changed = false;

    		me.lastActive = me.lastActive || [];

    		// Find Active Elements for hover and tooltips
    		if (e.type === 'mouseout') {
    			me.active = [];
    		} else {
    			me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
    		}

    		// Invoke onHover hook
    		// Need to call with native event here to not break backwards compatibility
    		helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);

    		if (e.type === 'mouseup' || e.type === 'click') {
    			if (options.onClick) {
    				// Use e.native here for backwards compatibility
    				options.onClick.call(me, e.native, me.active);
    			}
    		}

    		// Remove styling for last active (even if it may still be active)
    		if (me.lastActive.length) {
    			me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
    		}

    		// Built in hover styling
    		if (me.active.length && hoverOptions.mode) {
    			me.updateHoverStyle(me.active, hoverOptions.mode, true);
    		}

    		changed = !helpers$1.arrayEquals(me.active, me.lastActive);

    		// Remember Last Actives
    		me.lastActive = me.active;

    		return changed;
    	}
    });

    /**
     * NOTE(SB) We actually don't use this container anymore but we need to keep it
     * for backward compatibility. Though, it can still be useful for plugins that
     * would need to work on multiple charts?!
     */
    Chart.instances = {};

    var core_controller = Chart;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart instead.
     * @class Chart.Controller
     * @deprecated since version 2.6
     * @todo remove at version 3
     * @private
     */
    Chart.Controller = Chart;

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart
     * @deprecated since version 2.8
     * @todo remove at version 3
     * @private
     */
    Chart.types = {};

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart.helpers.configMerge
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.configMerge = mergeConfig;

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart.helpers.scaleMerge
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.scaleMerge = mergeScaleConfig;

    var core_helpers = function() {

    	// -- Basic js utility methods

    	helpers$1.where = function(collection, filterCallback) {
    		if (helpers$1.isArray(collection) && Array.prototype.filter) {
    			return collection.filter(filterCallback);
    		}
    		var filtered = [];

    		helpers$1.each(collection, function(item) {
    			if (filterCallback(item)) {
    				filtered.push(item);
    			}
    		});

    		return filtered;
    	};
    	helpers$1.findIndex = Array.prototype.findIndex ?
    		function(array, callback, scope) {
    			return array.findIndex(callback, scope);
    		} :
    		function(array, callback, scope) {
    			scope = scope === undefined ? array : scope;
    			for (var i = 0, ilen = array.length; i < ilen; ++i) {
    				if (callback.call(scope, array[i], i, array)) {
    					return i;
    				}
    			}
    			return -1;
    		};
    	helpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
    		// Default to start of the array
    		if (helpers$1.isNullOrUndef(startIndex)) {
    			startIndex = -1;
    		}
    		for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
    			var currentItem = arrayToSearch[i];
    			if (filterCallback(currentItem)) {
    				return currentItem;
    			}
    		}
    	};
    	helpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
    		// Default to end of the array
    		if (helpers$1.isNullOrUndef(startIndex)) {
    			startIndex = arrayToSearch.length;
    		}
    		for (var i = startIndex - 1; i >= 0; i--) {
    			var currentItem = arrayToSearch[i];
    			if (filterCallback(currentItem)) {
    				return currentItem;
    			}
    		}
    	};

    	// -- Math methods
    	helpers$1.isNumber = function(n) {
    		return !isNaN(parseFloat(n)) && isFinite(n);
    	};
    	helpers$1.almostEquals = function(x, y, epsilon) {
    		return Math.abs(x - y) < epsilon;
    	};
    	helpers$1.almostWhole = function(x, epsilon) {
    		var rounded = Math.round(x);
    		return (((rounded - epsilon) < x) && ((rounded + epsilon) > x));
    	};
    	helpers$1.max = function(array) {
    		return array.reduce(function(max, value) {
    			if (!isNaN(value)) {
    				return Math.max(max, value);
    			}
    			return max;
    		}, Number.NEGATIVE_INFINITY);
    	};
    	helpers$1.min = function(array) {
    		return array.reduce(function(min, value) {
    			if (!isNaN(value)) {
    				return Math.min(min, value);
    			}
    			return min;
    		}, Number.POSITIVE_INFINITY);
    	};
    	helpers$1.sign = Math.sign ?
    		function(x) {
    			return Math.sign(x);
    		} :
    		function(x) {
    			x = +x; // convert to a number
    			if (x === 0 || isNaN(x)) {
    				return x;
    			}
    			return x > 0 ? 1 : -1;
    		};
    	helpers$1.log10 = Math.log10 ?
    		function(x) {
    			return Math.log10(x);
    		} :
    		function(x) {
    			var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.
    			// Check for whole powers of 10,
    			// which due to floating point rounding error should be corrected.
    			var powerOf10 = Math.round(exponent);
    			var isPowerOf10 = x === Math.pow(10, powerOf10);

    			return isPowerOf10 ? powerOf10 : exponent;
    		};
    	helpers$1.toRadians = function(degrees) {
    		return degrees * (Math.PI / 180);
    	};
    	helpers$1.toDegrees = function(radians) {
    		return radians * (180 / Math.PI);
    	};

    	/**
    	 * Returns the number of decimal places
    	 * i.e. the number of digits after the decimal point, of the value of this Number.
    	 * @param {number} x - A number.
    	 * @returns {number} The number of decimal places.
    	 * @private
    	 */
    	helpers$1._decimalPlaces = function(x) {
    		if (!helpers$1.isFinite(x)) {
    			return;
    		}
    		var e = 1;
    		var p = 0;
    		while (Math.round(x * e) / e !== x) {
    			e *= 10;
    			p++;
    		}
    		return p;
    	};

    	// Gets the angle from vertical upright to the point about a centre.
    	helpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {
    		var distanceFromXCenter = anglePoint.x - centrePoint.x;
    		var distanceFromYCenter = anglePoint.y - centrePoint.y;
    		var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);

    		var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

    		if (angle < (-0.5 * Math.PI)) {
    			angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
    		}

    		return {
    			angle: angle,
    			distance: radialDistanceFromCenter
    		};
    	};
    	helpers$1.distanceBetweenPoints = function(pt1, pt2) {
    		return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
    	};

    	/**
    	 * Provided for backward compatibility, not available anymore
    	 * @function Chart.helpers.aliasPixel
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 */
    	helpers$1.aliasPixel = function(pixelWidth) {
    		return (pixelWidth % 2 === 0) ? 0 : 0.5;
    	};

    	/**
    	 * Returns the aligned pixel value to avoid anti-aliasing blur
    	 * @param {Chart} chart - The chart instance.
    	 * @param {number} pixel - A pixel value.
    	 * @param {number} width - The width of the element.
    	 * @returns {number} The aligned pixel value.
    	 * @private
    	 */
    	helpers$1._alignPixel = function(chart, pixel, width) {
    		var devicePixelRatio = chart.currentDevicePixelRatio;
    		var halfWidth = width / 2;
    		return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
    	};

    	helpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
    		// Props to Rob Spencer at scaled innovation for his post on splining between points
    		// http://scaledinnovation.com/analytics/splines/aboutSplines.html

    		// This function must also respect "skipped" points

    		var previous = firstPoint.skip ? middlePoint : firstPoint;
    		var current = middlePoint;
    		var next = afterPoint.skip ? middlePoint : afterPoint;

    		var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
    		var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));

    		var s01 = d01 / (d01 + d12);
    		var s12 = d12 / (d01 + d12);

    		// If all points are the same, s01 & s02 will be inf
    		s01 = isNaN(s01) ? 0 : s01;
    		s12 = isNaN(s12) ? 0 : s12;

    		var fa = t * s01; // scaling factor for triangle Ta
    		var fb = t * s12;

    		return {
    			previous: {
    				x: current.x - fa * (next.x - previous.x),
    				y: current.y - fa * (next.y - previous.y)
    			},
    			next: {
    				x: current.x + fb * (next.x - previous.x),
    				y: current.y + fb * (next.y - previous.y)
    			}
    		};
    	};
    	helpers$1.EPSILON = Number.EPSILON || 1e-14;
    	helpers$1.splineCurveMonotone = function(points) {
    		// This function calculates Bézier control points in a similar way than |splineCurve|,
    		// but preserves monotonicity of the provided data and ensures no local extremums are added
    		// between the dataset discrete points due to the interpolation.
    		// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation

    		var pointsWithTangents = (points || []).map(function(point) {
    			return {
    				model: point._model,
    				deltaK: 0,
    				mK: 0
    			};
    		});

    		// Calculate slopes (deltaK) and initialize tangents (mK)
    		var pointsLen = pointsWithTangents.length;
    		var i, pointBefore, pointCurrent, pointAfter;
    		for (i = 0; i < pointsLen; ++i) {
    			pointCurrent = pointsWithTangents[i];
    			if (pointCurrent.model.skip) {
    				continue;
    			}

    			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
    			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
    			if (pointAfter && !pointAfter.model.skip) {
    				var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);

    				// In the case of two points that appear at the same x pixel, slopeDeltaX is 0
    				pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
    			}

    			if (!pointBefore || pointBefore.model.skip) {
    				pointCurrent.mK = pointCurrent.deltaK;
    			} else if (!pointAfter || pointAfter.model.skip) {
    				pointCurrent.mK = pointBefore.deltaK;
    			} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
    				pointCurrent.mK = 0;
    			} else {
    				pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
    			}
    		}

    		// Adjust tangents to ensure monotonic properties
    		var alphaK, betaK, tauK, squaredMagnitude;
    		for (i = 0; i < pointsLen - 1; ++i) {
    			pointCurrent = pointsWithTangents[i];
    			pointAfter = pointsWithTangents[i + 1];
    			if (pointCurrent.model.skip || pointAfter.model.skip) {
    				continue;
    			}

    			if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
    				pointCurrent.mK = pointAfter.mK = 0;
    				continue;
    			}

    			alphaK = pointCurrent.mK / pointCurrent.deltaK;
    			betaK = pointAfter.mK / pointCurrent.deltaK;
    			squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    			if (squaredMagnitude <= 9) {
    				continue;
    			}

    			tauK = 3 / Math.sqrt(squaredMagnitude);
    			pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
    			pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
    		}

    		// Compute control points
    		var deltaX;
    		for (i = 0; i < pointsLen; ++i) {
    			pointCurrent = pointsWithTangents[i];
    			if (pointCurrent.model.skip) {
    				continue;
    			}

    			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
    			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
    			if (pointBefore && !pointBefore.model.skip) {
    				deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
    				pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
    				pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
    			}
    			if (pointAfter && !pointAfter.model.skip) {
    				deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
    				pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
    				pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
    			}
    		}
    	};
    	helpers$1.nextItem = function(collection, index, loop) {
    		if (loop) {
    			return index >= collection.length - 1 ? collection[0] : collection[index + 1];
    		}
    		return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
    	};
    	helpers$1.previousItem = function(collection, index, loop) {
    		if (loop) {
    			return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
    		}
    		return index <= 0 ? collection[0] : collection[index - 1];
    	};
    	// Implementation of the nice number algorithm used in determining where axis labels will go
    	helpers$1.niceNum = function(range, round) {
    		var exponent = Math.floor(helpers$1.log10(range));
    		var fraction = range / Math.pow(10, exponent);
    		var niceFraction;

    		if (round) {
    			if (fraction < 1.5) {
    				niceFraction = 1;
    			} else if (fraction < 3) {
    				niceFraction = 2;
    			} else if (fraction < 7) {
    				niceFraction = 5;
    			} else {
    				niceFraction = 10;
    			}
    		} else if (fraction <= 1.0) {
    			niceFraction = 1;
    		} else if (fraction <= 2) {
    			niceFraction = 2;
    		} else if (fraction <= 5) {
    			niceFraction = 5;
    		} else {
    			niceFraction = 10;
    		}

    		return niceFraction * Math.pow(10, exponent);
    	};
    	// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
    	helpers$1.requestAnimFrame = (function() {
    		if (typeof window === 'undefined') {
    			return function(callback) {
    				callback();
    			};
    		}
    		return window.requestAnimationFrame ||
    			window.webkitRequestAnimationFrame ||
    			window.mozRequestAnimationFrame ||
    			window.oRequestAnimationFrame ||
    			window.msRequestAnimationFrame ||
    			function(callback) {
    				return window.setTimeout(callback, 1000 / 60);
    			};
    	}());
    	// -- DOM methods
    	helpers$1.getRelativePosition = function(evt, chart) {
    		var mouseX, mouseY;
    		var e = evt.originalEvent || evt;
    		var canvas = evt.target || evt.srcElement;
    		var boundingRect = canvas.getBoundingClientRect();

    		var touches = e.touches;
    		if (touches && touches.length > 0) {
    			mouseX = touches[0].clientX;
    			mouseY = touches[0].clientY;

    		} else {
    			mouseX = e.clientX;
    			mouseY = e.clientY;
    		}

    		// Scale mouse coordinates into canvas coordinates
    		// by following the pattern laid out by 'jerryj' in the comments of
    		// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
    		var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));
    		var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));
    		var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));
    		var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));
    		var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
    		var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;

    		// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
    		// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
    		mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
    		mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);

    		return {
    			x: mouseX,
    			y: mouseY
    		};

    	};

    	// Private helper function to convert max-width/max-height values that may be percentages into a number
    	function parseMaxStyle(styleValue, node, parentProperty) {
    		var valueInPixels;
    		if (typeof styleValue === 'string') {
    			valueInPixels = parseInt(styleValue, 10);

    			if (styleValue.indexOf('%') !== -1) {
    				// percentage * size in dimension
    				valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    			}
    		} else {
    			valueInPixels = styleValue;
    		}

    		return valueInPixels;
    	}

    	/**
    	 * Returns if the given value contains an effective constraint.
    	 * @private
    	 */
    	function isConstrainedValue(value) {
    		return value !== undefined && value !== null && value !== 'none';
    	}

    	/**
    	 * Returns the max width or height of the given DOM node in a cross-browser compatible fashion
    	 * @param {HTMLElement} domNode - the node to check the constraint on
    	 * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')
    	 * @param {string} percentageProperty - property of parent to use when calculating width as a percentage
    	 * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}
    	 */
    	function getConstraintDimension(domNode, maxStyle, percentageProperty) {
    		var view = document.defaultView;
    		var parentNode = helpers$1._getParentNode(domNode);
    		var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
    		var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
    		var hasCNode = isConstrainedValue(constrainedNode);
    		var hasCContainer = isConstrainedValue(constrainedContainer);
    		var infinity = Number.POSITIVE_INFINITY;

    		if (hasCNode || hasCContainer) {
    			return Math.min(
    				hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
    				hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
    		}

    		return 'none';
    	}
    	// returns Number or undefined if no constraint
    	helpers$1.getConstraintWidth = function(domNode) {
    		return getConstraintDimension(domNode, 'max-width', 'clientWidth');
    	};
    	// returns Number or undefined if no constraint
    	helpers$1.getConstraintHeight = function(domNode) {
    		return getConstraintDimension(domNode, 'max-height', 'clientHeight');
    	};
    	/**
    	 * @private
     	 */
    	helpers$1._calculatePadding = function(container, padding, parentDimension) {
    		padding = helpers$1.getStyle(container, padding);

    		return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
    	};
    	/**
    	 * @private
    	 */
    	helpers$1._getParentNode = function(domNode) {
    		var parent = domNode.parentNode;
    		if (parent && parent.toString() === '[object ShadowRoot]') {
    			parent = parent.host;
    		}
    		return parent;
    	};
    	helpers$1.getMaximumWidth = function(domNode) {
    		var container = helpers$1._getParentNode(domNode);
    		if (!container) {
    			return domNode.clientWidth;
    		}

    		var clientWidth = container.clientWidth;
    		var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);
    		var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);

    		var w = clientWidth - paddingLeft - paddingRight;
    		var cw = helpers$1.getConstraintWidth(domNode);
    		return isNaN(cw) ? w : Math.min(w, cw);
    	};
    	helpers$1.getMaximumHeight = function(domNode) {
    		var container = helpers$1._getParentNode(domNode);
    		if (!container) {
    			return domNode.clientHeight;
    		}

    		var clientHeight = container.clientHeight;
    		var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);
    		var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);

    		var h = clientHeight - paddingTop - paddingBottom;
    		var ch = helpers$1.getConstraintHeight(domNode);
    		return isNaN(ch) ? h : Math.min(h, ch);
    	};
    	helpers$1.getStyle = function(el, property) {
    		return el.currentStyle ?
    			el.currentStyle[property] :
    			document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
    	};
    	helpers$1.retinaScale = function(chart, forceRatio) {
    		var pixelRatio = chart.currentDevicePixelRatio = forceRatio || (typeof window !== 'undefined' && window.devicePixelRatio) || 1;
    		if (pixelRatio === 1) {
    			return;
    		}

    		var canvas = chart.canvas;
    		var height = chart.height;
    		var width = chart.width;

    		canvas.height = height * pixelRatio;
    		canvas.width = width * pixelRatio;
    		chart.ctx.scale(pixelRatio, pixelRatio);

    		// If no style has been set on the canvas, the render size is used as display size,
    		// making the chart visually bigger, so let's enforce it to the "correct" values.
    		// See https://github.com/chartjs/Chart.js/issues/3575
    		if (!canvas.style.height && !canvas.style.width) {
    			canvas.style.height = height + 'px';
    			canvas.style.width = width + 'px';
    		}
    	};
    	// -- Canvas methods
    	helpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {
    		return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
    	};
    	helpers$1.longestText = function(ctx, font, arrayOfThings, cache) {
    		cache = cache || {};
    		var data = cache.data = cache.data || {};
    		var gc = cache.garbageCollect = cache.garbageCollect || [];

    		if (cache.font !== font) {
    			data = cache.data = {};
    			gc = cache.garbageCollect = [];
    			cache.font = font;
    		}

    		ctx.font = font;
    		var longest = 0;
    		helpers$1.each(arrayOfThings, function(thing) {
    			// Undefined strings and arrays should not be measured
    			if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {
    				longest = helpers$1.measureText(ctx, data, gc, longest, thing);
    			} else if (helpers$1.isArray(thing)) {
    				// if it is an array lets measure each element
    				// to do maybe simplify this function a bit so we can do this more recursively?
    				helpers$1.each(thing, function(nestedThing) {
    					// Undefined strings and arrays should not be measured
    					if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {
    						longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);
    					}
    				});
    			}
    		});

    		var gcLen = gc.length / 2;
    		if (gcLen > arrayOfThings.length) {
    			for (var i = 0; i < gcLen; i++) {
    				delete data[gc[i]];
    			}
    			gc.splice(0, gcLen);
    		}
    		return longest;
    	};
    	helpers$1.measureText = function(ctx, data, gc, longest, string) {
    		var textWidth = data[string];
    		if (!textWidth) {
    			textWidth = data[string] = ctx.measureText(string).width;
    			gc.push(string);
    		}
    		if (textWidth > longest) {
    			longest = textWidth;
    		}
    		return longest;
    	};
    	helpers$1.numberOfLabelLines = function(arrayOfThings) {
    		var numberOfLines = 1;
    		helpers$1.each(arrayOfThings, function(thing) {
    			if (helpers$1.isArray(thing)) {
    				if (thing.length > numberOfLines) {
    					numberOfLines = thing.length;
    				}
    			}
    		});
    		return numberOfLines;
    	};

    	helpers$1.color = !chartjsColor ?
    		function(value) {
    			console.error('Color.js not found!');
    			return value;
    		} :
    		function(value) {
    			/* global CanvasGradient */
    			if (value instanceof CanvasGradient) {
    				value = core_defaults.global.defaultColor;
    			}

    			return chartjsColor(value);
    		};

    	helpers$1.getHoverColor = function(colorValue) {
    		/* global CanvasPattern */
    		return (colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient) ?
    			colorValue :
    			helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();
    	};
    };

    function abstract() {
    	throw new Error(
    		'This method is not implemented: either no adapter can ' +
    		'be found or an incomplete integration was provided.'
    	);
    }

    /**
     * Date adapter (current used by the time scale)
     * @namespace Chart._adapters._date
     * @memberof Chart._adapters
     * @private
     */

    /**
     * Currently supported unit string values.
     * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}
     * @memberof Chart._adapters._date
     * @name Unit
     */

    /**
     * @class
     */
    function DateAdapter(options) {
    	this.options = options || {};
    }

    helpers$1.extend(DateAdapter.prototype, /** @lends DateAdapter */ {
    	/**
    	 * Returns a map of time formats for the supported formatting units defined
    	 * in Unit as well as 'datetime' representing a detailed date/time string.
    	 * @returns {{string: string}}
    	 */
    	formats: abstract,

    	/**
    	 * Parses the given `value` and return the associated timestamp.
    	 * @param {any} value - the value to parse (usually comes from the data)
    	 * @param {string} [format] - the expected data format
    	 * @returns {(number|null)}
    	 * @function
    	 */
    	parse: abstract,

    	/**
    	 * Returns the formatted date in the specified `format` for a given `timestamp`.
    	 * @param {number} timestamp - the timestamp to format
    	 * @param {string} format - the date/time token
    	 * @return {string}
    	 * @function
    	 */
    	format: abstract,

    	/**
    	 * Adds the specified `amount` of `unit` to the given `timestamp`.
    	 * @param {number} timestamp - the input timestamp
    	 * @param {number} amount - the amount to add
    	 * @param {Unit} unit - the unit as string
    	 * @return {number}
    	 * @function
    	 */
    	add: abstract,

    	/**
    	 * Returns the number of `unit` between the given timestamps.
    	 * @param {number} max - the input timestamp (reference)
    	 * @param {number} min - the timestamp to substract
    	 * @param {Unit} unit - the unit as string
    	 * @return {number}
    	 * @function
    	 */
    	diff: abstract,

    	/**
    	 * Returns start of `unit` for the given `timestamp`.
    	 * @param {number} timestamp - the input timestamp
    	 * @param {Unit} unit - the unit as string
    	 * @param {number} [weekday] - the ISO day of the week with 1 being Monday
    	 * and 7 being Sunday (only needed if param *unit* is `isoWeek`).
    	 * @function
    	 */
    	startOf: abstract,

    	/**
    	 * Returns end of `unit` for the given `timestamp`.
    	 * @param {number} timestamp - the input timestamp
    	 * @param {Unit} unit - the unit as string
    	 * @function
    	 */
    	endOf: abstract,

    	// DEPRECATIONS

    	/**
    	 * Provided for backward compatibility for scale.getValueForPixel(),
    	 * this method should be overridden only by the moment adapter.
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 * @private
    	 */
    	_create: function(value) {
    		return value;
    	}
    });

    DateAdapter.override = function(members) {
    	helpers$1.extend(DateAdapter.prototype, members);
    };

    var _date = DateAdapter;

    var core_adapters = {
    	_date: _date
    };

    /**
     * Namespace to hold static tick generation functions
     * @namespace Chart.Ticks
     */
    var core_ticks = {
    	/**
    	 * Namespace to hold formatters for different types of ticks
    	 * @namespace Chart.Ticks.formatters
    	 */
    	formatters: {
    		/**
    		 * Formatter for value labels
    		 * @method Chart.Ticks.formatters.values
    		 * @param value the value to display
    		 * @return {string|string[]} the label to display
    		 */
    		values: function(value) {
    			return helpers$1.isArray(value) ? value : '' + value;
    		},

    		/**
    		 * Formatter for linear numeric ticks
    		 * @method Chart.Ticks.formatters.linear
    		 * @param tickValue {number} the value to be formatted
    		 * @param index {number} the position of the tickValue parameter in the ticks array
    		 * @param ticks {number[]} the list of ticks being converted
    		 * @return {string} string representation of the tickValue parameter
    		 */
    		linear: function(tickValue, index, ticks) {
    			// If we have lots of ticks, don't use the ones
    			var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];

    			// If we have a number like 2.5 as the delta, figure out how many decimal places we need
    			if (Math.abs(delta) > 1) {
    				if (tickValue !== Math.floor(tickValue)) {
    					// not an integer
    					delta = tickValue - Math.floor(tickValue);
    				}
    			}

    			var logDelta = helpers$1.log10(Math.abs(delta));
    			var tickString = '';

    			if (tickValue !== 0) {
    				var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
    				if (maxTick < 1e-4) { // all ticks are small numbers; use scientific notation
    					var logTick = helpers$1.log10(Math.abs(tickValue));
    					tickString = tickValue.toExponential(Math.floor(logTick) - Math.floor(logDelta));
    				} else {
    					var numDecimal = -1 * Math.floor(logDelta);
    					numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
    					tickString = tickValue.toFixed(numDecimal);
    				}
    			} else {
    				tickString = '0'; // never show decimal places for 0
    			}

    			return tickString;
    		},

    		logarithmic: function(tickValue, index, ticks) {
    			var remain = tickValue / (Math.pow(10, Math.floor(helpers$1.log10(tickValue))));

    			if (tickValue === 0) {
    				return '0';
    			} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
    				return tickValue.toExponential();
    			}
    			return '';
    		}
    	}
    };

    var valueOrDefault$9 = helpers$1.valueOrDefault;
    var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;

    core_defaults._set('scale', {
    	display: true,
    	position: 'left',
    	offset: false,

    	// grid line settings
    	gridLines: {
    		display: true,
    		color: 'rgba(0, 0, 0, 0.1)',
    		lineWidth: 1,
    		drawBorder: true,
    		drawOnChartArea: true,
    		drawTicks: true,
    		tickMarkLength: 10,
    		zeroLineWidth: 1,
    		zeroLineColor: 'rgba(0,0,0,0.25)',
    		zeroLineBorderDash: [],
    		zeroLineBorderDashOffset: 0.0,
    		offsetGridLines: false,
    		borderDash: [],
    		borderDashOffset: 0.0
    	},

    	// scale label
    	scaleLabel: {
    		// display property
    		display: false,

    		// actual label
    		labelString: '',

    		// top/bottom padding
    		padding: {
    			top: 4,
    			bottom: 4
    		}
    	},

    	// label settings
    	ticks: {
    		beginAtZero: false,
    		minRotation: 0,
    		maxRotation: 50,
    		mirror: false,
    		padding: 0,
    		reverse: false,
    		display: true,
    		autoSkip: true,
    		autoSkipPadding: 0,
    		labelOffset: 0,
    		// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
    		callback: core_ticks.formatters.values,
    		minor: {},
    		major: {}
    	}
    });

    function labelsFromTicks(ticks) {
    	var labels = [];
    	var i, ilen;

    	for (i = 0, ilen = ticks.length; i < ilen; ++i) {
    		labels.push(ticks[i].label);
    	}

    	return labels;
    }

    function getPixelForGridLine(scale, index, offsetGridLines) {
    	var lineValue = scale.getPixelForTick(index);

    	if (offsetGridLines) {
    		if (scale.getTicks().length === 1) {
    			lineValue -= scale.isHorizontal() ?
    				Math.max(lineValue - scale.left, scale.right - lineValue) :
    				Math.max(lineValue - scale.top, scale.bottom - lineValue);
    		} else if (index === 0) {
    			lineValue -= (scale.getPixelForTick(1) - lineValue) / 2;
    		} else {
    			lineValue -= (lineValue - scale.getPixelForTick(index - 1)) / 2;
    		}
    	}
    	return lineValue;
    }

    function computeTextSize(context, tick, font) {
    	return helpers$1.isArray(tick) ?
    		helpers$1.longestText(context, font, tick) :
    		context.measureText(tick).width;
    }

    var core_scale = core_element.extend({
    	/**
    	 * Get the padding needed for the scale
    	 * @method getPadding
    	 * @private
    	 * @returns {Padding} the necessary padding
    	 */
    	getPadding: function() {
    		var me = this;
    		return {
    			left: me.paddingLeft || 0,
    			top: me.paddingTop || 0,
    			right: me.paddingRight || 0,
    			bottom: me.paddingBottom || 0
    		};
    	},

    	/**
    	 * Returns the scale tick objects ({label, major})
    	 * @since 2.7
    	 */
    	getTicks: function() {
    		return this._ticks;
    	},

    	// These methods are ordered by lifecyle. Utilities then follow.
    	// Any function defined here is inherited by all scale types.
    	// Any function can be extended by the scale type

    	mergeTicksOptions: function() {
    		var ticks = this.options.ticks;
    		if (ticks.minor === false) {
    			ticks.minor = {
    				display: false
    			};
    		}
    		if (ticks.major === false) {
    			ticks.major = {
    				display: false
    			};
    		}
    		for (var key in ticks) {
    			if (key !== 'major' && key !== 'minor') {
    				if (typeof ticks.minor[key] === 'undefined') {
    					ticks.minor[key] = ticks[key];
    				}
    				if (typeof ticks.major[key] === 'undefined') {
    					ticks.major[key] = ticks[key];
    				}
    			}
    		}
    	},
    	beforeUpdate: function() {
    		helpers$1.callback(this.options.beforeUpdate, [this]);
    	},

    	update: function(maxWidth, maxHeight, margins) {
    		var me = this;
    		var i, ilen, labels, label, ticks, tick;

    		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
    		me.beforeUpdate();

    		// Absorb the master measurements
    		me.maxWidth = maxWidth;
    		me.maxHeight = maxHeight;
    		me.margins = helpers$1.extend({
    			left: 0,
    			right: 0,
    			top: 0,
    			bottom: 0
    		}, margins);

    		me._maxLabelLines = 0;
    		me.longestLabelWidth = 0;
    		me.longestTextCache = me.longestTextCache || {};

    		// Dimensions
    		me.beforeSetDimensions();
    		me.setDimensions();
    		me.afterSetDimensions();

    		// Data min/max
    		me.beforeDataLimits();
    		me.determineDataLimits();
    		me.afterDataLimits();

    		// Ticks - `this.ticks` is now DEPRECATED!
    		// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member
    		// and must not be accessed directly from outside this class. `this.ticks` being
    		// around for long time and not marked as private, we can't change its structure
    		// without unexpected breaking changes. If you need to access the scale ticks,
    		// use scale.getTicks() instead.

    		me.beforeBuildTicks();

    		// New implementations should return an array of objects but for BACKWARD COMPAT,
    		// we still support no return (`this.ticks` internally set by calling this method).
    		ticks = me.buildTicks() || [];

    		// Allow modification of ticks in callback.
    		ticks = me.afterBuildTicks(ticks) || ticks;

    		me.beforeTickToLabelConversion();

    		// New implementations should return the formatted tick labels but for BACKWARD
    		// COMPAT, we still support no return (`this.ticks` internally changed by calling
    		// this method and supposed to contain only string values).
    		labels = me.convertTicksToLabels(ticks) || me.ticks;

    		me.afterTickToLabelConversion();

    		me.ticks = labels;   // BACKWARD COMPATIBILITY

    		// IMPORTANT: from this point, we consider that `this.ticks` will NEVER change!

    		// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)
    		for (i = 0, ilen = labels.length; i < ilen; ++i) {
    			label = labels[i];
    			tick = ticks[i];
    			if (!tick) {
    				ticks.push(tick = {
    					label: label,
    					major: false
    				});
    			} else {
    				tick.label = label;
    			}
    		}

    		me._ticks = ticks;

    		// Tick Rotation
    		me.beforeCalculateTickRotation();
    		me.calculateTickRotation();
    		me.afterCalculateTickRotation();
    		// Fit
    		me.beforeFit();
    		me.fit();
    		me.afterFit();
    		//
    		me.afterUpdate();

    		return me.minSize;

    	},
    	afterUpdate: function() {
    		helpers$1.callback(this.options.afterUpdate, [this]);
    	},

    	//

    	beforeSetDimensions: function() {
    		helpers$1.callback(this.options.beforeSetDimensions, [this]);
    	},
    	setDimensions: function() {
    		var me = this;
    		// Set the unconstrained dimension before label rotation
    		if (me.isHorizontal()) {
    			// Reset position before calculating rotation
    			me.width = me.maxWidth;
    			me.left = 0;
    			me.right = me.width;
    		} else {
    			me.height = me.maxHeight;

    			// Reset position before calculating rotation
    			me.top = 0;
    			me.bottom = me.height;
    		}

    		// Reset padding
    		me.paddingLeft = 0;
    		me.paddingTop = 0;
    		me.paddingRight = 0;
    		me.paddingBottom = 0;
    	},
    	afterSetDimensions: function() {
    		helpers$1.callback(this.options.afterSetDimensions, [this]);
    	},

    	// Data limits
    	beforeDataLimits: function() {
    		helpers$1.callback(this.options.beforeDataLimits, [this]);
    	},
    	determineDataLimits: helpers$1.noop,
    	afterDataLimits: function() {
    		helpers$1.callback(this.options.afterDataLimits, [this]);
    	},

    	//
    	beforeBuildTicks: function() {
    		helpers$1.callback(this.options.beforeBuildTicks, [this]);
    	},
    	buildTicks: helpers$1.noop,
    	afterBuildTicks: function(ticks) {
    		var me = this;
    		// ticks is empty for old axis implementations here
    		if (helpers$1.isArray(ticks) && ticks.length) {
    			return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);
    		}
    		// Support old implementations (that modified `this.ticks` directly in buildTicks)
    		me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;
    		return ticks;
    	},

    	beforeTickToLabelConversion: function() {
    		helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);
    	},
    	convertTicksToLabels: function() {
    		var me = this;
    		// Convert ticks to strings
    		var tickOpts = me.options.ticks;
    		me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
    	},
    	afterTickToLabelConversion: function() {
    		helpers$1.callback(this.options.afterTickToLabelConversion, [this]);
    	},

    	//

    	beforeCalculateTickRotation: function() {
    		helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);
    	},
    	calculateTickRotation: function() {
    		var me = this;
    		var context = me.ctx;
    		var tickOpts = me.options.ticks;
    		var labels = labelsFromTicks(me._ticks);

    		// Get the width of each grid by calculating the difference
    		// between x offsets between 0 and 1.
    		var tickFont = helpers$1.options._parseFont(tickOpts);
    		context.font = tickFont.string;

    		var labelRotation = tickOpts.minRotation || 0;

    		if (labels.length && me.options.display && me.isHorizontal()) {
    			var originalLabelWidth = helpers$1.longestText(context, tickFont.string, labels, me.longestTextCache);
    			var labelWidth = originalLabelWidth;
    			var cosRotation, sinRotation;

    			// Allow 3 pixels x2 padding either side for label readability
    			var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;

    			// Max label rotation can be set or default to 90 - also act as a loop counter
    			while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {
    				var angleRadians = helpers$1.toRadians(labelRotation);
    				cosRotation = Math.cos(angleRadians);
    				sinRotation = Math.sin(angleRadians);

    				if (sinRotation * originalLabelWidth > me.maxHeight) {
    					// go back one step
    					labelRotation--;
    					break;
    				}

    				labelRotation++;
    				labelWidth = cosRotation * originalLabelWidth;
    			}
    		}

    		me.labelRotation = labelRotation;
    	},
    	afterCalculateTickRotation: function() {
    		helpers$1.callback(this.options.afterCalculateTickRotation, [this]);
    	},

    	//

    	beforeFit: function() {
    		helpers$1.callback(this.options.beforeFit, [this]);
    	},
    	fit: function() {
    		var me = this;
    		// Reset
    		var minSize = me.minSize = {
    			width: 0,
    			height: 0
    		};

    		var labels = labelsFromTicks(me._ticks);

    		var opts = me.options;
    		var tickOpts = opts.ticks;
    		var scaleLabelOpts = opts.scaleLabel;
    		var gridLineOpts = opts.gridLines;
    		var display = me._isVisible();
    		var position = opts.position;
    		var isHorizontal = me.isHorizontal();

    		var parseFont = helpers$1.options._parseFont;
    		var tickFont = parseFont(tickOpts);
    		var tickMarkLength = opts.gridLines.tickMarkLength;

    		// Width
    		if (isHorizontal) {
    			// subtract the margins to line up with the chartArea if we are a full width scale
    			minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;
    		} else {
    			minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
    		}

    		// height
    		if (isHorizontal) {
    			minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
    		} else {
    			minSize.height = me.maxHeight; // fill all the height
    		}

    		// Are we showing a title for the scale?
    		if (scaleLabelOpts.display && display) {
    			var scaleLabelFont = parseFont(scaleLabelOpts);
    			var scaleLabelPadding = helpers$1.options.toPadding(scaleLabelOpts.padding);
    			var deltaHeight = scaleLabelFont.lineHeight + scaleLabelPadding.height;

    			if (isHorizontal) {
    				minSize.height += deltaHeight;
    			} else {
    				minSize.width += deltaHeight;
    			}
    		}

    		// Don't bother fitting the ticks if we are not showing the labels
    		if (tickOpts.display && display) {
    			var largestTextWidth = helpers$1.longestText(me.ctx, tickFont.string, labels, me.longestTextCache);
    			var tallestLabelHeightInLines = helpers$1.numberOfLabelLines(labels);
    			var lineSpace = tickFont.size * 0.5;
    			var tickPadding = me.options.ticks.padding;

    			// Store max number of lines and widest label for _autoSkip
    			me._maxLabelLines = tallestLabelHeightInLines;
    			me.longestLabelWidth = largestTextWidth;

    			if (isHorizontal) {
    				var angleRadians = helpers$1.toRadians(me.labelRotation);
    				var cosRotation = Math.cos(angleRadians);
    				var sinRotation = Math.sin(angleRadians);

    				// TODO - improve this calculation
    				var labelHeight = (sinRotation * largestTextWidth)
    					+ (tickFont.lineHeight * tallestLabelHeightInLines)
    					+ lineSpace; // padding

    				minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);

    				me.ctx.font = tickFont.string;
    				var firstLabelWidth = computeTextSize(me.ctx, labels[0], tickFont.string);
    				var lastLabelWidth = computeTextSize(me.ctx, labels[labels.length - 1], tickFont.string);
    				var offsetLeft = me.getPixelForTick(0) - me.left;
    				var offsetRight = me.right - me.getPixelForTick(labels.length - 1);
    				var paddingLeft, paddingRight;

    				// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned
    				// which means that the right padding is dominated by the font height
    				if (me.labelRotation !== 0) {
    					paddingLeft = position === 'bottom' ? (cosRotation * firstLabelWidth) : (cosRotation * lineSpace);
    					paddingRight = position === 'bottom' ? (cosRotation * lineSpace) : (cosRotation * lastLabelWidth);
    				} else {
    					paddingLeft = firstLabelWidth / 2;
    					paddingRight = lastLabelWidth / 2;
    				}
    				me.paddingLeft = Math.max(paddingLeft - offsetLeft, 0) + 3; // add 3 px to move away from canvas edges
    				me.paddingRight = Math.max(paddingRight - offsetRight, 0) + 3;
    			} else {
    				// A vertical axis is more constrained by the width. Labels are the
    				// dominant factor here, so get that length first and account for padding
    				if (tickOpts.mirror) {
    					largestTextWidth = 0;
    				} else {
    					// use lineSpace for consistency with horizontal axis
    					// tickPadding is not implemented for horizontal
    					largestTextWidth += tickPadding + lineSpace;
    				}

    				minSize.width = Math.min(me.maxWidth, minSize.width + largestTextWidth);

    				me.paddingTop = tickFont.size / 2;
    				me.paddingBottom = tickFont.size / 2;
    			}
    		}

    		me.handleMargins();

    		me.width = minSize.width;
    		me.height = minSize.height;
    	},

    	/**
    	 * Handle margins and padding interactions
    	 * @private
    	 */
    	handleMargins: function() {
    		var me = this;
    		if (me.margins) {
    			me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);
    			me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);
    			me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);
    			me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);
    		}
    	},

    	afterFit: function() {
    		helpers$1.callback(this.options.afterFit, [this]);
    	},

    	// Shared Methods
    	isHorizontal: function() {
    		return this.options.position === 'top' || this.options.position === 'bottom';
    	},
    	isFullWidth: function() {
    		return (this.options.fullWidth);
    	},

    	// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
    	getRightValue: function(rawValue) {
    		// Null and undefined values first
    		if (helpers$1.isNullOrUndef(rawValue)) {
    			return NaN;
    		}
    		// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
    		if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {
    			return NaN;
    		}
    		// If it is in fact an object, dive in one more level
    		if (rawValue) {
    			if (this.isHorizontal()) {
    				if (rawValue.x !== undefined) {
    					return this.getRightValue(rawValue.x);
    				}
    			} else if (rawValue.y !== undefined) {
    				return this.getRightValue(rawValue.y);
    			}
    		}

    		// Value is good, return it
    		return rawValue;
    	},

    	/**
    	 * Used to get the value to display in the tooltip for the data at the given index
    	 * @param index
    	 * @param datasetIndex
    	 */
    	getLabelForIndex: helpers$1.noop,

    	/**
    	 * Returns the location of the given data point. Value can either be an index or a numerical value
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 * @param value
    	 * @param index
    	 * @param datasetIndex
    	 */
    	getPixelForValue: helpers$1.noop,

    	/**
    	 * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 * @param pixel
    	 */
    	getValueForPixel: helpers$1.noop,

    	/**
    	 * Returns the location of the tick at the given index
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 */
    	getPixelForTick: function(index) {
    		var me = this;
    		var offset = me.options.offset;
    		if (me.isHorizontal()) {
    			var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
    			var tickWidth = innerWidth / Math.max((me._ticks.length - (offset ? 0 : 1)), 1);
    			var pixel = (tickWidth * index) + me.paddingLeft;

    			if (offset) {
    				pixel += tickWidth / 2;
    			}

    			var finalVal = me.left + pixel;
    			finalVal += me.isFullWidth() ? me.margins.left : 0;
    			return finalVal;
    		}
    		var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
    		return me.top + (index * (innerHeight / (me._ticks.length - 1)));
    	},

    	/**
    	 * Utility for getting the pixel location of a percentage of scale
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 */
    	getPixelForDecimal: function(decimal) {
    		var me = this;
    		if (me.isHorizontal()) {
    			var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
    			var valueOffset = (innerWidth * decimal) + me.paddingLeft;

    			var finalVal = me.left + valueOffset;
    			finalVal += me.isFullWidth() ? me.margins.left : 0;
    			return finalVal;
    		}
    		return me.top + (decimal * me.height);
    	},

    	/**
    	 * Returns the pixel for the minimum chart value
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 */
    	getBasePixel: function() {
    		return this.getPixelForValue(this.getBaseValue());
    	},

    	getBaseValue: function() {
    		var me = this;
    		var min = me.min;
    		var max = me.max;

    		return me.beginAtZero ? 0 :
    			min < 0 && max < 0 ? max :
    			min > 0 && max > 0 ? min :
    			0;
    	},

    	/**
    	 * Returns a subset of ticks to be plotted to avoid overlapping labels.
    	 * @private
    	 */
    	_autoSkip: function(ticks) {
    		var me = this;
    		var isHorizontal = me.isHorizontal();
    		var optionTicks = me.options.ticks.minor;
    		var tickCount = ticks.length;
    		var skipRatio = false;
    		var maxTicks = optionTicks.maxTicksLimit;

    		// Total space needed to display all ticks. First and last ticks are
    		// drawn as their center at end of axis, so tickCount-1
    		var ticksLength = me._tickSize() * (tickCount - 1);

    		// Axis length
    		var axisLength = isHorizontal
    			? me.width - (me.paddingLeft + me.paddingRight)
    			: me.height - (me.paddingTop + me.PaddingBottom);

    		var result = [];
    		var i, tick;

    		if (ticksLength > axisLength) {
    			skipRatio = 1 + Math.floor(ticksLength / axisLength);
    		}

    		// if they defined a max number of optionTicks,
    		// increase skipRatio until that number is met
    		if (tickCount > maxTicks) {
    			skipRatio = Math.max(skipRatio, 1 + Math.floor(tickCount / maxTicks));
    		}

    		for (i = 0; i < tickCount; i++) {
    			tick = ticks[i];

    			if (skipRatio > 1 && i % skipRatio > 0) {
    				// leave tick in place but make sure it's not displayed (#4635)
    				delete tick.label;
    			}
    			result.push(tick);
    		}
    		return result;
    	},

    	/**
    	 * @private
    	 */
    	_tickSize: function() {
    		var me = this;
    		var isHorizontal = me.isHorizontal();
    		var optionTicks = me.options.ticks.minor;

    		// Calculate space needed by label in axis direction.
    		var rot = helpers$1.toRadians(me.labelRotation);
    		var cos = Math.abs(Math.cos(rot));
    		var sin = Math.abs(Math.sin(rot));

    		var padding = optionTicks.autoSkipPadding || 0;
    		var w = (me.longestLabelWidth + padding) || 0;

    		var tickFont = helpers$1.options._parseFont(optionTicks);
    		var h = (me._maxLabelLines * tickFont.lineHeight + padding) || 0;

    		// Calculate space needed for 1 tick in axis direction.
    		return isHorizontal
    			? h * cos > w * sin ? w / cos : h / sin
    			: h * sin < w * cos ? h / cos : w / sin;
    	},

    	/**
    	 * @private
    	 */
    	_isVisible: function() {
    		var me = this;
    		var chart = me.chart;
    		var display = me.options.display;
    		var i, ilen, meta;

    		if (display !== 'auto') {
    			return !!display;
    		}

    		// When 'auto', the scale is visible if at least one associated dataset is visible.
    		for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
    			if (chart.isDatasetVisible(i)) {
    				meta = chart.getDatasetMeta(i);
    				if (meta.xAxisID === me.id || meta.yAxisID === me.id) {
    					return true;
    				}
    			}
    		}

    		return false;
    	},

    	/**
    	 * Actually draw the scale on the canvas
    	 * @param {object} chartArea - the area of the chart to draw full grid lines on
    	 */
    	draw: function(chartArea) {
    		var me = this;
    		var options = me.options;

    		if (!me._isVisible()) {
    			return;
    		}

    		var chart = me.chart;
    		var context = me.ctx;
    		var globalDefaults = core_defaults.global;
    		var defaultFontColor = globalDefaults.defaultFontColor;
    		var optionTicks = options.ticks.minor;
    		var optionMajorTicks = options.ticks.major || optionTicks;
    		var gridLines = options.gridLines;
    		var scaleLabel = options.scaleLabel;
    		var position = options.position;

    		var isRotated = me.labelRotation !== 0;
    		var isMirrored = optionTicks.mirror;
    		var isHorizontal = me.isHorizontal();

    		var parseFont = helpers$1.options._parseFont;
    		var ticks = optionTicks.display && optionTicks.autoSkip ? me._autoSkip(me.getTicks()) : me.getTicks();
    		var tickFontColor = valueOrDefault$9(optionTicks.fontColor, defaultFontColor);
    		var tickFont = parseFont(optionTicks);
    		var lineHeight = tickFont.lineHeight;
    		var majorTickFontColor = valueOrDefault$9(optionMajorTicks.fontColor, defaultFontColor);
    		var majorTickFont = parseFont(optionMajorTicks);
    		var tickPadding = optionTicks.padding;
    		var labelOffset = optionTicks.labelOffset;

    		var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;

    		var scaleLabelFontColor = valueOrDefault$9(scaleLabel.fontColor, defaultFontColor);
    		var scaleLabelFont = parseFont(scaleLabel);
    		var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);
    		var labelRotationRadians = helpers$1.toRadians(me.labelRotation);

    		var itemsToDraw = [];

    		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
    		var alignPixel = helpers$1._alignPixel;
    		var borderValue, tickStart, tickEnd;

    		if (position === 'top') {
    			borderValue = alignPixel(chart, me.bottom, axisWidth);
    			tickStart = me.bottom - tl;
    			tickEnd = borderValue - axisWidth / 2;
    		} else if (position === 'bottom') {
    			borderValue = alignPixel(chart, me.top, axisWidth);
    			tickStart = borderValue + axisWidth / 2;
    			tickEnd = me.top + tl;
    		} else if (position === 'left') {
    			borderValue = alignPixel(chart, me.right, axisWidth);
    			tickStart = me.right - tl;
    			tickEnd = borderValue - axisWidth / 2;
    		} else {
    			borderValue = alignPixel(chart, me.left, axisWidth);
    			tickStart = borderValue + axisWidth / 2;
    			tickEnd = me.left + tl;
    		}

    		var epsilon = 0.0000001; // 0.0000001 is margin in pixels for Accumulated error.

    		helpers$1.each(ticks, function(tick, index) {
    			// autoskipper skipped this tick (#4635)
    			if (helpers$1.isNullOrUndef(tick.label)) {
    				return;
    			}

    			var label = tick.label;
    			var lineWidth, lineColor, borderDash, borderDashOffset;
    			if (index === me.zeroLineIndex && options.offset === gridLines.offsetGridLines) {
    				// Draw the first index specially
    				lineWidth = gridLines.zeroLineWidth;
    				lineColor = gridLines.zeroLineColor;
    				borderDash = gridLines.zeroLineBorderDash || [];
    				borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;
    			} else {
    				lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, index);
    				lineColor = valueAtIndexOrDefault(gridLines.color, index);
    				borderDash = gridLines.borderDash || [];
    				borderDashOffset = gridLines.borderDashOffset || 0.0;
    			}

    			// Common properties
    			var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY, textOffset, textAlign;
    			var labelCount = helpers$1.isArray(label) ? label.length : 1;
    			var lineValue = getPixelForGridLine(me, index, gridLines.offsetGridLines);

    			if (isHorizontal) {
    				var labelYOffset = tl + tickPadding;

    				if (lineValue < me.left - epsilon) {
    					lineColor = 'rgba(0,0,0,0)';
    				}

    				tx1 = tx2 = x1 = x2 = alignPixel(chart, lineValue, lineWidth);
    				ty1 = tickStart;
    				ty2 = tickEnd;
    				labelX = me.getPixelForTick(index) + labelOffset; // x values for optionTicks (need to consider offsetLabel option)

    				if (position === 'top') {
    					y1 = alignPixel(chart, chartArea.top, axisWidth) + axisWidth / 2;
    					y2 = chartArea.bottom;
    					textOffset = ((!isRotated ? 0.5 : 1) - labelCount) * lineHeight;
    					textAlign = !isRotated ? 'center' : 'left';
    					labelY = me.bottom - labelYOffset;
    				} else {
    					y1 = chartArea.top;
    					y2 = alignPixel(chart, chartArea.bottom, axisWidth) - axisWidth / 2;
    					textOffset = (!isRotated ? 0.5 : 0) * lineHeight;
    					textAlign = !isRotated ? 'center' : 'right';
    					labelY = me.top + labelYOffset;
    				}
    			} else {
    				var labelXOffset = (isMirrored ? 0 : tl) + tickPadding;

    				if (lineValue < me.top - epsilon) {
    					lineColor = 'rgba(0,0,0,0)';
    				}

    				tx1 = tickStart;
    				tx2 = tickEnd;
    				ty1 = ty2 = y1 = y2 = alignPixel(chart, lineValue, lineWidth);
    				labelY = me.getPixelForTick(index) + labelOffset;
    				textOffset = (1 - labelCount) * lineHeight / 2;

    				if (position === 'left') {
    					x1 = alignPixel(chart, chartArea.left, axisWidth) + axisWidth / 2;
    					x2 = chartArea.right;
    					textAlign = isMirrored ? 'left' : 'right';
    					labelX = me.right - labelXOffset;
    				} else {
    					x1 = chartArea.left;
    					x2 = alignPixel(chart, chartArea.right, axisWidth) - axisWidth / 2;
    					textAlign = isMirrored ? 'right' : 'left';
    					labelX = me.left + labelXOffset;
    				}
    			}

    			itemsToDraw.push({
    				tx1: tx1,
    				ty1: ty1,
    				tx2: tx2,
    				ty2: ty2,
    				x1: x1,
    				y1: y1,
    				x2: x2,
    				y2: y2,
    				labelX: labelX,
    				labelY: labelY,
    				glWidth: lineWidth,
    				glColor: lineColor,
    				glBorderDash: borderDash,
    				glBorderDashOffset: borderDashOffset,
    				rotation: -1 * labelRotationRadians,
    				label: label,
    				major: tick.major,
    				textOffset: textOffset,
    				textAlign: textAlign
    			});
    		});

    		// Draw all of the tick labels, tick marks, and grid lines at the correct places
    		helpers$1.each(itemsToDraw, function(itemToDraw) {
    			var glWidth = itemToDraw.glWidth;
    			var glColor = itemToDraw.glColor;

    			if (gridLines.display && glWidth && glColor) {
    				context.save();
    				context.lineWidth = glWidth;
    				context.strokeStyle = glColor;
    				if (context.setLineDash) {
    					context.setLineDash(itemToDraw.glBorderDash);
    					context.lineDashOffset = itemToDraw.glBorderDashOffset;
    				}

    				context.beginPath();

    				if (gridLines.drawTicks) {
    					context.moveTo(itemToDraw.tx1, itemToDraw.ty1);
    					context.lineTo(itemToDraw.tx2, itemToDraw.ty2);
    				}

    				if (gridLines.drawOnChartArea) {
    					context.moveTo(itemToDraw.x1, itemToDraw.y1);
    					context.lineTo(itemToDraw.x2, itemToDraw.y2);
    				}

    				context.stroke();
    				context.restore();
    			}

    			if (optionTicks.display) {
    				// Make sure we draw text in the correct color and font
    				context.save();
    				context.translate(itemToDraw.labelX, itemToDraw.labelY);
    				context.rotate(itemToDraw.rotation);
    				context.font = itemToDraw.major ? majorTickFont.string : tickFont.string;
    				context.fillStyle = itemToDraw.major ? majorTickFontColor : tickFontColor;
    				context.textBaseline = 'middle';
    				context.textAlign = itemToDraw.textAlign;

    				var label = itemToDraw.label;
    				var y = itemToDraw.textOffset;
    				if (helpers$1.isArray(label)) {
    					for (var i = 0; i < label.length; ++i) {
    						// We just make sure the multiline element is a string here..
    						context.fillText('' + label[i], 0, y);
    						y += lineHeight;
    					}
    				} else {
    					context.fillText(label, 0, y);
    				}
    				context.restore();
    			}
    		});

    		if (scaleLabel.display) {
    			// Draw the scale label
    			var scaleLabelX;
    			var scaleLabelY;
    			var rotation = 0;
    			var halfLineHeight = scaleLabelFont.lineHeight / 2;

    			if (isHorizontal) {
    				scaleLabelX = me.left + ((me.right - me.left) / 2); // midpoint of the width
    				scaleLabelY = position === 'bottom'
    					? me.bottom - halfLineHeight - scaleLabelPadding.bottom
    					: me.top + halfLineHeight + scaleLabelPadding.top;
    			} else {
    				var isLeft = position === 'left';
    				scaleLabelX = isLeft
    					? me.left + halfLineHeight + scaleLabelPadding.top
    					: me.right - halfLineHeight - scaleLabelPadding.top;
    				scaleLabelY = me.top + ((me.bottom - me.top) / 2);
    				rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
    			}

    			context.save();
    			context.translate(scaleLabelX, scaleLabelY);
    			context.rotate(rotation);
    			context.textAlign = 'center';
    			context.textBaseline = 'middle';
    			context.fillStyle = scaleLabelFontColor; // render in correct colour
    			context.font = scaleLabelFont.string;
    			context.fillText(scaleLabel.labelString, 0, 0);
    			context.restore();
    		}

    		if (axisWidth) {
    			// Draw the line at the edge of the axis
    			var firstLineWidth = axisWidth;
    			var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, ticks.length - 1, 0);
    			var x1, x2, y1, y2;

    			if (isHorizontal) {
    				x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
    				x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
    				y1 = y2 = borderValue;
    			} else {
    				y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
    				y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
    				x1 = x2 = borderValue;
    			}

    			context.lineWidth = axisWidth;
    			context.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);
    			context.beginPath();
    			context.moveTo(x1, y1);
    			context.lineTo(x2, y2);
    			context.stroke();
    		}
    	}
    });

    var defaultConfig = {
    	position: 'bottom'
    };

    var scale_category = core_scale.extend({
    	/**
    	* Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those
    	* else fall back to data.labels
    	* @private
    	*/
    	getLabels: function() {
    		var data = this.chart.data;
    		return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;
    	},

    	determineDataLimits: function() {
    		var me = this;
    		var labels = me.getLabels();
    		me.minIndex = 0;
    		me.maxIndex = labels.length - 1;
    		var findIndex;

    		if (me.options.ticks.min !== undefined) {
    			// user specified min value
    			findIndex = labels.indexOf(me.options.ticks.min);
    			me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;
    		}

    		if (me.options.ticks.max !== undefined) {
    			// user specified max value
    			findIndex = labels.indexOf(me.options.ticks.max);
    			me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;
    		}

    		me.min = labels[me.minIndex];
    		me.max = labels[me.maxIndex];
    	},

    	buildTicks: function() {
    		var me = this;
    		var labels = me.getLabels();
    		// If we are viewing some subset of labels, slice the original array
    		me.ticks = (me.minIndex === 0 && me.maxIndex === labels.length - 1) ? labels : labels.slice(me.minIndex, me.maxIndex + 1);
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		var me = this;
    		var chart = me.chart;

    		if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {
    			return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);
    		}

    		return me.ticks[index - me.minIndex];
    	},

    	// Used to get data value locations.  Value can either be an index or a numerical value
    	getPixelForValue: function(value, index) {
    		var me = this;
    		var offset = me.options.offset;
    		// 1 is added because we need the length but we have the indexes
    		var offsetAmt = Math.max((me.maxIndex + 1 - me.minIndex - (offset ? 0 : 1)), 1);

    		// If value is a data object, then index is the index in the data array,
    		// not the index of the scale. We need to change that.
    		var valueCategory;
    		if (value !== undefined && value !== null) {
    			valueCategory = me.isHorizontal() ? value.x : value.y;
    		}
    		if (valueCategory !== undefined || (value !== undefined && isNaN(index))) {
    			var labels = me.getLabels();
    			value = valueCategory || value;
    			var idx = labels.indexOf(value);
    			index = idx !== -1 ? idx : index;
    		}

    		if (me.isHorizontal()) {
    			var valueWidth = me.width / offsetAmt;
    			var widthOffset = (valueWidth * (index - me.minIndex));

    			if (offset) {
    				widthOffset += (valueWidth / 2);
    			}

    			return me.left + widthOffset;
    		}
    		var valueHeight = me.height / offsetAmt;
    		var heightOffset = (valueHeight * (index - me.minIndex));

    		if (offset) {
    			heightOffset += (valueHeight / 2);
    		}

    		return me.top + heightOffset;
    	},

    	getPixelForTick: function(index) {
    		return this.getPixelForValue(this.ticks[index], index + this.minIndex, null);
    	},

    	getValueForPixel: function(pixel) {
    		var me = this;
    		var offset = me.options.offset;
    		var value;
    		var offsetAmt = Math.max((me._ticks.length - (offset ? 0 : 1)), 1);
    		var horz = me.isHorizontal();
    		var valueDimension = (horz ? me.width : me.height) / offsetAmt;

    		pixel -= horz ? me.left : me.top;

    		if (offset) {
    			pixel -= (valueDimension / 2);
    		}

    		if (pixel <= 0) {
    			value = 0;
    		} else {
    			value = Math.round(pixel / valueDimension);
    		}

    		return value + me.minIndex;
    	},

    	getBasePixel: function() {
    		return this.bottom;
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults = defaultConfig;
    scale_category._defaults = _defaults;

    var noop = helpers$1.noop;
    var isNullOrUndef = helpers$1.isNullOrUndef;

    /**
     * Generate a set of linear ticks
     * @param generationOptions the options used to generate the ticks
     * @param dataRange the range of the data
     * @returns {number[]} array of tick values
     */
    function generateTicks(generationOptions, dataRange) {
    	var ticks = [];
    	// To get a "nice" value for the tick spacing, we will use the appropriately named
    	// "nice number" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
    	// for details.

    	var MIN_SPACING = 1e-14;
    	var stepSize = generationOptions.stepSize;
    	var unit = stepSize || 1;
    	var maxNumSpaces = generationOptions.maxTicks - 1;
    	var min = generationOptions.min;
    	var max = generationOptions.max;
    	var precision = generationOptions.precision;
    	var rmin = dataRange.min;
    	var rmax = dataRange.max;
    	var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
    	var factor, niceMin, niceMax, numSpaces;

    	// Beyond MIN_SPACING floating point numbers being to lose precision
    	// such that we can't do the math necessary to generate ticks
    	if (spacing < MIN_SPACING && isNullOrUndef(min) && isNullOrUndef(max)) {
    		return [rmin, rmax];
    	}

    	numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
    	if (numSpaces > maxNumSpaces) {
    		// If the calculated num of spaces exceeds maxNumSpaces, recalculate it
    		spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
    	}

    	if (stepSize || isNullOrUndef(precision)) {
    		// If a precision is not specified, calculate factor based on spacing
    		factor = Math.pow(10, helpers$1._decimalPlaces(spacing));
    	} else {
    		// If the user specified a precision, round to that number of decimal places
    		factor = Math.pow(10, precision);
    		spacing = Math.ceil(spacing * factor) / factor;
    	}

    	niceMin = Math.floor(rmin / spacing) * spacing;
    	niceMax = Math.ceil(rmax / spacing) * spacing;

    	// If min, max and stepSize is set and they make an evenly spaced scale use it.
    	if (stepSize) {
    		// If very close to our whole number, use it.
    		if (!isNullOrUndef(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {
    			niceMin = min;
    		}
    		if (!isNullOrUndef(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {
    			niceMax = max;
    		}
    	}

    	numSpaces = (niceMax - niceMin) / spacing;
    	// If very close to our rounded value, use it.
    	if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
    		numSpaces = Math.round(numSpaces);
    	} else {
    		numSpaces = Math.ceil(numSpaces);
    	}

    	niceMin = Math.round(niceMin * factor) / factor;
    	niceMax = Math.round(niceMax * factor) / factor;
    	ticks.push(isNullOrUndef(min) ? niceMin : min);
    	for (var j = 1; j < numSpaces; ++j) {
    		ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);
    	}
    	ticks.push(isNullOrUndef(max) ? niceMax : max);

    	return ticks;
    }

    var scale_linearbase = core_scale.extend({
    	getRightValue: function(value) {
    		if (typeof value === 'string') {
    			return +value;
    		}
    		return core_scale.prototype.getRightValue.call(this, value);
    	},

    	handleTickRangeOptions: function() {
    		var me = this;
    		var opts = me.options;
    		var tickOpts = opts.ticks;

    		// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
    		// do nothing since that would make the chart weird. If the user really wants a weird chart
    		// axis, they can manually override it
    		if (tickOpts.beginAtZero) {
    			var minSign = helpers$1.sign(me.min);
    			var maxSign = helpers$1.sign(me.max);

    			if (minSign < 0 && maxSign < 0) {
    				// move the top up to 0
    				me.max = 0;
    			} else if (minSign > 0 && maxSign > 0) {
    				// move the bottom down to 0
    				me.min = 0;
    			}
    		}

    		var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;
    		var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;

    		if (tickOpts.min !== undefined) {
    			me.min = tickOpts.min;
    		} else if (tickOpts.suggestedMin !== undefined) {
    			if (me.min === null) {
    				me.min = tickOpts.suggestedMin;
    			} else {
    				me.min = Math.min(me.min, tickOpts.suggestedMin);
    			}
    		}

    		if (tickOpts.max !== undefined) {
    			me.max = tickOpts.max;
    		} else if (tickOpts.suggestedMax !== undefined) {
    			if (me.max === null) {
    				me.max = tickOpts.suggestedMax;
    			} else {
    				me.max = Math.max(me.max, tickOpts.suggestedMax);
    			}
    		}

    		if (setMin !== setMax) {
    			// We set the min or the max but not both.
    			// So ensure that our range is good
    			// Inverted or 0 length range can happen when
    			// ticks.min is set, and no datasets are visible
    			if (me.min >= me.max) {
    				if (setMin) {
    					me.max = me.min + 1;
    				} else {
    					me.min = me.max - 1;
    				}
    			}
    		}

    		if (me.min === me.max) {
    			me.max++;

    			if (!tickOpts.beginAtZero) {
    				me.min--;
    			}
    		}
    	},

    	getTickLimit: function() {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var stepSize = tickOpts.stepSize;
    		var maxTicksLimit = tickOpts.maxTicksLimit;
    		var maxTicks;

    		if (stepSize) {
    			maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
    		} else {
    			maxTicks = me._computeTickLimit();
    			maxTicksLimit = maxTicksLimit || 11;
    		}

    		if (maxTicksLimit) {
    			maxTicks = Math.min(maxTicksLimit, maxTicks);
    		}

    		return maxTicks;
    	},

    	_computeTickLimit: function() {
    		return Number.POSITIVE_INFINITY;
    	},

    	handleDirectionalChanges: noop,

    	buildTicks: function() {
    		var me = this;
    		var opts = me.options;
    		var tickOpts = opts.ticks;

    		// Figure out what the max number of ticks we can support it is based on the size of
    		// the axis area. For now, we say that the minimum tick spacing in pixels must be 40
    		// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
    		// the graph. Make sure we always have at least 2 ticks
    		var maxTicks = me.getTickLimit();
    		maxTicks = Math.max(2, maxTicks);

    		var numericGeneratorOptions = {
    			maxTicks: maxTicks,
    			min: tickOpts.min,
    			max: tickOpts.max,
    			precision: tickOpts.precision,
    			stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
    		};
    		var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);

    		me.handleDirectionalChanges();

    		// At this point, we need to update our max and min given the tick values since we have expanded the
    		// range of the scale
    		me.max = helpers$1.max(ticks);
    		me.min = helpers$1.min(ticks);

    		if (tickOpts.reverse) {
    			ticks.reverse();

    			me.start = me.max;
    			me.end = me.min;
    		} else {
    			me.start = me.min;
    			me.end = me.max;
    		}
    	},

    	convertTicksToLabels: function() {
    		var me = this;
    		me.ticksAsNumbers = me.ticks.slice();
    		me.zeroLineIndex = me.ticks.indexOf(0);

    		core_scale.prototype.convertTicksToLabels.call(me);
    	}
    });

    var defaultConfig$1 = {
    	position: 'left',
    	ticks: {
    		callback: core_ticks.formatters.linear
    	}
    };

    var scale_linear = scale_linearbase.extend({
    	determineDataLimits: function() {
    		var me = this;
    		var opts = me.options;
    		var chart = me.chart;
    		var data = chart.data;
    		var datasets = data.datasets;
    		var isHorizontal = me.isHorizontal();
    		var DEFAULT_MIN = 0;
    		var DEFAULT_MAX = 1;

    		function IDMatches(meta) {
    			return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
    		}

    		// First Calculate the range
    		me.min = null;
    		me.max = null;

    		var hasStacks = opts.stacked;
    		if (hasStacks === undefined) {
    			helpers$1.each(datasets, function(dataset, datasetIndex) {
    				if (hasStacks) {
    					return;
    				}

    				var meta = chart.getDatasetMeta(datasetIndex);
    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
    					meta.stack !== undefined) {
    					hasStacks = true;
    				}
    			});
    		}

    		if (opts.stacked || hasStacks) {
    			var valuesPerStack = {};

    			helpers$1.each(datasets, function(dataset, datasetIndex) {
    				var meta = chart.getDatasetMeta(datasetIndex);
    				var key = [
    					meta.type,
    					// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
    					((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
    					meta.stack
    				].join('.');

    				if (valuesPerStack[key] === undefined) {
    					valuesPerStack[key] = {
    						positiveValues: [],
    						negativeValues: []
    					};
    				}

    				// Store these per type
    				var positiveValues = valuesPerStack[key].positiveValues;
    				var negativeValues = valuesPerStack[key].negativeValues;

    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
    					helpers$1.each(dataset.data, function(rawValue, index) {
    						var value = +me.getRightValue(rawValue);
    						if (isNaN(value) || meta.data[index].hidden) {
    							return;
    						}

    						positiveValues[index] = positiveValues[index] || 0;
    						negativeValues[index] = negativeValues[index] || 0;

    						if (opts.relativePoints) {
    							positiveValues[index] = 100;
    						} else if (value < 0) {
    							negativeValues[index] += value;
    						} else {
    							positiveValues[index] += value;
    						}
    					});
    				}
    			});

    			helpers$1.each(valuesPerStack, function(valuesForType) {
    				var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);
    				var minVal = helpers$1.min(values);
    				var maxVal = helpers$1.max(values);
    				me.min = me.min === null ? minVal : Math.min(me.min, minVal);
    				me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
    			});

    		} else {
    			helpers$1.each(datasets, function(dataset, datasetIndex) {
    				var meta = chart.getDatasetMeta(datasetIndex);
    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
    					helpers$1.each(dataset.data, function(rawValue, index) {
    						var value = +me.getRightValue(rawValue);
    						if (isNaN(value) || meta.data[index].hidden) {
    							return;
    						}

    						if (me.min === null) {
    							me.min = value;
    						} else if (value < me.min) {
    							me.min = value;
    						}

    						if (me.max === null) {
    							me.max = value;
    						} else if (value > me.max) {
    							me.max = value;
    						}
    					});
    				}
    			});
    		}

    		me.min = isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
    		me.max = isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;

    		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
    		this.handleTickRangeOptions();
    	},

    	// Returns the maximum number of ticks based on the scale dimension
    	_computeTickLimit: function() {
    		var me = this;
    		var tickFont;

    		if (me.isHorizontal()) {
    			return Math.ceil(me.width / 40);
    		}
    		tickFont = helpers$1.options._parseFont(me.options.ticks);
    		return Math.ceil(me.height / tickFont.lineHeight);
    	},

    	// Called after the ticks are built. We need
    	handleDirectionalChanges: function() {
    		if (!this.isHorizontal()) {
    			// We are in a vertical orientation. The top value is the highest. So reverse the array
    			this.ticks.reverse();
    		}
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
    	},

    	// Utils
    	getPixelForValue: function(value) {
    		// This must be called after fit has been run so that
    		// this.left, this.top, this.right, and this.bottom have been defined
    		var me = this;
    		var start = me.start;

    		var rightValue = +me.getRightValue(value);
    		var pixel;
    		var range = me.end - start;

    		if (me.isHorizontal()) {
    			pixel = me.left + (me.width / range * (rightValue - start));
    		} else {
    			pixel = me.bottom - (me.height / range * (rightValue - start));
    		}
    		return pixel;
    	},

    	getValueForPixel: function(pixel) {
    		var me = this;
    		var isHorizontal = me.isHorizontal();
    		var innerDimension = isHorizontal ? me.width : me.height;
    		var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;
    		return me.start + ((me.end - me.start) * offset);
    	},

    	getPixelForTick: function(index) {
    		return this.getPixelForValue(this.ticksAsNumbers[index]);
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$1 = defaultConfig$1;
    scale_linear._defaults = _defaults$1;

    var valueOrDefault$a = helpers$1.valueOrDefault;

    /**
     * Generate a set of logarithmic ticks
     * @param generationOptions the options used to generate the ticks
     * @param dataRange the range of the data
     * @returns {number[]} array of tick values
     */
    function generateTicks$1(generationOptions, dataRange) {
    	var ticks = [];

    	var tickVal = valueOrDefault$a(generationOptions.min, Math.pow(10, Math.floor(helpers$1.log10(dataRange.min))));

    	var endExp = Math.floor(helpers$1.log10(dataRange.max));
    	var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
    	var exp, significand;

    	if (tickVal === 0) {
    		exp = Math.floor(helpers$1.log10(dataRange.minNotZero));
    		significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));

    		ticks.push(tickVal);
    		tickVal = significand * Math.pow(10, exp);
    	} else {
    		exp = Math.floor(helpers$1.log10(tickVal));
    		significand = Math.floor(tickVal / Math.pow(10, exp));
    	}
    	var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;

    	do {
    		ticks.push(tickVal);

    		++significand;
    		if (significand === 10) {
    			significand = 1;
    			++exp;
    			precision = exp >= 0 ? 1 : precision;
    		}

    		tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
    	} while (exp < endExp || (exp === endExp && significand < endSignificand));

    	var lastTick = valueOrDefault$a(generationOptions.max, tickVal);
    	ticks.push(lastTick);

    	return ticks;
    }

    var defaultConfig$2 = {
    	position: 'left',

    	// label settings
    	ticks: {
    		callback: core_ticks.formatters.logarithmic
    	}
    };

    // TODO(v3): change this to positiveOrDefault
    function nonNegativeOrDefault(value, defaultValue) {
    	return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;
    }

    var scale_logarithmic = core_scale.extend({
    	determineDataLimits: function() {
    		var me = this;
    		var opts = me.options;
    		var chart = me.chart;
    		var data = chart.data;
    		var datasets = data.datasets;
    		var isHorizontal = me.isHorizontal();
    		function IDMatches(meta) {
    			return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
    		}

    		// Calculate Range
    		me.min = null;
    		me.max = null;
    		me.minNotZero = null;

    		var hasStacks = opts.stacked;
    		if (hasStacks === undefined) {
    			helpers$1.each(datasets, function(dataset, datasetIndex) {
    				if (hasStacks) {
    					return;
    				}

    				var meta = chart.getDatasetMeta(datasetIndex);
    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
    					meta.stack !== undefined) {
    					hasStacks = true;
    				}
    			});
    		}

    		if (opts.stacked || hasStacks) {
    			var valuesPerStack = {};

    			helpers$1.each(datasets, function(dataset, datasetIndex) {
    				var meta = chart.getDatasetMeta(datasetIndex);
    				var key = [
    					meta.type,
    					// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
    					((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
    					meta.stack
    				].join('.');

    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
    					if (valuesPerStack[key] === undefined) {
    						valuesPerStack[key] = [];
    					}

    					helpers$1.each(dataset.data, function(rawValue, index) {
    						var values = valuesPerStack[key];
    						var value = +me.getRightValue(rawValue);
    						// invalid, hidden and negative values are ignored
    						if (isNaN(value) || meta.data[index].hidden || value < 0) {
    							return;
    						}
    						values[index] = values[index] || 0;
    						values[index] += value;
    					});
    				}
    			});

    			helpers$1.each(valuesPerStack, function(valuesForType) {
    				if (valuesForType.length > 0) {
    					var minVal = helpers$1.min(valuesForType);
    					var maxVal = helpers$1.max(valuesForType);
    					me.min = me.min === null ? minVal : Math.min(me.min, minVal);
    					me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
    				}
    			});

    		} else {
    			helpers$1.each(datasets, function(dataset, datasetIndex) {
    				var meta = chart.getDatasetMeta(datasetIndex);
    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
    					helpers$1.each(dataset.data, function(rawValue, index) {
    						var value = +me.getRightValue(rawValue);
    						// invalid, hidden and negative values are ignored
    						if (isNaN(value) || meta.data[index].hidden || value < 0) {
    							return;
    						}

    						if (me.min === null) {
    							me.min = value;
    						} else if (value < me.min) {
    							me.min = value;
    						}

    						if (me.max === null) {
    							me.max = value;
    						} else if (value > me.max) {
    							me.max = value;
    						}

    						if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {
    							me.minNotZero = value;
    						}
    					});
    				}
    			});
    		}

    		// Common base implementation to handle ticks.min, ticks.max
    		this.handleTickRangeOptions();
    	},

    	handleTickRangeOptions: function() {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var DEFAULT_MIN = 1;
    		var DEFAULT_MAX = 10;

    		me.min = nonNegativeOrDefault(tickOpts.min, me.min);
    		me.max = nonNegativeOrDefault(tickOpts.max, me.max);

    		if (me.min === me.max) {
    			if (me.min !== 0 && me.min !== null) {
    				me.min = Math.pow(10, Math.floor(helpers$1.log10(me.min)) - 1);
    				me.max = Math.pow(10, Math.floor(helpers$1.log10(me.max)) + 1);
    			} else {
    				me.min = DEFAULT_MIN;
    				me.max = DEFAULT_MAX;
    			}
    		}
    		if (me.min === null) {
    			me.min = Math.pow(10, Math.floor(helpers$1.log10(me.max)) - 1);
    		}
    		if (me.max === null) {
    			me.max = me.min !== 0
    				? Math.pow(10, Math.floor(helpers$1.log10(me.min)) + 1)
    				: DEFAULT_MAX;
    		}
    		if (me.minNotZero === null) {
    			if (me.min > 0) {
    				me.minNotZero = me.min;
    			} else if (me.max < 1) {
    				me.minNotZero = Math.pow(10, Math.floor(helpers$1.log10(me.max)));
    			} else {
    				me.minNotZero = DEFAULT_MIN;
    			}
    		}
    	},

    	buildTicks: function() {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var reverse = !me.isHorizontal();

    		var generationOptions = {
    			min: nonNegativeOrDefault(tickOpts.min),
    			max: nonNegativeOrDefault(tickOpts.max)
    		};
    		var ticks = me.ticks = generateTicks$1(generationOptions, me);

    		// At this point, we need to update our max and min given the tick values since we have expanded the
    		// range of the scale
    		me.max = helpers$1.max(ticks);
    		me.min = helpers$1.min(ticks);

    		if (tickOpts.reverse) {
    			reverse = !reverse;
    			me.start = me.max;
    			me.end = me.min;
    		} else {
    			me.start = me.min;
    			me.end = me.max;
    		}
    		if (reverse) {
    			ticks.reverse();
    		}
    	},

    	convertTicksToLabels: function() {
    		this.tickValues = this.ticks.slice();

    		core_scale.prototype.convertTicksToLabels.call(this);
    	},

    	// Get the correct tooltip label
    	getLabelForIndex: function(index, datasetIndex) {
    		return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
    	},

    	getPixelForTick: function(index) {
    		return this.getPixelForValue(this.tickValues[index]);
    	},

    	/**
    	 * Returns the value of the first tick.
    	 * @param {number} value - The minimum not zero value.
    	 * @return {number} The first tick value.
    	 * @private
    	 */
    	_getFirstTickValue: function(value) {
    		var exp = Math.floor(helpers$1.log10(value));
    		var significand = Math.floor(value / Math.pow(10, exp));

    		return significand * Math.pow(10, exp);
    	},

    	getPixelForValue: function(value) {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var reverse = tickOpts.reverse;
    		var log10 = helpers$1.log10;
    		var firstTickValue = me._getFirstTickValue(me.minNotZero);
    		var offset = 0;
    		var innerDimension, pixel, start, end, sign;

    		value = +me.getRightValue(value);
    		if (reverse) {
    			start = me.end;
    			end = me.start;
    			sign = -1;
    		} else {
    			start = me.start;
    			end = me.end;
    			sign = 1;
    		}
    		if (me.isHorizontal()) {
    			innerDimension = me.width;
    			pixel = reverse ? me.right : me.left;
    		} else {
    			innerDimension = me.height;
    			sign *= -1; // invert, since the upper-left corner of the canvas is at pixel (0, 0)
    			pixel = reverse ? me.top : me.bottom;
    		}
    		if (value !== start) {
    			if (start === 0) { // include zero tick
    				offset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);
    				innerDimension -= offset;
    				start = firstTickValue;
    			}
    			if (value !== 0) {
    				offset += innerDimension / (log10(end) - log10(start)) * (log10(value) - log10(start));
    			}
    			pixel += sign * offset;
    		}
    		return pixel;
    	},

    	getValueForPixel: function(pixel) {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var reverse = tickOpts.reverse;
    		var log10 = helpers$1.log10;
    		var firstTickValue = me._getFirstTickValue(me.minNotZero);
    		var innerDimension, start, end, value;

    		if (reverse) {
    			start = me.end;
    			end = me.start;
    		} else {
    			start = me.start;
    			end = me.end;
    		}
    		if (me.isHorizontal()) {
    			innerDimension = me.width;
    			value = reverse ? me.right - pixel : pixel - me.left;
    		} else {
    			innerDimension = me.height;
    			value = reverse ? pixel - me.top : me.bottom - pixel;
    		}
    		if (value !== start) {
    			if (start === 0) { // include zero tick
    				var offset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);
    				value -= offset;
    				innerDimension -= offset;
    				start = firstTickValue;
    			}
    			value *= log10(end) - log10(start);
    			value /= innerDimension;
    			value = Math.pow(10, log10(start) + value);
    		}
    		return value;
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$2 = defaultConfig$2;
    scale_logarithmic._defaults = _defaults$2;

    var valueOrDefault$b = helpers$1.valueOrDefault;
    var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;
    var resolve$7 = helpers$1.options.resolve;

    var defaultConfig$3 = {
    	display: true,

    	// Boolean - Whether to animate scaling the chart from the centre
    	animate: true,
    	position: 'chartArea',

    	angleLines: {
    		display: true,
    		color: 'rgba(0, 0, 0, 0.1)',
    		lineWidth: 1,
    		borderDash: [],
    		borderDashOffset: 0.0
    	},

    	gridLines: {
    		circular: false
    	},

    	// label settings
    	ticks: {
    		// Boolean - Show a backdrop to the scale label
    		showLabelBackdrop: true,

    		// String - The colour of the label backdrop
    		backdropColor: 'rgba(255,255,255,0.75)',

    		// Number - The backdrop padding above & below the label in pixels
    		backdropPaddingY: 2,

    		// Number - The backdrop padding to the side of the label in pixels
    		backdropPaddingX: 2,

    		callback: core_ticks.formatters.linear
    	},

    	pointLabels: {
    		// Boolean - if true, show point labels
    		display: true,

    		// Number - Point label font size in pixels
    		fontSize: 10,

    		// Function - Used to convert point labels
    		callback: function(label) {
    			return label;
    		}
    	}
    };

    function getValueCount(scale) {
    	var opts = scale.options;
    	return opts.angleLines.display || opts.pointLabels.display ? scale.chart.data.labels.length : 0;
    }

    function getTickBackdropHeight(opts) {
    	var tickOpts = opts.ticks;

    	if (tickOpts.display && opts.display) {
    		return valueOrDefault$b(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;
    	}
    	return 0;
    }

    function measureLabelSize(ctx, lineHeight, label) {
    	if (helpers$1.isArray(label)) {
    		return {
    			w: helpers$1.longestText(ctx, ctx.font, label),
    			h: label.length * lineHeight
    		};
    	}

    	return {
    		w: ctx.measureText(label).width,
    		h: lineHeight
    	};
    }

    function determineLimits(angle, pos, size, min, max) {
    	if (angle === min || angle === max) {
    		return {
    			start: pos - (size / 2),
    			end: pos + (size / 2)
    		};
    	} else if (angle < min || angle > max) {
    		return {
    			start: pos - size,
    			end: pos
    		};
    	}

    	return {
    		start: pos,
    		end: pos + size
    	};
    }

    /**
     * Helper function to fit a radial linear scale with point labels
     */
    function fitWithPointLabels(scale) {

    	// Right, this is really confusing and there is a lot of maths going on here
    	// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
    	//
    	// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
    	//
    	// Solution:
    	//
    	// We assume the radius of the polygon is half the size of the canvas at first
    	// at each index we check if the text overlaps.
    	//
    	// Where it does, we store that angle and that index.
    	//
    	// After finding the largest index and angle we calculate how much we need to remove
    	// from the shape radius to move the point inwards by that x.
    	//
    	// We average the left and right distances to get the maximum shape radius that can fit in the box
    	// along with labels.
    	//
    	// Once we have that, we can find the centre point for the chart, by taking the x text protrusion
    	// on each side, removing that from the size, halving it and adding the left x protrusion width.
    	//
    	// This will mean we have a shape fitted to the canvas, as large as it can be with the labels
    	// and position it in the most space efficient manner
    	//
    	// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif

    	var plFont = helpers$1.options._parseFont(scale.options.pointLabels);

    	// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
    	// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
    	var furthestLimits = {
    		l: 0,
    		r: scale.width,
    		t: 0,
    		b: scale.height - scale.paddingTop
    	};
    	var furthestAngles = {};
    	var i, textSize, pointPosition;

    	scale.ctx.font = plFont.string;
    	scale._pointLabelSizes = [];

    	var valueCount = getValueCount(scale);
    	for (i = 0; i < valueCount; i++) {
    		pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);
    		textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i] || '');
    		scale._pointLabelSizes[i] = textSize;

    		// Add quarter circle to make degree 0 mean top of circle
    		var angleRadians = scale.getIndexAngle(i);
    		var angle = helpers$1.toDegrees(angleRadians) % 360;
    		var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    		var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);

    		if (hLimits.start < furthestLimits.l) {
    			furthestLimits.l = hLimits.start;
    			furthestAngles.l = angleRadians;
    		}

    		if (hLimits.end > furthestLimits.r) {
    			furthestLimits.r = hLimits.end;
    			furthestAngles.r = angleRadians;
    		}

    		if (vLimits.start < furthestLimits.t) {
    			furthestLimits.t = vLimits.start;
    			furthestAngles.t = angleRadians;
    		}

    		if (vLimits.end > furthestLimits.b) {
    			furthestLimits.b = vLimits.end;
    			furthestAngles.b = angleRadians;
    		}
    	}

    	scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);
    }

    function getTextAlignForAngle(angle) {
    	if (angle === 0 || angle === 180) {
    		return 'center';
    	} else if (angle < 180) {
    		return 'left';
    	}

    	return 'right';
    }

    function fillText(ctx, text, position, lineHeight) {
    	var y = position.y + lineHeight / 2;
    	var i, ilen;

    	if (helpers$1.isArray(text)) {
    		for (i = 0, ilen = text.length; i < ilen; ++i) {
    			ctx.fillText(text[i], position.x, y);
    			y += lineHeight;
    		}
    	} else {
    		ctx.fillText(text, position.x, y);
    	}
    }

    function adjustPointPositionForLabelHeight(angle, textSize, position) {
    	if (angle === 90 || angle === 270) {
    		position.y -= (textSize.h / 2);
    	} else if (angle > 270 || angle < 90) {
    		position.y -= textSize.h;
    	}
    }

    function drawPointLabels(scale) {
    	var ctx = scale.ctx;
    	var opts = scale.options;
    	var angleLineOpts = opts.angleLines;
    	var gridLineOpts = opts.gridLines;
    	var pointLabelOpts = opts.pointLabels;
    	var lineWidth = valueOrDefault$b(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
    	var lineColor = valueOrDefault$b(angleLineOpts.color, gridLineOpts.color);
    	var tickBackdropHeight = getTickBackdropHeight(opts);

    	ctx.save();
    	ctx.lineWidth = lineWidth;
    	ctx.strokeStyle = lineColor;
    	if (ctx.setLineDash) {
    		ctx.setLineDash(resolve$7([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
    		ctx.lineDashOffset = resolve$7([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);
    	}

    	var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);

    	// Point Label Font
    	var plFont = helpers$1.options._parseFont(pointLabelOpts);

    	ctx.font = plFont.string;
    	ctx.textBaseline = 'middle';

    	for (var i = getValueCount(scale) - 1; i >= 0; i--) {
    		if (angleLineOpts.display && lineWidth && lineColor) {
    			var outerPosition = scale.getPointPosition(i, outerDistance);
    			ctx.beginPath();
    			ctx.moveTo(scale.xCenter, scale.yCenter);
    			ctx.lineTo(outerPosition.x, outerPosition.y);
    			ctx.stroke();
    		}

    		if (pointLabelOpts.display) {
    			// Extra pixels out for some label spacing
    			var extra = (i === 0 ? tickBackdropHeight / 2 : 0);
    			var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);

    			// Keep this in loop since we may support array properties here
    			var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);
    			ctx.fillStyle = pointLabelFontColor;

    			var angleRadians = scale.getIndexAngle(i);
    			var angle = helpers$1.toDegrees(angleRadians);
    			ctx.textAlign = getTextAlignForAngle(angle);
    			adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
    			fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.lineHeight);
    		}
    	}
    	ctx.restore();
    }

    function drawRadiusLine(scale, gridLineOpts, radius, index) {
    	var ctx = scale.ctx;
    	var circular = gridLineOpts.circular;
    	var valueCount = getValueCount(scale);
    	var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);
    	var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);
    	var pointPosition;

    	if ((!circular && !valueCount) || !lineColor || !lineWidth) {
    		return;
    	}

    	ctx.save();
    	ctx.strokeStyle = lineColor;
    	ctx.lineWidth = lineWidth;
    	if (ctx.setLineDash) {
    		ctx.setLineDash(gridLineOpts.borderDash || []);
    		ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;
    	}

    	ctx.beginPath();
    	if (circular) {
    		// Draw circular arcs between the points
    		ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
    	} else {
    		// Draw straight lines connecting each index
    		pointPosition = scale.getPointPosition(0, radius);
    		ctx.moveTo(pointPosition.x, pointPosition.y);

    		for (var i = 1; i < valueCount; i++) {
    			pointPosition = scale.getPointPosition(i, radius);
    			ctx.lineTo(pointPosition.x, pointPosition.y);
    		}
    	}
    	ctx.closePath();
    	ctx.stroke();
    	ctx.restore();
    }

    function numberOrZero(param) {
    	return helpers$1.isNumber(param) ? param : 0;
    }

    var scale_radialLinear = scale_linearbase.extend({
    	setDimensions: function() {
    		var me = this;

    		// Set the unconstrained dimension before label rotation
    		me.width = me.maxWidth;
    		me.height = me.maxHeight;
    		me.paddingTop = getTickBackdropHeight(me.options) / 2;
    		me.xCenter = Math.floor(me.width / 2);
    		me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
    		me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
    	},

    	determineDataLimits: function() {
    		var me = this;
    		var chart = me.chart;
    		var min = Number.POSITIVE_INFINITY;
    		var max = Number.NEGATIVE_INFINITY;

    		helpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {
    			if (chart.isDatasetVisible(datasetIndex)) {
    				var meta = chart.getDatasetMeta(datasetIndex);

    				helpers$1.each(dataset.data, function(rawValue, index) {
    					var value = +me.getRightValue(rawValue);
    					if (isNaN(value) || meta.data[index].hidden) {
    						return;
    					}

    					min = Math.min(value, min);
    					max = Math.max(value, max);
    				});
    			}
    		});

    		me.min = (min === Number.POSITIVE_INFINITY ? 0 : min);
    		me.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);

    		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
    		me.handleTickRangeOptions();
    	},

    	// Returns the maximum number of ticks based on the scale dimension
    	_computeTickLimit: function() {
    		return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
    	},

    	convertTicksToLabels: function() {
    		var me = this;

    		scale_linearbase.prototype.convertTicksToLabels.call(me);

    		// Point labels
    		me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
    	},

    	fit: function() {
    		var me = this;
    		var opts = me.options;

    		if (opts.display && opts.pointLabels.display) {
    			fitWithPointLabels(me);
    		} else {
    			me.setCenterPoint(0, 0, 0, 0);
    		}
    	},

    	/**
    	 * Set radius reductions and determine new radius and center point
    	 * @private
    	 */
    	setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
    		var me = this;
    		var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
    		var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
    		var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
    		var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);

    		radiusReductionLeft = numberOrZero(radiusReductionLeft);
    		radiusReductionRight = numberOrZero(radiusReductionRight);
    		radiusReductionTop = numberOrZero(radiusReductionTop);
    		radiusReductionBottom = numberOrZero(radiusReductionBottom);

    		me.drawingArea = Math.min(
    			Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
    			Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
    		me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
    	},

    	setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
    		var me = this;
    		var maxRight = me.width - rightMovement - me.drawingArea;
    		var maxLeft = leftMovement + me.drawingArea;
    		var maxTop = topMovement + me.drawingArea;
    		var maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;

    		me.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);
    		me.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);
    	},

    	getIndexAngle: function(index) {
    		var angleMultiplier = (Math.PI * 2) / getValueCount(this);
    		var startAngle = this.chart.options && this.chart.options.startAngle ?
    			this.chart.options.startAngle :
    			0;

    		var startAngleRadians = startAngle * Math.PI * 2 / 360;

    		// Start from the top instead of right, so remove a quarter of the circle
    		return index * angleMultiplier + startAngleRadians;
    	},

    	getDistanceFromCenterForValue: function(value) {
    		var me = this;

    		if (value === null) {
    			return 0; // null always in center
    		}

    		// Take into account half font size + the yPadding of the top value
    		var scalingFactor = me.drawingArea / (me.max - me.min);
    		if (me.options.ticks.reverse) {
    			return (me.max - value) * scalingFactor;
    		}
    		return (value - me.min) * scalingFactor;
    	},

    	getPointPosition: function(index, distanceFromCenter) {
    		var me = this;
    		var thisAngle = me.getIndexAngle(index) - (Math.PI / 2);
    		return {
    			x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,
    			y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter
    		};
    	},

    	getPointPositionForValue: function(index, value) {
    		return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
    	},

    	getBasePosition: function() {
    		var me = this;
    		var min = me.min;
    		var max = me.max;

    		return me.getPointPositionForValue(0,
    			me.beginAtZero ? 0 :
    			min < 0 && max < 0 ? max :
    			min > 0 && max > 0 ? min :
    			0);
    	},

    	draw: function() {
    		var me = this;
    		var opts = me.options;
    		var gridLineOpts = opts.gridLines;
    		var tickOpts = opts.ticks;

    		if (opts.display) {
    			var ctx = me.ctx;
    			var startAngle = this.getIndexAngle(0);
    			var tickFont = helpers$1.options._parseFont(tickOpts);

    			if (opts.angleLines.display || opts.pointLabels.display) {
    				drawPointLabels(me);
    			}

    			helpers$1.each(me.ticks, function(label, index) {
    				// Don't draw a centre value (if it is minimum)
    				if (index > 0 || tickOpts.reverse) {
    					var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);

    					// Draw circular lines around the scale
    					if (gridLineOpts.display && index !== 0) {
    						drawRadiusLine(me, gridLineOpts, yCenterOffset, index);
    					}

    					if (tickOpts.display) {
    						var tickFontColor = valueOrDefault$b(tickOpts.fontColor, core_defaults.global.defaultFontColor);
    						ctx.font = tickFont.string;

    						ctx.save();
    						ctx.translate(me.xCenter, me.yCenter);
    						ctx.rotate(startAngle);

    						if (tickOpts.showLabelBackdrop) {
    							var labelWidth = ctx.measureText(label).width;
    							ctx.fillStyle = tickOpts.backdropColor;
    							ctx.fillRect(
    								-labelWidth / 2 - tickOpts.backdropPaddingX,
    								-yCenterOffset - tickFont.size / 2 - tickOpts.backdropPaddingY,
    								labelWidth + tickOpts.backdropPaddingX * 2,
    								tickFont.size + tickOpts.backdropPaddingY * 2
    							);
    						}

    						ctx.textAlign = 'center';
    						ctx.textBaseline = 'middle';
    						ctx.fillStyle = tickFontColor;
    						ctx.fillText(label, 0, -yCenterOffset);
    						ctx.restore();
    					}
    				}
    			});
    		}
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$3 = defaultConfig$3;
    scale_radialLinear._defaults = _defaults$3;

    var valueOrDefault$c = helpers$1.valueOrDefault;

    // Integer constants are from the ES6 spec.
    var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
    var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

    var INTERVALS = {
    	millisecond: {
    		common: true,
    		size: 1,
    		steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]
    	},
    	second: {
    		common: true,
    		size: 1000,
    		steps: [1, 2, 5, 10, 15, 30]
    	},
    	minute: {
    		common: true,
    		size: 60000,
    		steps: [1, 2, 5, 10, 15, 30]
    	},
    	hour: {
    		common: true,
    		size: 3600000,
    		steps: [1, 2, 3, 6, 12]
    	},
    	day: {
    		common: true,
    		size: 86400000,
    		steps: [1, 2, 5]
    	},
    	week: {
    		common: false,
    		size: 604800000,
    		steps: [1, 2, 3, 4]
    	},
    	month: {
    		common: true,
    		size: 2.628e9,
    		steps: [1, 2, 3]
    	},
    	quarter: {
    		common: false,
    		size: 7.884e9,
    		steps: [1, 2, 3, 4]
    	},
    	year: {
    		common: true,
    		size: 3.154e10
    	}
    };

    var UNITS = Object.keys(INTERVALS);

    function sorter(a, b) {
    	return a - b;
    }

    function arrayUnique(items) {
    	var hash = {};
    	var out = [];
    	var i, ilen, item;

    	for (i = 0, ilen = items.length; i < ilen; ++i) {
    		item = items[i];
    		if (!hash[item]) {
    			hash[item] = true;
    			out.push(item);
    		}
    	}

    	return out;
    }

    /**
     * Returns an array of {time, pos} objects used to interpolate a specific `time` or position
     * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is
     * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other
     * extremity (left + width or top + height). Note that it would be more optimized to directly
     * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need
     * to create the lookup table. The table ALWAYS contains at least two items: min and max.
     *
     * @param {number[]} timestamps - timestamps sorted from lowest to highest.
     * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min
     * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.
     * If 'series', timestamps will be positioned at the same distance from each other. In this
     * case, only timestamps that break the time linearity are registered, meaning that in the
     * best case, all timestamps are linear, the table contains only min and max.
     */
    function buildLookupTable(timestamps, min, max, distribution) {
    	if (distribution === 'linear' || !timestamps.length) {
    		return [
    			{time: min, pos: 0},
    			{time: max, pos: 1}
    		];
    	}

    	var table = [];
    	var items = [min];
    	var i, ilen, prev, curr, next;

    	for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
    		curr = timestamps[i];
    		if (curr > min && curr < max) {
    			items.push(curr);
    		}
    	}

    	items.push(max);

    	for (i = 0, ilen = items.length; i < ilen; ++i) {
    		next = items[i + 1];
    		prev = items[i - 1];
    		curr = items[i];

    		// only add points that breaks the scale linearity
    		if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
    			table.push({time: curr, pos: i / (ilen - 1)});
    		}
    	}

    	return table;
    }

    // @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/
    function lookup(table, key, value) {
    	var lo = 0;
    	var hi = table.length - 1;
    	var mid, i0, i1;

    	while (lo >= 0 && lo <= hi) {
    		mid = (lo + hi) >> 1;
    		i0 = table[mid - 1] || null;
    		i1 = table[mid];

    		if (!i0) {
    			// given value is outside table (before first item)
    			return {lo: null, hi: i1};
    		} else if (i1[key] < value) {
    			lo = mid + 1;
    		} else if (i0[key] > value) {
    			hi = mid - 1;
    		} else {
    			return {lo: i0, hi: i1};
    		}
    	}

    	// given value is outside table (after last item)
    	return {lo: i1, hi: null};
    }

    /**
     * Linearly interpolates the given source `value` using the table items `skey` values and
     * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')
     * returns the position for a timestamp equal to 42. If value is out of bounds, values at
     * index [0, 1] or [n - 1, n] are used for the interpolation.
     */
    function interpolate$1(table, skey, sval, tkey) {
    	var range = lookup(table, skey, sval);

    	// Note: the lookup table ALWAYS contains at least 2 items (min and max)
    	var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
    	var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;

    	var span = next[skey] - prev[skey];
    	var ratio = span ? (sval - prev[skey]) / span : 0;
    	var offset = (next[tkey] - prev[tkey]) * ratio;

    	return prev[tkey] + offset;
    }

    function toTimestamp(scale, input) {
    	var adapter = scale._adapter;
    	var options = scale.options.time;
    	var parser = options.parser;
    	var format = parser || options.format;
    	var value = input;

    	if (typeof parser === 'function') {
    		value = parser(value);
    	}

    	// Only parse if its not a timestamp already
    	if (!helpers$1.isFinite(value)) {
    		value = typeof format === 'string'
    			? adapter.parse(value, format)
    			: adapter.parse(value);
    	}

    	if (value !== null) {
    		return +value;
    	}

    	// Labels are in an incompatible format and no `parser` has been provided.
    	// The user might still use the deprecated `format` option for parsing.
    	if (!parser && typeof format === 'function') {
    		value = format(input);

    		// `format` could return something else than a timestamp, if so, parse it
    		if (!helpers$1.isFinite(value)) {
    			value = adapter.parse(value);
    		}
    	}

    	return value;
    }

    function parse(scale, input) {
    	if (helpers$1.isNullOrUndef(input)) {
    		return null;
    	}

    	var options = scale.options.time;
    	var value = toTimestamp(scale, scale.getRightValue(input));
    	if (value === null) {
    		return value;
    	}

    	if (options.round) {
    		value = +scale._adapter.startOf(value, options.round);
    	}

    	return value;
    }

    /**
     * Returns the number of unit to skip to be able to display up to `capacity` number of ticks
     * in `unit` for the given `min` / `max` range and respecting the interval steps constraints.
     */
    function determineStepSize(min, max, unit, capacity) {
    	var range = max - min;
    	var interval = INTERVALS[unit];
    	var milliseconds = interval.size;
    	var steps = interval.steps;
    	var i, ilen, factor;

    	if (!steps) {
    		return Math.ceil(range / (capacity * milliseconds));
    	}

    	for (i = 0, ilen = steps.length; i < ilen; ++i) {
    		factor = steps[i];
    		if (Math.ceil(range / (milliseconds * factor)) <= capacity) {
    			break;
    		}
    	}

    	return factor;
    }

    /**
     * Figures out what unit results in an appropriate number of auto-generated ticks
     */
    function determineUnitForAutoTicks(minUnit, min, max, capacity) {
    	var ilen = UNITS.length;
    	var i, interval, factor;

    	for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
    		interval = INTERVALS[UNITS[i]];
    		factor = interval.steps ? interval.steps[interval.steps.length - 1] : MAX_INTEGER;

    		if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
    			return UNITS[i];
    		}
    	}

    	return UNITS[ilen - 1];
    }

    /**
     * Figures out what unit to format a set of ticks with
     */
    function determineUnitForFormatting(scale, ticks, minUnit, min, max) {
    	var ilen = UNITS.length;
    	var i, unit;

    	for (i = ilen - 1; i >= UNITS.indexOf(minUnit); i--) {
    		unit = UNITS[i];
    		if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= ticks.length) {
    			return unit;
    		}
    	}

    	return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
    }

    function determineMajorUnit(unit) {
    	for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
    		if (INTERVALS[UNITS[i]].common) {
    			return UNITS[i];
    		}
    	}
    }

    /**
     * Generates a maximum of `capacity` timestamps between min and max, rounded to the
     * `minor` unit, aligned on the `major` unit and using the given scale time `options`.
     * Important: this method can return ticks outside the min and max range, it's the
     * responsibility of the calling code to clamp values if needed.
     */
    function generate(scale, min, max, capacity) {
    	var adapter = scale._adapter;
    	var options = scale.options;
    	var timeOpts = options.time;
    	var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
    	var major = determineMajorUnit(minor);
    	var stepSize = valueOrDefault$c(timeOpts.stepSize, timeOpts.unitStepSize);
    	var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
    	var majorTicksEnabled = options.ticks.major.enabled;
    	var interval = INTERVALS[minor];
    	var first = min;
    	var last = max;
    	var ticks = [];
    	var time;

    	if (!stepSize) {
    		stepSize = determineStepSize(min, max, minor, capacity);
    	}

    	// For 'week' unit, handle the first day of week option
    	if (weekday) {
    		first = +adapter.startOf(first, 'isoWeek', weekday);
    		last = +adapter.startOf(last, 'isoWeek', weekday);
    	}

    	// Align first/last ticks on unit
    	first = +adapter.startOf(first, weekday ? 'day' : minor);
    	last = +adapter.startOf(last, weekday ? 'day' : minor);

    	// Make sure that the last tick include max
    	if (last < max) {
    		last = +adapter.add(last, 1, minor);
    	}

    	time = first;

    	if (majorTicksEnabled && major && !weekday && !timeOpts.round) {
    		// Align the first tick on the previous `minor` unit aligned on the `major` unit:
    		// we first aligned time on the previous `major` unit then add the number of full
    		// stepSize there is between first and the previous major time.
    		time = +adapter.startOf(time, major);
    		time = +adapter.add(time, ~~((first - time) / (interval.size * stepSize)) * stepSize, minor);
    	}

    	for (; time < last; time = +adapter.add(time, stepSize, minor)) {
    		ticks.push(+time);
    	}

    	ticks.push(+time);

    	return ticks;
    }

    /**
     * Returns the start and end offsets from edges in the form of {start, end}
     * where each value is a relative width to the scale and ranges between 0 and 1.
     * They add extra margins on the both sides by scaling down the original scale.
     * Offsets are added when the `offset` option is true.
     */
    function computeOffsets(table, ticks, min, max, options) {
    	var start = 0;
    	var end = 0;
    	var first, last;

    	if (options.offset && ticks.length) {
    		if (!options.time.min) {
    			first = interpolate$1(table, 'time', ticks[0], 'pos');
    			if (ticks.length === 1) {
    				start = 1 - first;
    			} else {
    				start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;
    			}
    		}
    		if (!options.time.max) {
    			last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');
    			if (ticks.length === 1) {
    				end = last;
    			} else {
    				end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;
    			}
    		}
    	}

    	return {start: start, end: end};
    }

    function ticksFromTimestamps(scale, values, majorUnit) {
    	var ticks = [];
    	var i, ilen, value, major;

    	for (i = 0, ilen = values.length; i < ilen; ++i) {
    		value = values[i];
    		major = majorUnit ? value === +scale._adapter.startOf(value, majorUnit) : false;

    		ticks.push({
    			value: value,
    			major: major
    		});
    	}

    	return ticks;
    }

    var defaultConfig$4 = {
    	position: 'bottom',

    	/**
    	 * Data distribution along the scale:
    	 * - 'linear': data are spread according to their time (distances can vary),
    	 * - 'series': data are spread at the same distance from each other.
    	 * @see https://github.com/chartjs/Chart.js/pull/4507
    	 * @since 2.7.0
    	 */
    	distribution: 'linear',

    	/**
    	 * Scale boundary strategy (bypassed by min/max time options)
    	 * - `data`: make sure data are fully visible, ticks outside are removed
    	 * - `ticks`: make sure ticks are fully visible, data outside are truncated
    	 * @see https://github.com/chartjs/Chart.js/pull/4556
    	 * @since 2.7.0
    	 */
    	bounds: 'data',

    	adapters: {},
    	time: {
    		parser: false, // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
    		format: false, // DEPRECATED false == date objects, moment object, callback or a pattern string from https://momentjs.com/docs/#/parsing/string-format/
    		unit: false, // false == automatic or override with week, month, year, etc.
    		round: false, // none, or override with week, month, year, etc.
    		displayFormat: false, // DEPRECATED
    		isoWeekday: false, // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/
    		minUnit: 'millisecond',
    		displayFormats: {}
    	},
    	ticks: {
    		autoSkip: false,

    		/**
    		 * Ticks generation input values:
    		 * - 'auto': generates "optimal" ticks based on scale size and time options.
    		 * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
    		 * - 'labels': generates ticks from user given `data.labels` values ONLY.
    		 * @see https://github.com/chartjs/Chart.js/pull/4507
    		 * @since 2.7.0
    		 */
    		source: 'auto',

    		major: {
    			enabled: false
    		}
    	}
    };

    var scale_time = core_scale.extend({
    	initialize: function() {
    		this.mergeTicksOptions();
    		core_scale.prototype.initialize.call(this);
    	},

    	update: function() {
    		var me = this;
    		var options = me.options;
    		var time = options.time || (options.time = {});
    		var adapter = me._adapter = new core_adapters._date(options.adapters.date);

    		// DEPRECATIONS: output a message only one time per update
    		if (time.format) {
    			console.warn('options.time.format is deprecated and replaced by options.time.parser.');
    		}

    		// Backward compatibility: before introducing adapter, `displayFormats` was
    		// supposed to contain *all* unit/string pairs but this can't be resolved
    		// when loading the scale (adapters are loaded afterward), so let's populate
    		// missing formats on update
    		helpers$1.mergeIf(time.displayFormats, adapter.formats());

    		return core_scale.prototype.update.apply(me, arguments);
    	},

    	/**
    	 * Allows data to be referenced via 't' attribute
    	 */
    	getRightValue: function(rawValue) {
    		if (rawValue && rawValue.t !== undefined) {
    			rawValue = rawValue.t;
    		}
    		return core_scale.prototype.getRightValue.call(this, rawValue);
    	},

    	determineDataLimits: function() {
    		var me = this;
    		var chart = me.chart;
    		var adapter = me._adapter;
    		var timeOpts = me.options.time;
    		var unit = timeOpts.unit || 'day';
    		var min = MAX_INTEGER;
    		var max = MIN_INTEGER;
    		var timestamps = [];
    		var datasets = [];
    		var labels = [];
    		var i, j, ilen, jlen, data, timestamp;
    		var dataLabels = chart.data.labels || [];

    		// Convert labels to timestamps
    		for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {
    			labels.push(parse(me, dataLabels[i]));
    		}

    		// Convert data to timestamps
    		for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
    			if (chart.isDatasetVisible(i)) {
    				data = chart.data.datasets[i].data;

    				// Let's consider that all data have the same format.
    				if (helpers$1.isObject(data[0])) {
    					datasets[i] = [];

    					for (j = 0, jlen = data.length; j < jlen; ++j) {
    						timestamp = parse(me, data[j]);
    						timestamps.push(timestamp);
    						datasets[i][j] = timestamp;
    					}
    				} else {
    					for (j = 0, jlen = labels.length; j < jlen; ++j) {
    						timestamps.push(labels[j]);
    					}
    					datasets[i] = labels.slice(0);
    				}
    			} else {
    				datasets[i] = [];
    			}
    		}

    		if (labels.length) {
    			// Sort labels **after** data have been converted
    			labels = arrayUnique(labels).sort(sorter);
    			min = Math.min(min, labels[0]);
    			max = Math.max(max, labels[labels.length - 1]);
    		}

    		if (timestamps.length) {
    			timestamps = arrayUnique(timestamps).sort(sorter);
    			min = Math.min(min, timestamps[0]);
    			max = Math.max(max, timestamps[timestamps.length - 1]);
    		}

    		min = parse(me, timeOpts.min) || min;
    		max = parse(me, timeOpts.max) || max;

    		// In case there is no valid min/max, set limits based on unit time option
    		min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;
    		max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;

    		// Make sure that max is strictly higher than min (required by the lookup table)
    		me.min = Math.min(min, max);
    		me.max = Math.max(min + 1, max);

    		// PRIVATE
    		me._horizontal = me.isHorizontal();
    		me._table = [];
    		me._timestamps = {
    			data: timestamps,
    			datasets: datasets,
    			labels: labels
    		};
    	},

    	buildTicks: function() {
    		var me = this;
    		var min = me.min;
    		var max = me.max;
    		var options = me.options;
    		var timeOpts = options.time;
    		var timestamps = [];
    		var ticks = [];
    		var i, ilen, timestamp;

    		switch (options.ticks.source) {
    		case 'data':
    			timestamps = me._timestamps.data;
    			break;
    		case 'labels':
    			timestamps = me._timestamps.labels;
    			break;
    		case 'auto':
    		default:
    			timestamps = generate(me, min, max, me.getLabelCapacity(min));
    		}

    		if (options.bounds === 'ticks' && timestamps.length) {
    			min = timestamps[0];
    			max = timestamps[timestamps.length - 1];
    		}

    		// Enforce limits with user min/max options
    		min = parse(me, timeOpts.min) || min;
    		max = parse(me, timeOpts.max) || max;

    		// Remove ticks outside the min/max range
    		for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
    			timestamp = timestamps[i];
    			if (timestamp >= min && timestamp <= max) {
    				ticks.push(timestamp);
    			}
    		}

    		me.min = min;
    		me.max = max;

    		// PRIVATE
    		me._unit = timeOpts.unit || determineUnitForFormatting(me, ticks, timeOpts.minUnit, me.min, me.max);
    		me._majorUnit = determineMajorUnit(me._unit);
    		me._table = buildLookupTable(me._timestamps.data, min, max, options.distribution);
    		me._offsets = computeOffsets(me._table, ticks, min, max, options);

    		if (options.ticks.reverse) {
    			ticks.reverse();
    		}

    		return ticksFromTimestamps(me, ticks, me._majorUnit);
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		var me = this;
    		var adapter = me._adapter;
    		var data = me.chart.data;
    		var timeOpts = me.options.time;
    		var label = data.labels && index < data.labels.length ? data.labels[index] : '';
    		var value = data.datasets[datasetIndex].data[index];

    		if (helpers$1.isObject(value)) {
    			label = me.getRightValue(value);
    		}
    		if (timeOpts.tooltipFormat) {
    			return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);
    		}
    		if (typeof label === 'string') {
    			return label;
    		}
    		return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);
    	},

    	/**
    	 * Function to format an individual tick mark
    	 * @private
    	 */
    	tickFormatFunction: function(time, index, ticks, format) {
    		var me = this;
    		var adapter = me._adapter;
    		var options = me.options;
    		var formats = options.time.displayFormats;
    		var minorFormat = formats[me._unit];
    		var majorUnit = me._majorUnit;
    		var majorFormat = formats[majorUnit];
    		var majorTime = +adapter.startOf(time, majorUnit);
    		var majorTickOpts = options.ticks.major;
    		var major = majorTickOpts.enabled && majorUnit && majorFormat && time === majorTime;
    		var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);
    		var tickOpts = major ? majorTickOpts : options.ticks.minor;
    		var formatter = valueOrDefault$c(tickOpts.callback, tickOpts.userCallback);

    		return formatter ? formatter(label, index, ticks) : label;
    	},

    	convertTicksToLabels: function(ticks) {
    		var labels = [];
    		var i, ilen;

    		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
    			labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));
    		}

    		return labels;
    	},

    	/**
    	 * @private
    	 */
    	getPixelForOffset: function(time) {
    		var me = this;
    		var isReverse = me.options.ticks.reverse;
    		var size = me._horizontal ? me.width : me.height;
    		var start = me._horizontal ? isReverse ? me.right : me.left : isReverse ? me.bottom : me.top;
    		var pos = interpolate$1(me._table, 'time', time, 'pos');
    		var offset = size * (me._offsets.start + pos) / (me._offsets.start + 1 + me._offsets.end);

    		return isReverse ? start - offset : start + offset;
    	},

    	getPixelForValue: function(value, index, datasetIndex) {
    		var me = this;
    		var time = null;

    		if (index !== undefined && datasetIndex !== undefined) {
    			time = me._timestamps.datasets[datasetIndex][index];
    		}

    		if (time === null) {
    			time = parse(me, value);
    		}

    		if (time !== null) {
    			return me.getPixelForOffset(time);
    		}
    	},

    	getPixelForTick: function(index) {
    		var ticks = this.getTicks();
    		return index >= 0 && index < ticks.length ?
    			this.getPixelForOffset(ticks[index].value) :
    			null;
    	},

    	getValueForPixel: function(pixel) {
    		var me = this;
    		var size = me._horizontal ? me.width : me.height;
    		var start = me._horizontal ? me.left : me.top;
    		var pos = (size ? (pixel - start) / size : 0) * (me._offsets.start + 1 + me._offsets.start) - me._offsets.end;
    		var time = interpolate$1(me._table, 'pos', pos, 'time');

    		// DEPRECATION, we should return time directly
    		return me._adapter._create(time);
    	},

    	/**
    	 * Crude approximation of what the label width might be
    	 * @private
    	 */
    	getLabelWidth: function(label) {
    		var me = this;
    		var ticksOpts = me.options.ticks;
    		var tickLabelWidth = me.ctx.measureText(label).width;
    		var angle = helpers$1.toRadians(ticksOpts.maxRotation);
    		var cosRotation = Math.cos(angle);
    		var sinRotation = Math.sin(angle);
    		var tickFontSize = valueOrDefault$c(ticksOpts.fontSize, core_defaults.global.defaultFontSize);

    		return (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation);
    	},

    	/**
    	 * @private
    	 */
    	getLabelCapacity: function(exampleTime) {
    		var me = this;

    		// pick the longest format (milliseconds) for guestimation
    		var format = me.options.time.displayFormats.millisecond;
    		var exampleLabel = me.tickFormatFunction(exampleTime, 0, [], format);
    		var tickLabelWidth = me.getLabelWidth(exampleLabel);
    		var innerWidth = me.isHorizontal() ? me.width : me.height;
    		var capacity = Math.floor(innerWidth / tickLabelWidth);

    		return capacity > 0 ? capacity : 1;
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$4 = defaultConfig$4;
    scale_time._defaults = _defaults$4;

    var scales = {
    	category: scale_category,
    	linear: scale_linear,
    	logarithmic: scale_logarithmic,
    	radialLinear: scale_radialLinear,
    	time: scale_time
    };

    var FORMATS = {
    	datetime: 'MMM D, YYYY, h:mm:ss a',
    	millisecond: 'h:mm:ss.SSS a',
    	second: 'h:mm:ss a',
    	minute: 'h:mm a',
    	hour: 'hA',
    	day: 'MMM D',
    	week: 'll',
    	month: 'MMM YYYY',
    	quarter: '[Q]Q - YYYY',
    	year: 'YYYY'
    };

    core_adapters._date.override(typeof moment === 'function' ? {
    	_id: 'moment', // DEBUG ONLY

    	formats: function() {
    		return FORMATS;
    	},

    	parse: function(value, format) {
    		if (typeof value === 'string' && typeof format === 'string') {
    			value = moment(value, format);
    		} else if (!(value instanceof moment)) {
    			value = moment(value);
    		}
    		return value.isValid() ? value.valueOf() : null;
    	},

    	format: function(time, format) {
    		return moment(time).format(format);
    	},

    	add: function(time, amount, unit) {
    		return moment(time).add(amount, unit).valueOf();
    	},

    	diff: function(max, min, unit) {
    		return moment.duration(moment(max).diff(moment(min))).as(unit);
    	},

    	startOf: function(time, unit, weekday) {
    		time = moment(time);
    		if (unit === 'isoWeek') {
    			return time.isoWeekday(weekday).valueOf();
    		}
    		return time.startOf(unit).valueOf();
    	},

    	endOf: function(time, unit) {
    		return moment(time).endOf(unit).valueOf();
    	},

    	// DEPRECATIONS

    	/**
    	 * Provided for backward compatibility with scale.getValueForPixel().
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 * @private
    	 */
    	_create: function(time) {
    		return moment(time);
    	},
    } : {});

    core_defaults._set('global', {
    	plugins: {
    		filler: {
    			propagate: true
    		}
    	}
    });

    var mappers = {
    	dataset: function(source) {
    		var index = source.fill;
    		var chart = source.chart;
    		var meta = chart.getDatasetMeta(index);
    		var visible = meta && chart.isDatasetVisible(index);
    		var points = (visible && meta.dataset._children) || [];
    		var length = points.length || 0;

    		return !length ? null : function(point, i) {
    			return (i < length && points[i]._view) || null;
    		};
    	},

    	boundary: function(source) {
    		var boundary = source.boundary;
    		var x = boundary ? boundary.x : null;
    		var y = boundary ? boundary.y : null;

    		return function(point) {
    			return {
    				x: x === null ? point.x : x,
    				y: y === null ? point.y : y,
    			};
    		};
    	}
    };

    // @todo if (fill[0] === '#')
    function decodeFill(el, index, count) {
    	var model = el._model || {};
    	var fill = model.fill;
    	var target;

    	if (fill === undefined) {
    		fill = !!model.backgroundColor;
    	}

    	if (fill === false || fill === null) {
    		return false;
    	}

    	if (fill === true) {
    		return 'origin';
    	}

    	target = parseFloat(fill, 10);
    	if (isFinite(target) && Math.floor(target) === target) {
    		if (fill[0] === '-' || fill[0] === '+') {
    			target = index + target;
    		}

    		if (target === index || target < 0 || target >= count) {
    			return false;
    		}

    		return target;
    	}

    	switch (fill) {
    	// compatibility
    	case 'bottom':
    		return 'start';
    	case 'top':
    		return 'end';
    	case 'zero':
    		return 'origin';
    	// supported boundaries
    	case 'origin':
    	case 'start':
    	case 'end':
    		return fill;
    	// invalid fill values
    	default:
    		return false;
    	}
    }

    function computeBoundary(source) {
    	var model = source.el._model || {};
    	var scale = source.el._scale || {};
    	var fill = source.fill;
    	var target = null;
    	var horizontal;

    	if (isFinite(fill)) {
    		return null;
    	}

    	// Backward compatibility: until v3, we still need to support boundary values set on
    	// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and
    	// controllers might still use it (e.g. the Smith chart).

    	if (fill === 'start') {
    		target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;
    	} else if (fill === 'end') {
    		target = model.scaleTop === undefined ? scale.top : model.scaleTop;
    	} else if (model.scaleZero !== undefined) {
    		target = model.scaleZero;
    	} else if (scale.getBasePosition) {
    		target = scale.getBasePosition();
    	} else if (scale.getBasePixel) {
    		target = scale.getBasePixel();
    	}

    	if (target !== undefined && target !== null) {
    		if (target.x !== undefined && target.y !== undefined) {
    			return target;
    		}

    		if (helpers$1.isFinite(target)) {
    			horizontal = scale.isHorizontal();
    			return {
    				x: horizontal ? target : null,
    				y: horizontal ? null : target
    			};
    		}
    	}

    	return null;
    }

    function resolveTarget(sources, index, propagate) {
    	var source = sources[index];
    	var fill = source.fill;
    	var visited = [index];
    	var target;

    	if (!propagate) {
    		return fill;
    	}

    	while (fill !== false && visited.indexOf(fill) === -1) {
    		if (!isFinite(fill)) {
    			return fill;
    		}

    		target = sources[fill];
    		if (!target) {
    			return false;
    		}

    		if (target.visible) {
    			return fill;
    		}

    		visited.push(fill);
    		fill = target.fill;
    	}

    	return false;
    }

    function createMapper(source) {
    	var fill = source.fill;
    	var type = 'dataset';

    	if (fill === false) {
    		return null;
    	}

    	if (!isFinite(fill)) {
    		type = 'boundary';
    	}

    	return mappers[type](source);
    }

    function isDrawable(point) {
    	return point && !point.skip;
    }

    function drawArea(ctx, curve0, curve1, len0, len1) {
    	var i;

    	if (!len0 || !len1) {
    		return;
    	}

    	// building first area curve (normal)
    	ctx.moveTo(curve0[0].x, curve0[0].y);
    	for (i = 1; i < len0; ++i) {
    		helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
    	}

    	// joining the two area curves
    	ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);

    	// building opposite area curve (reverse)
    	for (i = len1 - 1; i > 0; --i) {
    		helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
    	}
    }

    function doFill(ctx, points, mapper, view, color, loop) {
    	var count = points.length;
    	var span = view.spanGaps;
    	var curve0 = [];
    	var curve1 = [];
    	var len0 = 0;
    	var len1 = 0;
    	var i, ilen, index, p0, p1, d0, d1;

    	ctx.beginPath();

    	for (i = 0, ilen = (count + !!loop); i < ilen; ++i) {
    		index = i % count;
    		p0 = points[index]._view;
    		p1 = mapper(p0, index, view);
    		d0 = isDrawable(p0);
    		d1 = isDrawable(p1);

    		if (d0 && d1) {
    			len0 = curve0.push(p0);
    			len1 = curve1.push(p1);
    		} else if (len0 && len1) {
    			if (!span) {
    				drawArea(ctx, curve0, curve1, len0, len1);
    				len0 = len1 = 0;
    				curve0 = [];
    				curve1 = [];
    			} else {
    				if (d0) {
    					curve0.push(p0);
    				}
    				if (d1) {
    					curve1.push(p1);
    				}
    			}
    		}
    	}

    	drawArea(ctx, curve0, curve1, len0, len1);

    	ctx.closePath();
    	ctx.fillStyle = color;
    	ctx.fill();
    }

    var plugin_filler = {
    	id: 'filler',

    	afterDatasetsUpdate: function(chart, options) {
    		var count = (chart.data.datasets || []).length;
    		var propagate = options.propagate;
    		var sources = [];
    		var meta, i, el, source;

    		for (i = 0; i < count; ++i) {
    			meta = chart.getDatasetMeta(i);
    			el = meta.dataset;
    			source = null;

    			if (el && el._model && el instanceof elements.Line) {
    				source = {
    					visible: chart.isDatasetVisible(i),
    					fill: decodeFill(el, i, count),
    					chart: chart,
    					el: el
    				};
    			}

    			meta.$filler = source;
    			sources.push(source);
    		}

    		for (i = 0; i < count; ++i) {
    			source = sources[i];
    			if (!source) {
    				continue;
    			}

    			source.fill = resolveTarget(sources, i, propagate);
    			source.boundary = computeBoundary(source);
    			source.mapper = createMapper(source);
    		}
    	},

    	beforeDatasetDraw: function(chart, args) {
    		var meta = args.meta.$filler;
    		if (!meta) {
    			return;
    		}

    		var ctx = chart.ctx;
    		var el = meta.el;
    		var view = el._view;
    		var points = el._children || [];
    		var mapper = meta.mapper;
    		var color = view.backgroundColor || core_defaults.global.defaultColor;

    		if (mapper && color && points.length) {
    			helpers$1.canvas.clipArea(ctx, chart.chartArea);
    			doFill(ctx, points, mapper, view, color, el._loop);
    			helpers$1.canvas.unclipArea(ctx);
    		}
    	}
    };

    var noop$1 = helpers$1.noop;
    var valueOrDefault$d = helpers$1.valueOrDefault;

    core_defaults._set('global', {
    	legend: {
    		display: true,
    		position: 'top',
    		fullWidth: true,
    		reverse: false,
    		weight: 1000,

    		// a callback that will handle
    		onClick: function(e, legendItem) {
    			var index = legendItem.datasetIndex;
    			var ci = this.chart;
    			var meta = ci.getDatasetMeta(index);

    			// See controller.isDatasetVisible comment
    			meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;

    			// We hid a dataset ... rerender the chart
    			ci.update();
    		},

    		onHover: null,
    		onLeave: null,

    		labels: {
    			boxWidth: 40,
    			padding: 10,
    			// Generates labels shown in the legend
    			// Valid properties to return:
    			// text : text to display
    			// fillStyle : fill of coloured box
    			// strokeStyle: stroke of coloured box
    			// hidden : if this legend item refers to a hidden item
    			// lineCap : cap style for line
    			// lineDash
    			// lineDashOffset :
    			// lineJoin :
    			// lineWidth :
    			generateLabels: function(chart) {
    				var data = chart.data;
    				return helpers$1.isArray(data.datasets) ? data.datasets.map(function(dataset, i) {
    					return {
    						text: dataset.label,
    						fillStyle: (!helpers$1.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0]),
    						hidden: !chart.isDatasetVisible(i),
    						lineCap: dataset.borderCapStyle,
    						lineDash: dataset.borderDash,
    						lineDashOffset: dataset.borderDashOffset,
    						lineJoin: dataset.borderJoinStyle,
    						lineWidth: dataset.borderWidth,
    						strokeStyle: dataset.borderColor,
    						pointStyle: dataset.pointStyle,

    						// Below is extra data used for toggling the datasets
    						datasetIndex: i
    					};
    				}, this) : [];
    			}
    		}
    	},

    	legendCallback: function(chart) {
    		var text = [];
    		text.push('<ul class="' + chart.id + '-legend">');
    		for (var i = 0; i < chart.data.datasets.length; i++) {
    			text.push('<li><span style="background-color:' + chart.data.datasets[i].backgroundColor + '"></span>');
    			if (chart.data.datasets[i].label) {
    				text.push(chart.data.datasets[i].label);
    			}
    			text.push('</li>');
    		}
    		text.push('</ul>');
    		return text.join('');
    	}
    });

    /**
     * Helper function to get the box width based on the usePointStyle option
     * @param {object} labelopts - the label options on the legend
     * @param {number} fontSize - the label font size
     * @return {number} width of the color box area
     */
    function getBoxWidth(labelOpts, fontSize) {
    	return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?
    		fontSize :
    		labelOpts.boxWidth;
    }

    /**
     * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
     */
    var Legend = core_element.extend({

    	initialize: function(config) {
    		helpers$1.extend(this, config);

    		// Contains hit boxes for each dataset (in dataset order)
    		this.legendHitBoxes = [];

    		/**
     		 * @private
     		 */
    		this._hoveredItem = null;

    		// Are we in doughnut mode which has a different data type
    		this.doughnutMode = false;
    	},

    	// These methods are ordered by lifecycle. Utilities then follow.
    	// Any function defined here is inherited by all legend types.
    	// Any function can be extended by the legend type

    	beforeUpdate: noop$1,
    	update: function(maxWidth, maxHeight, margins) {
    		var me = this;

    		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
    		me.beforeUpdate();

    		// Absorb the master measurements
    		me.maxWidth = maxWidth;
    		me.maxHeight = maxHeight;
    		me.margins = margins;

    		// Dimensions
    		me.beforeSetDimensions();
    		me.setDimensions();
    		me.afterSetDimensions();
    		// Labels
    		me.beforeBuildLabels();
    		me.buildLabels();
    		me.afterBuildLabels();

    		// Fit
    		me.beforeFit();
    		me.fit();
    		me.afterFit();
    		//
    		me.afterUpdate();

    		return me.minSize;
    	},
    	afterUpdate: noop$1,

    	//

    	beforeSetDimensions: noop$1,
    	setDimensions: function() {
    		var me = this;
    		// Set the unconstrained dimension before label rotation
    		if (me.isHorizontal()) {
    			// Reset position before calculating rotation
    			me.width = me.maxWidth;
    			me.left = 0;
    			me.right = me.width;
    		} else {
    			me.height = me.maxHeight;

    			// Reset position before calculating rotation
    			me.top = 0;
    			me.bottom = me.height;
    		}

    		// Reset padding
    		me.paddingLeft = 0;
    		me.paddingTop = 0;
    		me.paddingRight = 0;
    		me.paddingBottom = 0;

    		// Reset minSize
    		me.minSize = {
    			width: 0,
    			height: 0
    		};
    	},
    	afterSetDimensions: noop$1,

    	//

    	beforeBuildLabels: noop$1,
    	buildLabels: function() {
    		var me = this;
    		var labelOpts = me.options.labels || {};
    		var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];

    		if (labelOpts.filter) {
    			legendItems = legendItems.filter(function(item) {
    				return labelOpts.filter(item, me.chart.data);
    			});
    		}

    		if (me.options.reverse) {
    			legendItems.reverse();
    		}

    		me.legendItems = legendItems;
    	},
    	afterBuildLabels: noop$1,

    	//

    	beforeFit: noop$1,
    	fit: function() {
    		var me = this;
    		var opts = me.options;
    		var labelOpts = opts.labels;
    		var display = opts.display;

    		var ctx = me.ctx;

    		var labelFont = helpers$1.options._parseFont(labelOpts);
    		var fontSize = labelFont.size;

    		// Reset hit boxes
    		var hitboxes = me.legendHitBoxes = [];

    		var minSize = me.minSize;
    		var isHorizontal = me.isHorizontal();

    		if (isHorizontal) {
    			minSize.width = me.maxWidth; // fill all the width
    			minSize.height = display ? 10 : 0;
    		} else {
    			minSize.width = display ? 10 : 0;
    			minSize.height = me.maxHeight; // fill all the height
    		}

    		// Increase sizes here
    		if (display) {
    			ctx.font = labelFont.string;

    			if (isHorizontal) {
    				// Labels

    				// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
    				var lineWidths = me.lineWidths = [0];
    				var totalHeight = 0;

    				ctx.textAlign = 'left';
    				ctx.textBaseline = 'top';

    				helpers$1.each(me.legendItems, function(legendItem, i) {
    					var boxWidth = getBoxWidth(labelOpts, fontSize);
    					var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

    					if (i === 0 || lineWidths[lineWidths.length - 1] + width + labelOpts.padding > minSize.width) {
    						totalHeight += fontSize + labelOpts.padding;
    						lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = labelOpts.padding;
    					}

    					// Store the hitbox width and height here. Final position will be updated in `draw`
    					hitboxes[i] = {
    						left: 0,
    						top: 0,
    						width: width,
    						height: fontSize
    					};

    					lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
    				});

    				minSize.height += totalHeight;

    			} else {
    				var vPadding = labelOpts.padding;
    				var columnWidths = me.columnWidths = [];
    				var totalWidth = labelOpts.padding;
    				var currentColWidth = 0;
    				var currentColHeight = 0;
    				var itemHeight = fontSize + vPadding;

    				helpers$1.each(me.legendItems, function(legendItem, i) {
    					var boxWidth = getBoxWidth(labelOpts, fontSize);
    					var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

    					// If too tall, go to new column
    					if (i > 0 && currentColHeight + itemHeight > minSize.height - vPadding) {
    						totalWidth += currentColWidth + labelOpts.padding;
    						columnWidths.push(currentColWidth); // previous column width

    						currentColWidth = 0;
    						currentColHeight = 0;
    					}

    					// Get max width
    					currentColWidth = Math.max(currentColWidth, itemWidth);
    					currentColHeight += itemHeight;

    					// Store the hitbox width and height here. Final position will be updated in `draw`
    					hitboxes[i] = {
    						left: 0,
    						top: 0,
    						width: itemWidth,
    						height: fontSize
    					};
    				});

    				totalWidth += currentColWidth;
    				columnWidths.push(currentColWidth);
    				minSize.width += totalWidth;
    			}
    		}

    		me.width = minSize.width;
    		me.height = minSize.height;
    	},
    	afterFit: noop$1,

    	// Shared Methods
    	isHorizontal: function() {
    		return this.options.position === 'top' || this.options.position === 'bottom';
    	},

    	// Actually draw the legend on the canvas
    	draw: function() {
    		var me = this;
    		var opts = me.options;
    		var labelOpts = opts.labels;
    		var globalDefaults = core_defaults.global;
    		var defaultColor = globalDefaults.defaultColor;
    		var lineDefault = globalDefaults.elements.line;
    		var legendWidth = me.width;
    		var lineWidths = me.lineWidths;

    		if (opts.display) {
    			var ctx = me.ctx;
    			var fontColor = valueOrDefault$d(labelOpts.fontColor, globalDefaults.defaultFontColor);
    			var labelFont = helpers$1.options._parseFont(labelOpts);
    			var fontSize = labelFont.size;
    			var cursor;

    			// Canvas setup
    			ctx.textAlign = 'left';
    			ctx.textBaseline = 'middle';
    			ctx.lineWidth = 0.5;
    			ctx.strokeStyle = fontColor; // for strikethrough effect
    			ctx.fillStyle = fontColor; // render in correct colour
    			ctx.font = labelFont.string;

    			var boxWidth = getBoxWidth(labelOpts, fontSize);
    			var hitboxes = me.legendHitBoxes;

    			// current position
    			var drawLegendBox = function(x, y, legendItem) {
    				if (isNaN(boxWidth) || boxWidth <= 0) {
    					return;
    				}

    				// Set the ctx for the box
    				ctx.save();

    				var lineWidth = valueOrDefault$d(legendItem.lineWidth, lineDefault.borderWidth);
    				ctx.fillStyle = valueOrDefault$d(legendItem.fillStyle, defaultColor);
    				ctx.lineCap = valueOrDefault$d(legendItem.lineCap, lineDefault.borderCapStyle);
    				ctx.lineDashOffset = valueOrDefault$d(legendItem.lineDashOffset, lineDefault.borderDashOffset);
    				ctx.lineJoin = valueOrDefault$d(legendItem.lineJoin, lineDefault.borderJoinStyle);
    				ctx.lineWidth = lineWidth;
    				ctx.strokeStyle = valueOrDefault$d(legendItem.strokeStyle, defaultColor);

    				if (ctx.setLineDash) {
    					// IE 9 and 10 do not support line dash
    					ctx.setLineDash(valueOrDefault$d(legendItem.lineDash, lineDefault.borderDash));
    				}

    				if (opts.labels && opts.labels.usePointStyle) {
    					// Recalculate x and y for drawPoint() because its expecting
    					// x and y to be center of figure (instead of top left)
    					var radius = boxWidth * Math.SQRT2 / 2;
    					var centerX = x + boxWidth / 2;
    					var centerY = y + fontSize / 2;

    					// Draw pointStyle as legend symbol
    					helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
    				} else {
    					// Draw box as legend symbol
    					if (lineWidth !== 0) {
    						ctx.strokeRect(x, y, boxWidth, fontSize);
    					}
    					ctx.fillRect(x, y, boxWidth, fontSize);
    				}

    				ctx.restore();
    			};
    			var fillText = function(x, y, legendItem, textWidth) {
    				var halfFontSize = fontSize / 2;
    				var xLeft = boxWidth + halfFontSize + x;
    				var yMiddle = y + halfFontSize;

    				ctx.fillText(legendItem.text, xLeft, yMiddle);

    				if (legendItem.hidden) {
    					// Strikethrough the text if hidden
    					ctx.beginPath();
    					ctx.lineWidth = 2;
    					ctx.moveTo(xLeft, yMiddle);
    					ctx.lineTo(xLeft + textWidth, yMiddle);
    					ctx.stroke();
    				}
    			};

    			// Horizontal
    			var isHorizontal = me.isHorizontal();
    			if (isHorizontal) {
    				cursor = {
    					x: me.left + ((legendWidth - lineWidths[0]) / 2) + labelOpts.padding,
    					y: me.top + labelOpts.padding,
    					line: 0
    				};
    			} else {
    				cursor = {
    					x: me.left + labelOpts.padding,
    					y: me.top + labelOpts.padding,
    					line: 0
    				};
    			}

    			var itemHeight = fontSize + labelOpts.padding;
    			helpers$1.each(me.legendItems, function(legendItem, i) {
    				var textWidth = ctx.measureText(legendItem.text).width;
    				var width = boxWidth + (fontSize / 2) + textWidth;
    				var x = cursor.x;
    				var y = cursor.y;

    				// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)
    				// instead of me.right and me.bottom because me.width and me.height
    				// may have been changed since me.minSize was calculated
    				if (isHorizontal) {
    					if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
    						y = cursor.y += itemHeight;
    						cursor.line++;
    						x = cursor.x = me.left + ((legendWidth - lineWidths[cursor.line]) / 2) + labelOpts.padding;
    					}
    				} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {
    					x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
    					y = cursor.y = me.top + labelOpts.padding;
    					cursor.line++;
    				}

    				drawLegendBox(x, y, legendItem);

    				hitboxes[i].left = x;
    				hitboxes[i].top = y;

    				// Fill the actual label
    				fillText(x, y, legendItem, textWidth);

    				if (isHorizontal) {
    					cursor.x += width + labelOpts.padding;
    				} else {
    					cursor.y += itemHeight;
    				}

    			});
    		}
    	},

    	/**
    	 * @private
    	 */
    	_getLegendItemAt: function(x, y) {
    		var me = this;
    		var i, hitBox, lh;

    		if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
    			// See if we are touching one of the dataset boxes
    			lh = me.legendHitBoxes;
    			for (i = 0; i < lh.length; ++i) {
    				hitBox = lh[i];

    				if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
    					// Touching an element
    					return me.legendItems[i];
    				}
    			}
    		}

    		return null;
    	},

    	/**
    	 * Handle an event
    	 * @private
    	 * @param {IEvent} event - The event to handle
    	 */
    	handleEvent: function(e) {
    		var me = this;
    		var opts = me.options;
    		var type = e.type === 'mouseup' ? 'click' : e.type;
    		var hoveredItem;

    		if (type === 'mousemove') {
    			if (!opts.onHover && !opts.onLeave) {
    				return;
    			}
    		} else if (type === 'click') {
    			if (!opts.onClick) {
    				return;
    			}
    		} else {
    			return;
    		}

    		// Chart event already has relative position in it
    		hoveredItem = me._getLegendItemAt(e.x, e.y);

    		if (type === 'click') {
    			if (hoveredItem && opts.onClick) {
    				// use e.native for backwards compatibility
    				opts.onClick.call(me, e.native, hoveredItem);
    			}
    		} else {
    			if (opts.onLeave && hoveredItem !== me._hoveredItem) {
    				if (me._hoveredItem) {
    					opts.onLeave.call(me, e.native, me._hoveredItem);
    				}
    				me._hoveredItem = hoveredItem;
    			}

    			if (opts.onHover && hoveredItem) {
    				// use e.native for backwards compatibility
    				opts.onHover.call(me, e.native, hoveredItem);
    			}
    		}
    	}
    });

    function createNewLegendAndAttach(chart, legendOpts) {
    	var legend = new Legend({
    		ctx: chart.ctx,
    		options: legendOpts,
    		chart: chart
    	});

    	core_layouts.configure(chart, legend, legendOpts);
    	core_layouts.addBox(chart, legend);
    	chart.legend = legend;
    }

    var plugin_legend = {
    	id: 'legend',

    	/**
    	 * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
    	 * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
    	 * the plugin, which one will be re-exposed in the chart.js file.
    	 * https://github.com/chartjs/Chart.js/pull/2640
    	 * @private
    	 */
    	_element: Legend,

    	beforeInit: function(chart) {
    		var legendOpts = chart.options.legend;

    		if (legendOpts) {
    			createNewLegendAndAttach(chart, legendOpts);
    		}
    	},

    	beforeUpdate: function(chart) {
    		var legendOpts = chart.options.legend;
    		var legend = chart.legend;

    		if (legendOpts) {
    			helpers$1.mergeIf(legendOpts, core_defaults.global.legend);

    			if (legend) {
    				core_layouts.configure(chart, legend, legendOpts);
    				legend.options = legendOpts;
    			} else {
    				createNewLegendAndAttach(chart, legendOpts);
    			}
    		} else if (legend) {
    			core_layouts.removeBox(chart, legend);
    			delete chart.legend;
    		}
    	},

    	afterEvent: function(chart, e) {
    		var legend = chart.legend;
    		if (legend) {
    			legend.handleEvent(e);
    		}
    	}
    };

    var noop$2 = helpers$1.noop;

    core_defaults._set('global', {
    	title: {
    		display: false,
    		fontStyle: 'bold',
    		fullWidth: true,
    		padding: 10,
    		position: 'top',
    		text: '',
    		weight: 2000         // by default greater than legend (1000) to be above
    	}
    });

    /**
     * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
     */
    var Title = core_element.extend({
    	initialize: function(config) {
    		var me = this;
    		helpers$1.extend(me, config);

    		// Contains hit boxes for each dataset (in dataset order)
    		me.legendHitBoxes = [];
    	},

    	// These methods are ordered by lifecycle. Utilities then follow.

    	beforeUpdate: noop$2,
    	update: function(maxWidth, maxHeight, margins) {
    		var me = this;

    		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
    		me.beforeUpdate();

    		// Absorb the master measurements
    		me.maxWidth = maxWidth;
    		me.maxHeight = maxHeight;
    		me.margins = margins;

    		// Dimensions
    		me.beforeSetDimensions();
    		me.setDimensions();
    		me.afterSetDimensions();
    		// Labels
    		me.beforeBuildLabels();
    		me.buildLabels();
    		me.afterBuildLabels();

    		// Fit
    		me.beforeFit();
    		me.fit();
    		me.afterFit();
    		//
    		me.afterUpdate();

    		return me.minSize;

    	},
    	afterUpdate: noop$2,

    	//

    	beforeSetDimensions: noop$2,
    	setDimensions: function() {
    		var me = this;
    		// Set the unconstrained dimension before label rotation
    		if (me.isHorizontal()) {
    			// Reset position before calculating rotation
    			me.width = me.maxWidth;
    			me.left = 0;
    			me.right = me.width;
    		} else {
    			me.height = me.maxHeight;

    			// Reset position before calculating rotation
    			me.top = 0;
    			me.bottom = me.height;
    		}

    		// Reset padding
    		me.paddingLeft = 0;
    		me.paddingTop = 0;
    		me.paddingRight = 0;
    		me.paddingBottom = 0;

    		// Reset minSize
    		me.minSize = {
    			width: 0,
    			height: 0
    		};
    	},
    	afterSetDimensions: noop$2,

    	//

    	beforeBuildLabels: noop$2,
    	buildLabels: noop$2,
    	afterBuildLabels: noop$2,

    	//

    	beforeFit: noop$2,
    	fit: function() {
    		var me = this;
    		var opts = me.options;
    		var display = opts.display;
    		var minSize = me.minSize;
    		var lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;
    		var fontOpts = helpers$1.options._parseFont(opts);
    		var textSize = display ? (lineCount * fontOpts.lineHeight) + (opts.padding * 2) : 0;

    		if (me.isHorizontal()) {
    			minSize.width = me.maxWidth; // fill all the width
    			minSize.height = textSize;
    		} else {
    			minSize.width = textSize;
    			minSize.height = me.maxHeight; // fill all the height
    		}

    		me.width = minSize.width;
    		me.height = minSize.height;

    	},
    	afterFit: noop$2,

    	// Shared Methods
    	isHorizontal: function() {
    		var pos = this.options.position;
    		return pos === 'top' || pos === 'bottom';
    	},

    	// Actually draw the title block on the canvas
    	draw: function() {
    		var me = this;
    		var ctx = me.ctx;
    		var opts = me.options;

    		if (opts.display) {
    			var fontOpts = helpers$1.options._parseFont(opts);
    			var lineHeight = fontOpts.lineHeight;
    			var offset = lineHeight / 2 + opts.padding;
    			var rotation = 0;
    			var top = me.top;
    			var left = me.left;
    			var bottom = me.bottom;
    			var right = me.right;
    			var maxWidth, titleX, titleY;

    			ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour
    			ctx.font = fontOpts.string;

    			// Horizontal
    			if (me.isHorizontal()) {
    				titleX = left + ((right - left) / 2); // midpoint of the width
    				titleY = top + offset;
    				maxWidth = right - left;
    			} else {
    				titleX = opts.position === 'left' ? left + offset : right - offset;
    				titleY = top + ((bottom - top) / 2);
    				maxWidth = bottom - top;
    				rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
    			}

    			ctx.save();
    			ctx.translate(titleX, titleY);
    			ctx.rotate(rotation);
    			ctx.textAlign = 'center';
    			ctx.textBaseline = 'middle';

    			var text = opts.text;
    			if (helpers$1.isArray(text)) {
    				var y = 0;
    				for (var i = 0; i < text.length; ++i) {
    					ctx.fillText(text[i], 0, y, maxWidth);
    					y += lineHeight;
    				}
    			} else {
    				ctx.fillText(text, 0, 0, maxWidth);
    			}

    			ctx.restore();
    		}
    	}
    });

    function createNewTitleBlockAndAttach(chart, titleOpts) {
    	var title = new Title({
    		ctx: chart.ctx,
    		options: titleOpts,
    		chart: chart
    	});

    	core_layouts.configure(chart, title, titleOpts);
    	core_layouts.addBox(chart, title);
    	chart.titleBlock = title;
    }

    var plugin_title = {
    	id: 'title',

    	/**
    	 * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
    	 * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
    	 * the plugin, which one will be re-exposed in the chart.js file.
    	 * https://github.com/chartjs/Chart.js/pull/2640
    	 * @private
    	 */
    	_element: Title,

    	beforeInit: function(chart) {
    		var titleOpts = chart.options.title;

    		if (titleOpts) {
    			createNewTitleBlockAndAttach(chart, titleOpts);
    		}
    	},

    	beforeUpdate: function(chart) {
    		var titleOpts = chart.options.title;
    		var titleBlock = chart.titleBlock;

    		if (titleOpts) {
    			helpers$1.mergeIf(titleOpts, core_defaults.global.title);

    			if (titleBlock) {
    				core_layouts.configure(chart, titleBlock, titleOpts);
    				titleBlock.options = titleOpts;
    			} else {
    				createNewTitleBlockAndAttach(chart, titleOpts);
    			}
    		} else if (titleBlock) {
    			core_layouts.removeBox(chart, titleBlock);
    			delete chart.titleBlock;
    		}
    	}
    };

    var plugins = {};
    var filler = plugin_filler;
    var legend = plugin_legend;
    var title = plugin_title;
    plugins.filler = filler;
    plugins.legend = legend;
    plugins.title = title;

    /**
     * @namespace Chart
     */


    core_controller.helpers = helpers$1;

    // @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!
    core_helpers();

    core_controller._adapters = core_adapters;
    core_controller.Animation = core_animation;
    core_controller.animationService = core_animations;
    core_controller.controllers = controllers;
    core_controller.DatasetController = core_datasetController;
    core_controller.defaults = core_defaults;
    core_controller.Element = core_element;
    core_controller.elements = elements;
    core_controller.Interaction = core_interaction;
    core_controller.layouts = core_layouts;
    core_controller.platform = platform;
    core_controller.plugins = core_plugins;
    core_controller.Scale = core_scale;
    core_controller.scaleService = core_scaleService;
    core_controller.Ticks = core_ticks;
    core_controller.Tooltip = core_tooltip;

    // Register built-in scales

    core_controller.helpers.each(scales, function(scale, type) {
    	core_controller.scaleService.registerScaleType(type, scale, scale._defaults);
    });

    // Load to register built-in adapters (as side effects)


    // Loading built-in plugins

    for (var k in plugins) {
    	if (plugins.hasOwnProperty(k)) {
    		core_controller.plugins.register(plugins[k]);
    	}
    }

    core_controller.platform.initialize();

    var src = core_controller;
    if (typeof window !== 'undefined') {
    	window.Chart = core_controller;
    }

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, not available anymore
     * @namespace Chart.Chart
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     * @private
     */
    core_controller.Chart = core_controller;

    /**
     * Provided for backward compatibility, not available anymore
     * @namespace Chart.Legend
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */
    core_controller.Legend = plugins.legend._element;

    /**
     * Provided for backward compatibility, not available anymore
     * @namespace Chart.Title
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */
    core_controller.Title = plugins.title._element;

    /**
     * Provided for backward compatibility, use Chart.plugins instead
     * @namespace Chart.pluginService
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */
    core_controller.pluginService = core_controller.plugins;

    /**
     * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
     * effect, instead simply create/register plugins via plain JavaScript objects.
     * @interface Chart.PluginBase
     * @deprecated since version 2.5.0
     * @todo remove at version 3
     * @private
     */
    core_controller.PluginBase = core_controller.Element.extend({});

    /**
     * Provided for backward compatibility, use Chart.helpers.canvas instead.
     * @namespace Chart.canvasHelpers
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     * @private
     */
    core_controller.canvasHelpers = core_controller.helpers.canvas;

    /**
     * Provided for backward compatibility, use Chart.layouts instead.
     * @namespace Chart.layoutService
     * @deprecated since version 2.7.3
     * @todo remove at version 3
     * @private
     */
    core_controller.layoutService = core_controller.layouts;

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart.LinearScaleBase
     * @deprecated since version 2.8
     * @todo remove at version 3
     * @private
     */
    core_controller.LinearScaleBase = scale_linearbase;

    /**
     * Provided for backward compatibility, instead we should create a new Chart
     * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     */
    core_controller.helpers.each(
    	[
    		'Bar',
    		'Bubble',
    		'Doughnut',
    		'Line',
    		'PolarArea',
    		'Radar',
    		'Scatter'
    	],
    	function(klass) {
    		core_controller[klass] = function(ctx, cfg) {
    			return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {
    				type: klass.charAt(0).toLowerCase() + klass.slice(1)
    			}));
    		};
    	}
    );

    return src;

    })));
    });

    /* src/Components/Shared/Chart.svelte generated by Svelte v3.12.1 */

    const file$a = "src/Components/Shared/Chart.svelte";

    function create_fragment$b(ctx) {
    	var canvas;

    	const block = {
    		c: function create() {
    			canvas = element("canvas");
    			attr_dev(canvas, "id", "tChart");
    			attr_dev(canvas, "width", "400");
    			attr_dev(canvas, "height", "400");
    			add_location(canvas, file$a, 81, 0, 2459);
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, canvas, anchor);
    		},

    		p: noop,
    		i: noop,
    		o: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(canvas);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$b.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	

        let { xValues, yValues } = $$props;

        function createChart() {
            let ctx = document.getElementById('tChart').getContext('2d');

            let data = {
                labels: xValues,
                datasets: [{
                    label: "Bidding History",
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)',
                        'rgba(255, 0, 0)',
                        'rgba(0, 255, 0)',
                        'rgba(0, 0, 255)',
                        'rgba(192, 192, 192)',
                        'rgba(255, 255, 0)',
                        'rgba(255, 0, 255)'
                    ],
                    borderColor: [
                        'rgba(255,99,132,1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)',
                        'rgba(255, 0, 0)',
                        'rgba(0, 255, 0)',
                        'rgba(0, 0, 255)',
                        'rgba(192, 192, 192)',
                        'rgba(255, 255, 0)',
                        'rgba(255, 0, 255)'
                    ],
                    borderWidth: 1,
                    data: yValues
                }]
            };

            let options = {
                maintainAspectRatio: false,
                scales: {
                    yAxes: [{
                        ticks: {
                            min: 0,
                            beginAtZero: true
                        },
                        gridLines: {
                            display: true,
                            color: "rgba(255,99,164,0.2)"
                        }
                    }],
                    xAxes: [{
                        ticks: {
                            min: 0,
                            beginAtZero: true
                        },
                        gridLines: {
                            display: false
                        }
                    }]
                }
            };

            var tChart = new Chart(ctx, {
                options: options,
                data: data,
                type: xValues.length == 1 ? 'bar' : 'line'
            });
        }

        onMount(createChart);

    	const writable_props = ['xValues', 'yValues'];
    	Object.keys($$props).forEach(key => {
    		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Chart> was created with unknown prop '${key}'`);
    	});

    	$$self.$set = $$props => {
    		if ('xValues' in $$props) $$invalidate('xValues', xValues = $$props.xValues);
    		if ('yValues' in $$props) $$invalidate('yValues', yValues = $$props.yValues);
    	};

    	$$self.$capture_state = () => {
    		return { xValues, yValues };
    	};

    	$$self.$inject_state = $$props => {
    		if ('xValues' in $$props) $$invalidate('xValues', xValues = $$props.xValues);
    		if ('yValues' in $$props) $$invalidate('yValues', yValues = $$props.yValues);
    	};

    	return { xValues, yValues };
    }

    class Chart_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$b, safe_not_equal, ["xValues", "yValues"]);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Chart_1", options, id: create_fragment$b.name });

    		const { ctx } = this.$$;
    		const props = options.props || {};
    		if (ctx.xValues === undefined && !('xValues' in props)) {
    			console.warn("<Chart> was created without expected prop 'xValues'");
    		}
    		if (ctx.yValues === undefined && !('yValues' in props)) {
    			console.warn("<Chart> was created without expected prop 'yValues'");
    		}
    	}

    	get xValues() {
    		throw new Error("<Chart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xValues(value) {
    		throw new Error("<Chart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yValues() {
    		throw new Error("<Chart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yValues(value) {
    		throw new Error("<Chart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/Shared/Template.svelte generated by Svelte v3.12.1 */
    const { console: console_1 } = globals;

    const file$b = "src/Components/Shared/Template.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.auto = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.comment = list[i];
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.auto = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.image = list[i];
    	return child_ctx;
    }

    // (348:0) {#if showMsg}
    function create_if_block_38(ctx) {
    	var div_1, div_1_intro, div_1_outro, current;

    	var message_1 = new StatusMsg({
    		props: {
    		heading: ctx.heading,
    		message: ctx.message,
    		status: ctx.statusColor
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			div_1 = element("div");
    			message_1.$$.fragment.c();
    			attr_dev(div_1, "id", "status");
    			attr_dev(div_1, "class", "container-fluid svelte-1k6i1cn");
    			add_location(div_1, file$b, 348, 4, 9323);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div_1, anchor);
    			mount_component(message_1, div_1, null);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var message_1_changes = {};
    			if (changed.heading) message_1_changes.heading = ctx.heading;
    			if (changed.message) message_1_changes.message = ctx.message;
    			if (changed.statusColor) message_1_changes.status = ctx.statusColor;
    			message_1.$set(message_1_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(message_1.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_1_outro) div_1_outro.end(1);
    				if (!div_1_intro) div_1_intro = create_in_transition(div_1, fly, { x:200, duration:500 });
    				div_1_intro.start();
    			});

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(message_1.$$.fragment, local);
    			if (div_1_intro) div_1_intro.invalidate();

    			div_1_outro = create_out_transition(div_1, fly, { x:200, duration:500 });

    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div_1);
    			}

    			destroy_component(message_1);

    			if (detaching) {
    				if (div_1_outro) div_1_outro.end();
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_38.name, type: "if", source: "(348:0) {#if showMsg}", ctx });
    	return block;
    }

    // (431:0) {:else}
    function create_else_block_17(ctx) {
    	var table, tr0, td0, div0, span0, b0, t0, t1, t2, tr1, td1, div1, t3, td2, span1, t5, span2, b1, t6, span3, t8, t9, span4, t11, span5, b2, t12, t13, td3, span6, t15, t16, span7, t18, t19, span8, t21, span9, b3, t22, t23, tr2, td4, button0, i0, t24, t25, button1, i1, t26, t27, dispose;

    	var if_block0 = (ctx.year != null) && create_if_block_37(ctx);

    	function select_block_type_3(changed, ctx) {
    		if (ctx.url == "https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg") return create_if_block_36;
    		return create_else_block_22;
    	}

    	var current_block_type = select_block_type_3(null, ctx);
    	var if_block1 = current_block_type(ctx);

    	function select_block_type_4(changed, ctx) {
    		if (ctx.vin == null || ctx.vin == '') return create_if_block_35;
    		return create_else_block_21;
    	}

    	var current_block_type_1 = select_block_type_4(null, ctx);
    	var if_block2 = current_block_type_1(ctx);

    	function select_block_type_5(changed, ctx) {
    		if (ctx.cyl == null || ctx.cyl == '' || ctx.cyl == 'null') return create_if_block_34;
    		return create_else_block_20;
    	}

    	var current_block_type_2 = select_block_type_5(null, ctx);
    	var if_block3 = current_block_type_2(ctx);

    	function select_block_type_6(changed, ctx) {
    		if (ctx.price != null) return create_if_block_33;
    		return create_else_block_19;
    	}

    	var current_block_type_3 = select_block_type_6(null, ctx);
    	var if_block4 = current_block_type_3(ctx);

    	function select_block_type_7(changed, ctx) {
    		if (ctx.mileage != null) return create_if_block_32;
    		return create_else_block_18;
    	}

    	var current_block_type_4 = select_block_type_7(null, ctx);
    	var if_block5 = current_block_type_4(ctx);

    	function select_block_type_8(changed, ctx) {
    		if (ctx.$tabIndex != 2) return create_if_block_29;
    		if (ctx.$garageIndex == 0) return create_if_block_30;
    		if (ctx.$garageIndex == 2) return create_if_block_31;
    	}

    	var current_block_type_5 = select_block_type_8(null, ctx);
    	var if_block6 = current_block_type_5 && current_block_type_5(ctx);

    	const block = {
    		c: function create() {
    			table = element("table");
    			tr0 = element("tr");
    			td0 = element("td");
    			div0 = element("div");
    			span0 = element("span");
    			b0 = element("b");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			t1 = text(ctx.model);
    			t2 = space();
    			tr1 = element("tr");
    			td1 = element("td");
    			div1 = element("div");
    			if_block1.c();
    			t3 = space();
    			td2 = element("td");
    			span1 = element("span");
    			span1.textContent = "VIN";
    			t5 = space();
    			span2 = element("span");
    			b1 = element("b");
    			if_block2.c();
    			t6 = space();
    			span3 = element("span");
    			span3.textContent = "CYL";
    			t8 = space();
    			if_block3.c();
    			t9 = space();
    			span4 = element("span");
    			span4.textContent = "Status";
    			t11 = space();
    			span5 = element("span");
    			b2 = element("b");
    			t12 = text(ctx.status);
    			t13 = space();
    			td3 = element("td");
    			span6 = element("span");
    			span6.textContent = "Final Bid";
    			t15 = space();
    			if_block4.c();
    			t16 = space();
    			span7 = element("span");
    			span7.textContent = "Mileage";
    			t18 = space();
    			if_block5.c();
    			t19 = space();
    			span8 = element("span");
    			span8.textContent = "Date";
    			t21 = space();
    			span9 = element("span");
    			b3 = element("b");
    			t22 = text(ctx.date);
    			t23 = space();
    			tr2 = element("tr");
    			td4 = element("td");
    			button0 = element("button");
    			i0 = element("i");
    			t24 = text(" Compare");
    			t25 = space();
    			button1 = element("button");
    			i1 = element("i");
    			t26 = text(" View Analytics");
    			t27 = space();
    			if (if_block6) if_block6.c();
    			attr_dev(b0, "class", "svelte-1k6i1cn");
    			add_location(b0, file$b, 436, 24, 12910);
    			attr_dev(span0, "class", "svelte-1k6i1cn");
    			add_location(span0, file$b, 435, 20, 12879);
    			attr_dev(div0, "class", "title-inner svelte-1k6i1cn");
    			add_location(div0, file$b, 434, 16, 12832);
    			attr_dev(td0, "colspan", "3");
    			attr_dev(td0, "class", "title svelte-1k6i1cn");
    			add_location(td0, file$b, 433, 12, 12785);
    			attr_dev(tr0, "class", "svelte-1k6i1cn");
    			add_location(tr0, file$b, 432, 8, 12768);
    			attr_dev(div1, "class", "svelte-1k6i1cn");
    			add_location(div1, file$b, 448, 16, 13236);
    			set_style(td1, "width", "40%");
    			attr_dev(td1, "class", "svelte-1k6i1cn");
    			add_location(td1, file$b, 447, 12, 13197);
    			attr_dev(span1, "class", "label svelte-1k6i1cn");
    			add_location(span1, file$b, 457, 16, 13690);
    			attr_dev(b1, "class", "svelte-1k6i1cn");
    			add_location(b1, file$b, 459, 20, 13781);
    			attr_dev(span2, "class", "labelVal svelte-1k6i1cn");
    			add_location(span2, file$b, 458, 16, 13737);
    			attr_dev(span3, "class", "label svelte-1k6i1cn");
    			add_location(span3, file$b, 468, 16, 14042);
    			attr_dev(span4, "class", "label svelte-1k6i1cn");
    			add_location(span4, file$b, 475, 16, 14332);
    			attr_dev(b2, "class", "svelte-1k6i1cn");
    			add_location(b2, file$b, 476, 39, 14405);
    			attr_dev(span5, "class", "labelVal svelte-1k6i1cn");
    			add_location(span5, file$b, 476, 16, 14382);
    			attr_dev(td2, "class", "svelte-1k6i1cn");
    			add_location(td2, file$b, 456, 12, 13669);
    			attr_dev(span6, "class", "label svelte-1k6i1cn");
    			add_location(span6, file$b, 479, 16, 14479);
    			attr_dev(span7, "class", "label svelte-1k6i1cn");
    			add_location(span7, file$b, 486, 16, 14785);
    			attr_dev(span8, "class", "label svelte-1k6i1cn");
    			add_location(span8, file$b, 493, 16, 15060);
    			attr_dev(b3, "class", "svelte-1k6i1cn");
    			add_location(b3, file$b, 494, 39, 15131);
    			attr_dev(span9, "class", "labelVal svelte-1k6i1cn");
    			add_location(span9, file$b, 494, 16, 15108);
    			attr_dev(td3, "class", "svelte-1k6i1cn");
    			add_location(td3, file$b, 478, 12, 14458);
    			attr_dev(tr1, "class", "svelte-1k6i1cn");
    			add_location(tr1, file$b, 446, 8, 13180);
    			attr_dev(i0, "class", "fa fa-balance-scale svelte-1k6i1cn");
    			add_location(i0, file$b, 499, 170, 15396);
    			attr_dev(button0, "id", "compare");
    			attr_dev(button0, "class", "btn btn-light btn-sm svelte-1k6i1cn");
    			set_style(button0, "width", "33.3%");
    			set_style(button0, "float", "left");
    			button0.disabled = ctx.addComapare;
    			add_location(button0, file$b, 499, 16, 15242);
    			attr_dev(i1, "class", "fa fa-area-chart svelte-1k6i1cn");
    			add_location(i1, file$b, 500, 134, 15583);
    			attr_dev(button1, "id", "compare");
    			attr_dev(button1, "class", "btn btn-light btn-sm svelte-1k6i1cn");
    			set_style(button1, "width", "33.3%");
    			add_location(button1, file$b, 500, 16, 15465);
    			attr_dev(td4, "colspan", "3");
    			attr_dev(td4, "class", "svelte-1k6i1cn");
    			add_location(td4, file$b, 498, 12, 15209);
    			attr_dev(tr2, "class", "svelte-1k6i1cn");
    			add_location(tr2, file$b, 497, 8, 15192);
    			attr_dev(table, "class", "tableResults svelte-1k6i1cn");
    			attr_dev(table, "cellpadding", "2");
    			add_location(table, file$b, 431, 4, 12714);

    			dispose = [
    				listen_dev(button0, "click", ctx.click_handler_5),
    				listen_dev(button1, "click", ctx.click_handler_6)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, tr0);
    			append_dev(tr0, td0);
    			append_dev(td0, div0);
    			append_dev(div0, span0);
    			append_dev(span0, b0);
    			if (if_block0) if_block0.m(b0, null);
    			append_dev(b0, t0);
    			append_dev(b0, t1);
    			append_dev(table, t2);
    			append_dev(table, tr1);
    			append_dev(tr1, td1);
    			append_dev(td1, div1);
    			if_block1.m(div1, null);
    			append_dev(tr1, t3);
    			append_dev(tr1, td2);
    			append_dev(td2, span1);
    			append_dev(td2, t5);
    			append_dev(td2, span2);
    			append_dev(span2, b1);
    			if_block2.m(b1, null);
    			append_dev(td2, t6);
    			append_dev(td2, span3);
    			append_dev(td2, t8);
    			if_block3.m(td2, null);
    			append_dev(td2, t9);
    			append_dev(td2, span4);
    			append_dev(td2, t11);
    			append_dev(td2, span5);
    			append_dev(span5, b2);
    			append_dev(b2, t12);
    			append_dev(tr1, t13);
    			append_dev(tr1, td3);
    			append_dev(td3, span6);
    			append_dev(td3, t15);
    			if_block4.m(td3, null);
    			append_dev(td3, t16);
    			append_dev(td3, span7);
    			append_dev(td3, t18);
    			if_block5.m(td3, null);
    			append_dev(td3, t19);
    			append_dev(td3, span8);
    			append_dev(td3, t21);
    			append_dev(td3, span9);
    			append_dev(span9, b3);
    			append_dev(b3, t22);
    			append_dev(table, t23);
    			append_dev(table, tr2);
    			append_dev(tr2, td4);
    			append_dev(td4, button0);
    			append_dev(button0, i0);
    			append_dev(button0, t24);
    			append_dev(td4, t25);
    			append_dev(td4, button1);
    			append_dev(button1, i1);
    			append_dev(button1, t26);
    			append_dev(td4, t27);
    			if (if_block6) if_block6.m(td4, null);
    		},

    		p: function update(changed, ctx) {
    			if (ctx.year != null) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    				} else {
    					if_block0 = create_if_block_37(ctx);
    					if_block0.c();
    					if_block0.m(b0, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (changed.model) {
    				set_data_dev(t1, ctx.model);
    			}

    			if (current_block_type === (current_block_type = select_block_type_3(changed, ctx)) && if_block1) {
    				if_block1.p(changed, ctx);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);
    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div1, null);
    				}
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_4(changed, ctx)) && if_block2) {
    				if_block2.p(changed, ctx);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type_1(ctx);
    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(b1, null);
    				}
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_5(changed, ctx)) && if_block3) {
    				if_block3.p(changed, ctx);
    			} else {
    				if_block3.d(1);
    				if_block3 = current_block_type_2(ctx);
    				if (if_block3) {
    					if_block3.c();
    					if_block3.m(td2, t9);
    				}
    			}

    			if (changed.status) {
    				set_data_dev(t12, ctx.status);
    			}

    			if (current_block_type_3 === (current_block_type_3 = select_block_type_6(changed, ctx)) && if_block4) {
    				if_block4.p(changed, ctx);
    			} else {
    				if_block4.d(1);
    				if_block4 = current_block_type_3(ctx);
    				if (if_block4) {
    					if_block4.c();
    					if_block4.m(td3, t16);
    				}
    			}

    			if (current_block_type_4 === (current_block_type_4 = select_block_type_7(changed, ctx)) && if_block5) {
    				if_block5.p(changed, ctx);
    			} else {
    				if_block5.d(1);
    				if_block5 = current_block_type_4(ctx);
    				if (if_block5) {
    					if_block5.c();
    					if_block5.m(td3, t19);
    				}
    			}

    			if (changed.date) {
    				set_data_dev(t22, ctx.date);
    			}

    			if (changed.addComapare) {
    				prop_dev(button0, "disabled", ctx.addComapare);
    			}

    			if (current_block_type_5 !== (current_block_type_5 = select_block_type_8(changed, ctx))) {
    				if (if_block6) if_block6.d(1);
    				if_block6 = current_block_type_5 && current_block_type_5(ctx);
    				if (if_block6) {
    					if_block6.c();
    					if_block6.m(td4, null);
    				}
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(table);
    			}

    			if (if_block0) if_block0.d();
    			if_block1.d();
    			if_block2.d();
    			if_block3.d();
    			if_block4.d();
    			if_block5.d();
    			if (if_block6) if_block6.d();
    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_17.name, type: "else", source: "(431:0) {:else}", ctx });
    	return block;
    }

    // (354:0) {#if $tabIndex == 2 && $garageIndex == 1}
    function create_if_block_25(ctx) {
    	var table, tr0, td0, div0, t0, tr1, td1, div1, span0, t1, t2, tr2, td2, t3, tr3, td3, span1, t4, t5, tr4, td4, span2, t6, t7, tr5, td5, span3, t8, t9, tr6, td6, span4, t10, t11, tr7, td7, span5, t12, t13, tr8, td8, t14, tr9, td9, button0, i0, t15, t16, tr10, td10, button1, i1, t17, button1_disabled_value, t18, tr11, td11, button2, i2, t19, dispose;

    	function select_block_type_1(changed, ctx) {
    		if (ctx.url == "https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg") return create_if_block_28;
    		return create_else_block_16;
    	}

    	var current_block_type = select_block_type_1(null, ctx);
    	var if_block0 = current_block_type(ctx);

    	var if_block1 = (ctx.year != null) && create_if_block_27(ctx);

    	function select_block_type_2(changed, ctx) {
    		if (ctx.price != null) return create_if_block_26;
    		return create_else_block_15;
    	}

    	var current_block_type_1 = select_block_type_2(null, ctx);
    	var if_block2 = current_block_type_1(ctx);

    	const block = {
    		c: function create() {
    			table = element("table");
    			tr0 = element("tr");
    			td0 = element("td");
    			div0 = element("div");
    			if_block0.c();
    			t0 = space();
    			tr1 = element("tr");
    			td1 = element("td");
    			div1 = element("div");
    			span0 = element("span");
    			t1 = text(ctx.model);
    			t2 = space();
    			tr2 = element("tr");
    			td2 = element("td");
    			if (if_block1) if_block1.c();
    			t3 = space();
    			tr3 = element("tr");
    			td3 = element("td");
    			span1 = element("span");
    			t4 = text(ctx.vin);
    			t5 = space();
    			tr4 = element("tr");
    			td4 = element("td");
    			span2 = element("span");
    			t6 = text(ctx.cyl);
    			t7 = space();
    			tr5 = element("tr");
    			td5 = element("td");
    			span3 = element("span");
    			t8 = text(ctx.status);
    			t9 = space();
    			tr6 = element("tr");
    			td6 = element("td");
    			span4 = element("span");
    			t10 = text(ctx.mileage);
    			t11 = space();
    			tr7 = element("tr");
    			td7 = element("td");
    			span5 = element("span");
    			t12 = text(ctx.date);
    			t13 = space();
    			tr8 = element("tr");
    			td8 = element("td");
    			if_block2.c();
    			t14 = space();
    			tr9 = element("tr");
    			td9 = element("td");
    			button0 = element("button");
    			i0 = element("i");
    			t15 = text(" View Analytics");
    			t16 = space();
    			tr10 = element("tr");
    			td10 = element("td");
    			button1 = element("button");
    			i1 = element("i");
    			t17 = text(" Add To Garage");
    			t18 = space();
    			tr11 = element("tr");
    			td11 = element("td");
    			button2 = element("button");
    			i2 = element("i");
    			t19 = text(" Remove");
    			attr_dev(div0, "class", "svelte-1k6i1cn");
    			add_location(div0, file$b, 357, 16, 9732);
    			attr_dev(td0, "align", "center");
    			attr_dev(td0, "class", "svelte-1k6i1cn");
    			add_location(td0, file$b, 356, 12, 9696);
    			attr_dev(tr0, "class", "svelte-1k6i1cn");
    			add_location(tr0, file$b, 355, 8, 9679);
    			attr_dev(span0, "class", "makeVal svelte-1k6i1cn");
    			add_location(span0, file$b, 369, 20, 10370);
    			set_style(div1, "white-space", "nowrap");
    			set_style(div1, "overflow", "hidden");
    			set_style(div1, "text-overflow", "ellipsis");
    			set_style(div1, "width", "155px");
    			attr_dev(div1, "class", "svelte-1k6i1cn");
    			add_location(div1, file$b, 368, 16, 10266);
    			attr_dev(td1, "align", "center");
    			attr_dev(td1, "class", "svelte-1k6i1cn");
    			add_location(td1, file$b, 367, 12, 10230);
    			set_style(tr1, "border-bottom", "1px solid black");
    			attr_dev(tr1, "class", "svelte-1k6i1cn");
    			add_location(tr1, file$b, 366, 8, 10174);
    			attr_dev(td2, "align", "center");
    			attr_dev(td2, "class", "svelte-1k6i1cn");
    			add_location(td2, file$b, 374, 12, 10526);
    			set_style(tr2, "border-bottom", "1px solid black");
    			attr_dev(tr2, "class", "svelte-1k6i1cn");
    			add_location(tr2, file$b, 373, 8, 10470);
    			attr_dev(span1, "class", "vinVal svelte-1k6i1cn");
    			add_location(span1, file$b, 382, 16, 10791);
    			attr_dev(td3, "align", "center");
    			set_style(td3, "border-bottom", "1px solid black");
    			attr_dev(td3, "class", "svelte-1k6i1cn");
    			add_location(td3, file$b, 381, 12, 10716);
    			attr_dev(tr3, "class", "svelte-1k6i1cn");
    			add_location(tr3, file$b, 380, 8, 10699);
    			attr_dev(span2, "class", "cylVal svelte-1k6i1cn");
    			add_location(span2, file$b, 387, 16, 10957);
    			attr_dev(td4, "align", "center");
    			set_style(td4, "border-bottom", "1px solid black");
    			attr_dev(td4, "class", "svelte-1k6i1cn");
    			add_location(td4, file$b, 386, 12, 10882);
    			attr_dev(tr4, "class", "svelte-1k6i1cn");
    			add_location(tr4, file$b, 385, 8, 10865);
    			attr_dev(span3, "class", "statusVal svelte-1k6i1cn");
    			add_location(span3, file$b, 392, 16, 11123);
    			attr_dev(td5, "align", "center");
    			set_style(td5, "border-bottom", "1px solid black");
    			attr_dev(td5, "class", "svelte-1k6i1cn");
    			add_location(td5, file$b, 391, 12, 11048);
    			attr_dev(tr5, "class", "svelte-1k6i1cn");
    			add_location(tr5, file$b, 390, 8, 11031);
    			attr_dev(span4, "class", "mileVal svelte-1k6i1cn");
    			add_location(span4, file$b, 397, 16, 11295);
    			attr_dev(td6, "align", "center");
    			set_style(td6, "border-bottom", "1px solid black");
    			attr_dev(td6, "class", "svelte-1k6i1cn");
    			add_location(td6, file$b, 396, 12, 11220);
    			attr_dev(tr6, "class", "svelte-1k6i1cn");
    			add_location(tr6, file$b, 395, 8, 11203);
    			attr_dev(span5, "class", "dateVal svelte-1k6i1cn");
    			add_location(span5, file$b, 402, 16, 11466);
    			attr_dev(td7, "align", "center");
    			set_style(td7, "border-bottom", "1px solid black");
    			attr_dev(td7, "class", "svelte-1k6i1cn");
    			add_location(td7, file$b, 401, 12, 11391);
    			attr_dev(tr7, "class", "svelte-1k6i1cn");
    			add_location(tr7, file$b, 400, 8, 11374);
    			attr_dev(td8, "align", "center");
    			set_style(td8, "border-bottom", "1px solid black");
    			attr_dev(td8, "class", "svelte-1k6i1cn");
    			add_location(td8, file$b, 406, 12, 11559);
    			attr_dev(tr8, "class", "svelte-1k6i1cn");
    			add_location(tr8, file$b, 405, 8, 11542);
    			attr_dev(i0, "class", "fa fa-area-chart svelte-1k6i1cn");
    			add_location(i0, file$b, 416, 141, 12065);
    			attr_dev(button0, "class", "btn btn-sm btn-light compbtn svelte-1k6i1cn");
    			set_style(button0, "outline", "none");
    			set_style(button0, "width", "100%");
    			add_location(button0, file$b, 416, 16, 11940);
    			attr_dev(td9, "class", "svelte-1k6i1cn");
    			add_location(td9, file$b, 415, 12, 11919);
    			attr_dev(tr9, "class", "svelte-1k6i1cn");
    			add_location(tr9, file$b, 414, 8, 11902);
    			attr_dev(i1, "class", "fa fa-plus svelte-1k6i1cn");
    			add_location(i1, file$b, 421, 175, 12359);
    			attr_dev(button1, "class", "btn btn-sm btn-light compbtn svelte-1k6i1cn");
    			set_style(button1, "outline", "none");
    			set_style(button1, "width", "100%");
    			button1.disabled = button1_disabled_value = ctx.checkExist(ctx.id, 'owned');
    			add_location(button1, file$b, 421, 16, 12200);
    			attr_dev(td10, "class", "svelte-1k6i1cn");
    			add_location(td10, file$b, 420, 12, 12179);
    			attr_dev(tr10, "class", "svelte-1k6i1cn");
    			add_location(tr10, file$b, 419, 8, 12162);
    			attr_dev(i2, "class", "fa fa-remove svelte-1k6i1cn");
    			add_location(i2, file$b, 426, 141, 12612);
    			attr_dev(button2, "class", "btn btn-sm btn-danger compbtn svelte-1k6i1cn");
    			set_style(button2, "outline", "none");
    			set_style(button2, "width", "100%");
    			add_location(button2, file$b, 426, 16, 12487);
    			attr_dev(td11, "class", "svelte-1k6i1cn");
    			add_location(td11, file$b, 425, 12, 12466);
    			attr_dev(tr11, "class", "svelte-1k6i1cn");
    			add_location(tr11, file$b, 424, 8, 12449);
    			set_style(table, "float", "left");
    			set_style(table, "font-size", "13px");
    			attr_dev(table, "width", "155");
    			attr_dev(table, "height", "300");
    			attr_dev(table, "border", "0");
    			attr_dev(table, "cellpadding", "3");
    			attr_dev(table, "class", "svelte-1k6i1cn");
    			add_location(table, file$b, 354, 4, 9577);

    			dispose = [
    				listen_dev(button0, "click", ctx.click_handler_1),
    				listen_dev(button1, "click", ctx.click_handler_2),
    				listen_dev(button2, "click", ctx.click_handler_3)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, tr0);
    			append_dev(tr0, td0);
    			append_dev(td0, div0);
    			if_block0.m(div0, null);
    			append_dev(table, t0);
    			append_dev(table, tr1);
    			append_dev(tr1, td1);
    			append_dev(td1, div1);
    			append_dev(div1, span0);
    			append_dev(span0, t1);
    			append_dev(table, t2);
    			append_dev(table, tr2);
    			append_dev(tr2, td2);
    			if (if_block1) if_block1.m(td2, null);
    			append_dev(table, t3);
    			append_dev(table, tr3);
    			append_dev(tr3, td3);
    			append_dev(td3, span1);
    			append_dev(span1, t4);
    			append_dev(table, t5);
    			append_dev(table, tr4);
    			append_dev(tr4, td4);
    			append_dev(td4, span2);
    			append_dev(span2, t6);
    			append_dev(table, t7);
    			append_dev(table, tr5);
    			append_dev(tr5, td5);
    			append_dev(td5, span3);
    			append_dev(span3, t8);
    			append_dev(table, t9);
    			append_dev(table, tr6);
    			append_dev(tr6, td6);
    			append_dev(td6, span4);
    			append_dev(span4, t10);
    			append_dev(table, t11);
    			append_dev(table, tr7);
    			append_dev(tr7, td7);
    			append_dev(td7, span5);
    			append_dev(span5, t12);
    			append_dev(table, t13);
    			append_dev(table, tr8);
    			append_dev(tr8, td8);
    			if_block2.m(td8, null);
    			append_dev(table, t14);
    			append_dev(table, tr9);
    			append_dev(tr9, td9);
    			append_dev(td9, button0);
    			append_dev(button0, i0);
    			append_dev(button0, t15);
    			append_dev(table, t16);
    			append_dev(table, tr10);
    			append_dev(tr10, td10);
    			append_dev(td10, button1);
    			append_dev(button1, i1);
    			append_dev(button1, t17);
    			append_dev(table, t18);
    			append_dev(table, tr11);
    			append_dev(tr11, td11);
    			append_dev(td11, button2);
    			append_dev(button2, i2);
    			append_dev(button2, t19);
    		},

    		p: function update(changed, ctx) {
    			if (current_block_type === (current_block_type = select_block_type_1(changed, ctx)) && if_block0) {
    				if_block0.p(changed, ctx);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);
    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div0, null);
    				}
    			}

    			if (changed.model) {
    				set_data_dev(t1, ctx.model);
    			}

    			if (ctx.year != null) {
    				if (if_block1) {
    					if_block1.p(changed, ctx);
    				} else {
    					if_block1 = create_if_block_27(ctx);
    					if_block1.c();
    					if_block1.m(td2, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (changed.vin) {
    				set_data_dev(t4, ctx.vin);
    			}

    			if (changed.cyl) {
    				set_data_dev(t6, ctx.cyl);
    			}

    			if (changed.status) {
    				set_data_dev(t8, ctx.status);
    			}

    			if (changed.mileage) {
    				set_data_dev(t10, ctx.mileage);
    			}

    			if (changed.date) {
    				set_data_dev(t12, ctx.date);
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_2(changed, ctx)) && if_block2) {
    				if_block2.p(changed, ctx);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type_1(ctx);
    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(td8, null);
    				}
    			}

    			if ((changed.id) && button1_disabled_value !== (button1_disabled_value = ctx.checkExist(ctx.id, 'owned'))) {
    				prop_dev(button1, "disabled", button1_disabled_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(table);
    			}

    			if_block0.d();
    			if (if_block1) if_block1.d();
    			if_block2.d();
    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_25.name, type: "if", source: "(354:0) {#if $tabIndex == 2 && $garageIndex == 1}", ctx });
    	return block;
    }

    // (438:24) {#if year != null}
    function create_if_block_37(ctx) {
    	var t;

    	const block = {
    		c: function create() {
    			t = text(ctx.year);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.year) {
    				set_data_dev(t, ctx.year);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(t);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_37.name, type: "if", source: "(438:24) {#if year != null}", ctx });
    	return block;
    }

    // (452:20) {:else}
    function create_else_block_22(ctx) {
    	var img, dispose;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "class", "image svelte-1k6i1cn");
    			attr_dev(img, "src", ctx.url);
    			attr_dev(img, "alt", "Image");
    			add_location(img, file$b, 452, 24, 13507);
    			dispose = listen_dev(img, "click", ctx.click_handler_4);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.url) {
    				attr_dev(img, "src", ctx.url);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_22.name, type: "else", source: "(452:20) {:else}", ctx });
    	return block;
    }

    // (450:20) {#if url == "https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg"}
    function create_if_block_36(ctx) {
    	var img;

    	const block = {
    		c: function create() {
    			img = element("img");
    			set_style(img, "width", "75%");
    			set_style(img, "height", "75%");
    			set_style(img, "margin-left", "12.5%");
    			attr_dev(img, "src", ctx.url);
    			attr_dev(img, "alt", "Image");
    			attr_dev(img, "class", "svelte-1k6i1cn");
    			add_location(img, file$b, 450, 24, 13376);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.url) {
    				attr_dev(img, "src", ctx.url);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_36.name, type: "if", source: "(450:20) {#if url == \"https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg\"}", ctx });
    	return block;
    }

    // (463:24) {:else}
    function create_else_block_21(ctx) {
    	var t;

    	const block = {
    		c: function create() {
    			t = text(ctx.vin);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.vin) {
    				set_data_dev(t, ctx.vin);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(t);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_21.name, type: "else", source: "(463:24) {:else}", ctx });
    	return block;
    }

    // (461:24) {#if vin == null || vin == ''}
    function create_if_block_35(ctx) {
    	var t;

    	const block = {
    		c: function create() {
    			t = text("Unavailable");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(t);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_35.name, type: "if", source: "(461:24) {#if vin == null || vin == ''}", ctx });
    	return block;
    }

    // (472:16) {:else}
    function create_else_block_20(ctx) {
    	var span, b, t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			b = element("b");
    			t = text(ctx.cyl);
    			attr_dev(b, "class", "svelte-1k6i1cn");
    			add_location(b, file$b, 472, 43, 14273);
    			attr_dev(span, "class", "labelVal svelte-1k6i1cn");
    			add_location(span, file$b, 472, 20, 14250);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, b);
    			append_dev(b, t);
    		},

    		p: function update(changed, ctx) {
    			if (changed.cyl) {
    				set_data_dev(t, ctx.cyl);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_20.name, type: "else", source: "(472:16) {:else}", ctx });
    	return block;
    }

    // (470:16) {#if cyl == null || cyl == '' || cyl == 'null'}
    function create_if_block_34(ctx) {
    	var span, b;

    	const block = {
    		c: function create() {
    			span = element("span");
    			b = element("b");
    			b.textContent = "Unavailable";
    			attr_dev(b, "class", "svelte-1k6i1cn");
    			add_location(b, file$b, 470, 43, 14180);
    			attr_dev(span, "class", "labelVal svelte-1k6i1cn");
    			add_location(span, file$b, 470, 20, 14157);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, b);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_34.name, type: "if", source: "(470:16) {#if cyl == null || cyl == '' || cyl == 'null'}", ctx });
    	return block;
    }

    // (483:16) {:else}
    function create_else_block_19(ctx) {
    	var span, b;

    	const block = {
    		c: function create() {
    			span = element("span");
    			b = element("b");
    			b.textContent = "Pending";
    			attr_dev(b, "class", "svelte-1k6i1cn");
    			add_location(b, file$b, 483, 43, 14724);
    			attr_dev(span, "class", "labelVal svelte-1k6i1cn");
    			add_location(span, file$b, 483, 20, 14701);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, b);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_19.name, type: "else", source: "(483:16) {:else}", ctx });
    	return block;
    }

    // (481:16) {#if price != null}
    function create_if_block_33(ctx) {
    	var span, b, t0, t1_value = convertToCurrency(ctx.price) + "", t1;

    	const block = {
    		c: function create() {
    			span = element("span");
    			b = element("b");
    			t0 = text("$");
    			t1 = text(t1_value);
    			attr_dev(b, "class", "svelte-1k6i1cn");
    			add_location(b, file$b, 481, 63, 14615);
    			attr_dev(span, "class", "labelVal svelte-1k6i1cn");
    			set_style(span, "color", "green");
    			add_location(span, file$b, 481, 20, 14572);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, b);
    			append_dev(b, t0);
    			append_dev(b, t1);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.price) && t1_value !== (t1_value = convertToCurrency(ctx.price) + "")) {
    				set_data_dev(t1, t1_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_33.name, type: "if", source: "(481:16) {#if price != null}", ctx });
    	return block;
    }

    // (490:16) {:else}
    function create_else_block_18(ctx) {
    	var span, b;

    	const block = {
    		c: function create() {
    			span = element("span");
    			b = element("b");
    			b.textContent = "Unavailable";
    			attr_dev(b, "class", "svelte-1k6i1cn");
    			add_location(b, file$b, 490, 43, 14995);
    			attr_dev(span, "class", "labelVal svelte-1k6i1cn");
    			add_location(span, file$b, 490, 20, 14972);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, b);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_18.name, type: "else", source: "(490:16) {:else}", ctx });
    	return block;
    }

    // (488:16) {#if mileage != null}
    function create_if_block_32(ctx) {
    	var span, b, t0, t1;

    	const block = {
    		c: function create() {
    			span = element("span");
    			b = element("b");
    			t0 = text(ctx.mileage);
    			t1 = text(" km");
    			attr_dev(b, "class", "svelte-1k6i1cn");
    			add_location(b, file$b, 488, 43, 14901);
    			attr_dev(span, "class", "labelVal svelte-1k6i1cn");
    			add_location(span, file$b, 488, 20, 14878);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, b);
    			append_dev(b, t0);
    			append_dev(b, t1);
    		},

    		p: function update(changed, ctx) {
    			if (changed.mileage) {
    				set_data_dev(t0, ctx.mileage);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_32.name, type: "if", source: "(488:16) {#if mileage != null}", ctx });
    	return block;
    }

    // (507:48) 
    function create_if_block_31(ctx) {
    	var button, i_1, t, dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			i_1 = element("i");
    			t = text(" Remove");
    			attr_dev(i_1, "class", "fa fa-trash svelte-1k6i1cn");
    			add_location(i_1, file$b, 507, 150, 16332);
    			attr_dev(button, "id", "garage");
    			attr_dev(button, "class", "btn btn-danger btn-sm svelte-1k6i1cn");
    			set_style(button, "width", "33.3%");
    			set_style(button, "float", "right");
    			add_location(button, file$b, 507, 24, 16206);
    			dispose = listen_dev(button, "click", ctx.click_handler_9);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, i_1);
    			append_dev(button, t);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_31.name, type: "if", source: "(507:48) ", ctx });
    	return block;
    }

    // (505:20) {#if $garageIndex == 0}
    function create_if_block_30(ctx) {
    	var button, i_1, t, dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			i_1 = element("i");
    			t = text(" Remove");
    			attr_dev(i_1, "class", "fa fa-trash svelte-1k6i1cn");
    			add_location(i_1, file$b, 505, 149, 16089);
    			attr_dev(button, "id", "garage");
    			attr_dev(button, "class", "btn btn-danger btn-sm svelte-1k6i1cn");
    			set_style(button, "width", "33.3%");
    			set_style(button, "float", "right");
    			add_location(button, file$b, 505, 24, 15964);
    			dispose = listen_dev(button, "click", ctx.click_handler_8);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, i_1);
    			append_dev(button, t);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_30.name, type: "if", source: "(505:20) {#if $garageIndex == 0}", ctx });
    	return block;
    }

    // (502:16) {#if $tabIndex != 2}
    function create_if_block_29(ctx) {
    	var button, i_1, t, dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			i_1 = element("i");
    			t = text(" Add To Garage");
    			attr_dev(i_1, "class", "fa fa-plus svelte-1k6i1cn");
    			add_location(i_1, file$b, 502, 145, 15822);
    			attr_dev(button, "id", "garage");
    			attr_dev(button, "class", "btn btn-light btn-sm svelte-1k6i1cn");
    			set_style(button, "width", "33.3%");
    			set_style(button, "float", "right");
    			add_location(button, file$b, 502, 20, 15697);
    			dispose = listen_dev(button, "click", ctx.click_handler_7);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, i_1);
    			append_dev(button, t);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_29.name, type: "if", source: "(502:16) {#if $tabIndex != 2}", ctx });
    	return block;
    }

    // (361:20) {:else}
    function create_else_block_16(ctx) {
    	var img, dispose;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "class", "image svelte-1k6i1cn");
    			attr_dev(img, "src", ctx.url);
    			attr_dev(img, "alt", "Image");
    			add_location(img, file$b, 361, 24, 10003);
    			dispose = listen_dev(img, "click", ctx.click_handler);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.url) {
    				attr_dev(img, "src", ctx.url);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_16.name, type: "else", source: "(361:20) {:else}", ctx });
    	return block;
    }

    // (359:20) {#if url == "https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg"}
    function create_if_block_28(ctx) {
    	var img;

    	const block = {
    		c: function create() {
    			img = element("img");
    			set_style(img, "width", "75%");
    			set_style(img, "height", "75%");
    			set_style(img, "margin-left", "12.5%");
    			attr_dev(img, "src", ctx.url);
    			attr_dev(img, "alt", "Image");
    			attr_dev(img, "class", "svelte-1k6i1cn");
    			add_location(img, file$b, 359, 24, 9872);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.url) {
    				attr_dev(img, "src", ctx.url);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_28.name, type: "if", source: "(359:20) {#if url == \"https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg\"}", ctx });
    	return block;
    }

    // (376:16) {#if year != null}
    function create_if_block_27(ctx) {
    	var span, t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(ctx.year);
    			attr_dev(span, "class", "yearVal svelte-1k6i1cn");
    			add_location(span, file$b, 376, 20, 10601);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},

    		p: function update(changed, ctx) {
    			if (changed.year) {
    				set_data_dev(t, ctx.year);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_27.name, type: "if", source: "(376:16) {#if year != null}", ctx });
    	return block;
    }

    // (410:16) {:else}
    function create_else_block_15(ctx) {
    	var span, b;

    	const block = {
    		c: function create() {
    			span = element("span");
    			b = element("b");
    			b.textContent = "Pending";
    			attr_dev(b, "class", "svelte-1k6i1cn");
    			add_location(b, file$b, 410, 43, 11818);
    			attr_dev(span, "class", "labelVal svelte-1k6i1cn");
    			add_location(span, file$b, 410, 20, 11795);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, b);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_15.name, type: "else", source: "(410:16) {:else}", ctx });
    	return block;
    }

    // (408:16) {#if price != null}
    function create_if_block_26(ctx) {
    	var span, t0, t1_value = convertToCurrency(ctx.price) + "", t1;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text("$");
    			t1 = text(t1_value);
    			attr_dev(span, "class", "bidVal svelte-1k6i1cn");
    			set_style(span, "color", "green");
    			add_location(span, file$b, 408, 20, 11674);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.price) && t1_value !== (t1_value = convertToCurrency(ctx.price) + "")) {
    				set_data_dev(t1, t1_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_26.name, type: "if", source: "(408:16) {#if price != null}", ctx });
    	return block;
    }

    // (516:0) {#if viewImages}
    function create_if_block_23(ctx) {
    	var t0, div_1, button, i_1, t1, img, t2, current, dispose;

    	var modal = new Modal({ $$inline: true });

    	function select_block_type_9(changed, ctx) {
    		if (ctx.screenWidth > 1024) return create_if_block_24;
    		return create_else_block_14;
    	}

    	var current_block_type = select_block_type_9(null, ctx);
    	var if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			modal.$$.fragment.c();
    			t0 = space();
    			div_1 = element("div");
    			button = element("button");
    			i_1 = element("i");
    			t1 = space();
    			img = element("img");
    			t2 = space();
    			if_block.c();
    			attr_dev(i_1, "class", "fa fa-times svelte-1k6i1cn");
    			add_location(i_1, file$b, 518, 152, 16708);
    			attr_dev(button, "id", "closeAnalytics");
    			attr_dev(button, "class", "btn btn-danger svelte-1k6i1cn");
    			set_style(button, "border-radius", "50%");
    			set_style(button, "float", "right");
    			set_style(button, "margin-top", "20px");
    			add_location(button, file$b, 518, 8, 16564);
    			attr_dev(img, "id", "first-image");
    			attr_dev(img, "class", "col-md-12 svelte-1k6i1cn");
    			attr_dev(img, "alt", "First Image");
    			attr_dev(img, "src", ctx.currImage);
    			add_location(img, file$b, 520, 8, 16762);
    			attr_dev(div_1, "id", "autoImages");
    			attr_dev(div_1, "class", "container-fluid svelte-1k6i1cn");
    			add_location(div_1, file$b, 517, 4, 16510);
    			dispose = listen_dev(button, "click", ctx.click_handler_10);
    		},

    		m: function mount(target, anchor) {
    			mount_component(modal, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div_1, anchor);
    			append_dev(div_1, button);
    			append_dev(button, i_1);
    			append_dev(div_1, t1);
    			append_dev(div_1, img);
    			append_dev(div_1, t2);
    			if_block.m(div_1, null);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (!current || changed.currImage) {
    				attr_dev(img, "src", ctx.currImage);
    			}

    			if_block.p(changed, ctx);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(modal.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(modal.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(modal, detaching);

    			if (detaching) {
    				detach_dev(t0);
    				detach_dev(div_1);
    			}

    			if_block.d();
    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_23.name, type: "if", source: "(516:0) {#if viewImages}", ctx });
    	return block;
    }

    // (529:8) {:else}
    function create_else_block_14(ctx) {
    	var div_1, button0, t1, button1, t3, h3, t4_value = ctx.i + 1 + "", t4, t5, t6_value = ctx.images.length + "", t6, dispose;

    	const block = {
    		c: function create() {
    			div_1 = element("div");
    			button0 = element("button");
    			button0.textContent = "Prev";
    			t1 = space();
    			button1 = element("button");
    			button1.textContent = "Next";
    			t3 = space();
    			h3 = element("h3");
    			t4 = text(t4_value);
    			t5 = text("/");
    			t6 = text(t6_value);
    			attr_dev(button0, "class", "btn btn-primary btn-lg svelte-1k6i1cn");
    			set_style(button0, "float", "left");
    			add_location(button0, file$b, 530, 16, 17305);
    			attr_dev(button1, "class", "btn btn-primary btn-lg svelte-1k6i1cn");
    			set_style(button1, "float", "right");
    			add_location(button1, file$b, 531, 16, 17416);
    			set_style(h3, "text-align", "center");
    			set_style(h3, "color", "white");
    			attr_dev(h3, "class", "svelte-1k6i1cn");
    			add_location(h3, file$b, 532, 16, 17528);
    			set_style(div_1, "margin-top", "100px");
    			set_style(div_1, "width", "100%");
    			attr_dev(div_1, "class", "svelte-1k6i1cn");
    			add_location(div_1, file$b, 529, 12, 17246);

    			dispose = [
    				listen_dev(button0, "click", ctx.prevImage),
    				listen_dev(button1, "click", ctx.nextImage)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div_1, anchor);
    			append_dev(div_1, button0);
    			append_dev(div_1, t1);
    			append_dev(div_1, button1);
    			append_dev(div_1, t3);
    			append_dev(div_1, h3);
    			append_dev(h3, t4);
    			append_dev(h3, t5);
    			append_dev(h3, t6);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.i) && t4_value !== (t4_value = ctx.i + 1 + "")) {
    				set_data_dev(t4, t4_value);
    			}

    			if ((changed.images) && t6_value !== (t6_value = ctx.images.length + "")) {
    				set_data_dev(t6, t6_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div_1);
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_14.name, type: "else", source: "(529:8) {:else}", ctx });
    	return block;
    }

    // (523:8) {#if screenWidth > 1024}
    function create_if_block_24(ctx) {
    	var div_1;

    	let each_value_3 = ctx.images;

    	let each_blocks = [];

    	for (let i_1 = 0; i_1 < each_value_3.length; i_1 += 1) {
    		each_blocks[i_1] = create_each_block_3(get_each_context_3(ctx, each_value_3, i_1));
    	}

    	const block = {
    		c: function create() {
    			div_1 = element("div");

    			for (let i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
    				each_blocks[i_1].c();
    			}
    			set_style(div_1, "width", "100%");
    			set_style(div_1, "margin-top", "20px");
    			attr_dev(div_1, "class", "svelte-1k6i1cn");
    			add_location(div_1, file$b, 523, 12, 16895);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div_1, anchor);

    			for (let i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
    				each_blocks[i_1].m(div_1, null);
    			}
    		},

    		p: function update(changed, ctx) {
    			if (changed.images) {
    				each_value_3 = ctx.images;

    				let i_1;
    				for (i_1 = 0; i_1 < each_value_3.length; i_1 += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i_1);

    					if (each_blocks[i_1]) {
    						each_blocks[i_1].p(changed, child_ctx);
    					} else {
    						each_blocks[i_1] = create_each_block_3(child_ctx);
    						each_blocks[i_1].c();
    						each_blocks[i_1].m(div_1, null);
    					}
    				}

    				for (; i_1 < each_blocks.length; i_1 += 1) {
    					each_blocks[i_1].d(1);
    				}
    				each_blocks.length = each_value_3.length;
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div_1);
    			}

    			destroy_each(each_blocks, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_24.name, type: "if", source: "(523:8) {#if screenWidth > 1024}", ctx });
    	return block;
    }

    // (525:16) {#each images as image}
    function create_each_block_3(ctx) {
    	var img, img_src_value, dispose;

    	function click_handler_11() {
    		return ctx.click_handler_11(ctx);
    	}

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "class", "all-images svelte-1k6i1cn");
    			attr_dev(img, "alt", "Current Image");
    			attr_dev(img, "src", img_src_value = ctx.image);
    			set_style(img, "bottom", "10px");
    			set_style(img, "background-color", "transparent");
    			set_style(img, "cursor", "pointer");
    			set_style(img, "margin-top", "30px");
    			add_location(img, file$b, 525, 20, 16997);
    			dispose = listen_dev(img, "click", click_handler_11);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: function update(changed, new_ctx) {
    			ctx = new_ctx;
    			if ((changed.images) && img_src_value !== (img_src_value = ctx.image)) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_3.name, type: "each", source: "(525:16) {#each images as image}", ctx });
    	return block;
    }

    // (539:0) {#if viewAnalytics}
    function create_if_block$5(ctx) {
    	var t0, t1, div0, t2, h30, t3, t4, t5, t6, t7, current_block_type_index, if_block2, t8, div1, t9, h31, t11, t12, input, current, dispose;

    	var modal = new Modal({ $$inline: true });

    	var if_block0 = (ctx.screenWidth > 1024) && create_if_block_22(ctx);

    	var if_block1 = (ctx.screenWidth <= 1024) && create_if_block_21(ctx);

    	var if_block_creators = [
    		create_if_block_7$1,
    		create_if_block_8$1,
    		create_else_block_3$1
    	];

    	var if_blocks = [];

    	function select_block_type_10(changed, ctx) {
    		if (ctx.analyticErr == false && (ctx.analytics == null || typeof ctx.analytics == "undefined")) return 0;
    		if (ctx.analyticErr == true && (ctx.analytics == null || typeof ctx.analytics == "undefined")) return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type_10(null, ctx);
    	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	var if_block3 = (ctx.screenWidth <= 1024) && create_if_block_6$1(ctx);

    	function select_block_type_21(changed, ctx) {
    		if (ctx.analyticErr == false && (ctx.analytics == null || ctx.analytics == ctx.undefined)) return create_if_block_1$4;
    		if (ctx.analytics.comments == null) return create_if_block_2$4;
    		return create_else_block$4;
    	}

    	var current_block_type = select_block_type_21(null, ctx);
    	var if_block4 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			modal.$$.fragment.c();
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			div0 = element("div");
    			if (if_block1) if_block1.c();
    			t2 = space();
    			h30 = element("h3");
    			t3 = text(ctx.currYear);
    			t4 = space();
    			t5 = text(ctx.currModel);
    			t6 = text(" Analytics");
    			t7 = space();
    			if_block2.c();
    			t8 = space();
    			div1 = element("div");
    			if (if_block3) if_block3.c();
    			t9 = space();
    			h31 = element("h3");
    			h31.textContent = "Comments";
    			t11 = space();
    			if_block4.c();
    			t12 = space();
    			input = element("input");
    			attr_dev(h30, "class", "analyticHeader svelte-1k6i1cn");
    			add_location(h30, file$b, 550, 8, 18425);
    			attr_dev(div0, "id", "autoAnalytics");
    			attr_dev(div0, "class", "container-fluid svelte-1k6i1cn");
    			add_location(div0, file$b, 543, 4, 17936);
    			attr_dev(h31, "class", "analyticHeader svelte-1k6i1cn");
    			add_location(h31, file$b, 716, 8, 27882);
    			attr_dev(input, "id", "userComet");
    			attr_dev(input, "autocomplete", "off");
    			attr_dev(input, "placeholder", "Type Comment Or Share Garage Vehicle");
    			attr_dev(input, "class", "svelte-1k6i1cn");
    			add_location(input, file$b, 754, 8, 30087);
    			attr_dev(div1, "id", "autoComments");
    			attr_dev(div1, "class", "container-fluid svelte-1k6i1cn");
    			add_location(div1, file$b, 711, 4, 27395);

    			dispose = [
    				listen_dev(input, "input", ctx.input_input_handler),
    				listen_dev(input, "keyup", ctx.keyup_handler),
    				listen_dev(input, "keydown", ctx.keydown_handler)
    			];
    		},

    		m: function mount(target, anchor) {
    			mount_component(modal, target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div0, anchor);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div0, t2);
    			append_dev(div0, h30);
    			append_dev(h30, t3);
    			append_dev(h30, t4);
    			append_dev(h30, t5);
    			append_dev(h30, t6);
    			append_dev(div0, t7);
    			if_blocks[current_block_type_index].m(div0, null);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div1, anchor);
    			if (if_block3) if_block3.m(div1, null);
    			append_dev(div1, t9);
    			append_dev(div1, h31);
    			append_dev(div1, t11);
    			if_block4.m(div1, null);
    			append_dev(div1, t12);
    			append_dev(div1, input);

    			set_input_value(input, ctx.userComment);

    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (!current || changed.currYear) {
    				set_data_dev(t3, ctx.currYear);
    			}

    			if (!current || changed.currModel) {
    				set_data_dev(t5, ctx.currModel);
    			}

    			var previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_10(changed, ctx);
    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(changed, ctx);
    			} else {
    				group_outros();
    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});
    				check_outros();

    				if_block2 = if_blocks[current_block_type_index];
    				if (!if_block2) {
    					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block2.c();
    				}
    				transition_in(if_block2, 1);
    				if_block2.m(div0, null);
    			}

    			if (current_block_type === (current_block_type = select_block_type_21(changed, ctx)) && if_block4) {
    				if_block4.p(changed, ctx);
    			} else {
    				if_block4.d(1);
    				if_block4 = current_block_type(ctx);
    				if (if_block4) {
    					if_block4.c();
    					if_block4.m(div1, t12);
    				}
    			}

    			if (changed.userComment && (input.value !== ctx.userComment)) set_input_value(input, ctx.userComment);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(modal.$$.fragment, local);

    			transition_in(if_block2);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(modal.$$.fragment, local);
    			transition_out(if_block2);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(modal, detaching);

    			if (detaching) {
    				detach_dev(t0);
    			}

    			if (if_block0) if_block0.d(detaching);

    			if (detaching) {
    				detach_dev(t1);
    				detach_dev(div0);
    			}

    			if (if_block1) if_block1.d();
    			if_blocks[current_block_type_index].d();

    			if (detaching) {
    				detach_dev(t8);
    				detach_dev(div1);
    			}

    			if (if_block3) if_block3.d();
    			if_block4.d();
    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$5.name, type: "if", source: "(539:0) {#if viewAnalytics}", ctx });
    	return block;
    }

    // (541:4) {#if screenWidth > 1024}
    function create_if_block_22(ctx) {
    	var button, i_1, dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			i_1 = element("i");
    			attr_dev(i_1, "class", "fa fa-times svelte-1k6i1cn");
    			add_location(i_1, file$b, 541, 172, 17885);
    			attr_dev(button, "id", "closeAnalytics");
    			attr_dev(button, "class", "btn btn-danger svelte-1k6i1cn");
    			set_style(button, "border-radius", "50%");
    			set_style(button, "right", "20px");
    			set_style(button, "top", "5px");
    			set_style(button, "z-index", "50");
    			set_style(button, "position", "fixed");
    			add_location(button, file$b, 541, 8, 17721);
    			dispose = listen_dev(button, "click", ctx.click_handler_12);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, i_1);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_22.name, type: "if", source: "(541:4) {#if screenWidth > 1024}", ctx });
    	return block;
    }

    // (546:8) {#if screenWidth <= 1024}
    function create_if_block_21(ctx) {
    	var button0, t1, button1, t2, i_1, dispose;

    	const block = {
    		c: function create() {
    			button0 = element("button");
    			button0.textContent = "Close";
    			t1 = space();
    			button1 = element("button");
    			t2 = text("View Comments ");
    			i_1 = element("i");
    			attr_dev(button0, "id", "closeAnalytics");
    			attr_dev(button0, "class", "btn btn-danger btn-sm svelte-1k6i1cn");
    			set_style(button0, "float", "left");
    			set_style(button0, "margin-top", "10px");
    			set_style(button0, "font-size", "20px");
    			add_location(button0, file$b, 546, 12, 18032);
    			attr_dev(i_1, "class", "fa fa-arrow-right svelte-1k6i1cn");
    			add_location(i_1, file$b, 547, 162, 18359);
    			attr_dev(button1, "id", "closeAnalytics");
    			attr_dev(button1, "class", "btn btn-dark btn-sm svelte-1k6i1cn");
    			set_style(button1, "float", "right");
    			set_style(button1, "margin-top", "10px");
    			set_style(button1, "font-size", "20px");
    			add_location(button1, file$b, 547, 12, 18209);

    			dispose = [
    				listen_dev(button0, "click", ctx.click_handler_13),
    				listen_dev(button1, "click", toggleComments)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button1, anchor);
    			append_dev(button1, t2);
    			append_dev(button1, i_1);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button0);
    				detach_dev(t1);
    				detach_dev(button1);
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_21.name, type: "if", source: "(546:8) {#if screenWidth <= 1024}", ctx });
    	return block;
    }

    // (560:8) {:else}
    function create_else_block_3$1(ctx) {
    	var div1, div0, t0, h40, t2, t3, table, tr0, td0, h41, t5, tr1, td1, h60, t7, t8, br0, br1, t9, h61, t11, t12, br2, br3, t13, h62, t15, t16, td2, h63, t18, t19, br4, br5, t20, t21, br6, br7, t22, h64, t24, t25, if_block6_anchor, current;

    	var chart = new Chart_1({
    		props: {
    		xValues: ctx.xValues,
    		yValues: ctx.yValues
    	},
    		$$inline: true
    	});

    	let each_value_2 = ctx.analytics.listGarage;

    	let each_blocks = [];

    	for (let i_1 = 0; i_1 < each_value_2.length; i_1 += 1) {
    		each_blocks[i_1] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i_1));
    	}

    	function select_block_type_13(changed, ctx) {
    		if (ctx.nullPrice) return create_if_block_17;
    		return create_else_block_11;
    	}

    	var current_block_type = select_block_type_13(null, ctx);
    	var if_block0 = current_block_type(ctx);

    	function select_block_type_14(changed, ctx) {
    		if (ctx.analytics.minBid == 'Unavailable') return create_if_block_16;
    		return create_else_block_10;
    	}

    	var current_block_type_1 = select_block_type_14(null, ctx);
    	var if_block1 = current_block_type_1(ctx);

    	function select_block_type_15(changed, ctx) {
    		if (ctx.analytics.maxBid == 'Unavailable') return create_if_block_15;
    		return create_else_block_9;
    	}

    	var current_block_type_2 = select_block_type_15(null, ctx);
    	var if_block2 = current_block_type_2(ctx);

    	function select_block_type_16(changed, ctx) {
    		if (ctx.analytics.avgBidPrice == 'Unavailable') return create_if_block_14;
    		return create_else_block_8;
    	}

    	var current_block_type_3 = select_block_type_16(null, ctx);
    	var if_block3 = current_block_type_3(ctx);

    	function select_block_type_17(changed, ctx) {
    		if (ctx.nullPrice) return create_if_block_11;
    		return create_else_block_6;
    	}

    	var current_block_type_4 = select_block_type_17(null, ctx);
    	var if_block4 = current_block_type_4(ctx);

    	function select_block_type_20(changed, ctx) {
    		if (ctx.analytics.extData == 'Unavailable') return create_if_block_10$1;
    		return create_else_block_4$1;
    	}

    	var current_block_type_5 = select_block_type_20(null, ctx);
    	var if_block5 = current_block_type_5(ctx);

    	var if_block6 = (ctx.screenWidth <= 1024) && create_if_block_9$1(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			chart.$$.fragment.c();
    			t0 = space();
    			h40 = element("h4");
    			h40.textContent = "Vehicle Detail History";
    			t2 = space();

    			for (let i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
    				each_blocks[i_1].c();
    			}

    			t3 = space();
    			table = element("table");
    			tr0 = element("tr");
    			td0 = element("td");
    			h41 = element("h4");
    			h41.textContent = "Vehicle Statistics";
    			t5 = space();
    			tr1 = element("tr");
    			td1 = element("td");
    			h60 = element("h6");
    			h60.textContent = "Auctions";
    			t7 = space();
    			if_block0.c();
    			t8 = space();
    			br0 = element("br");
    			br1 = element("br");
    			t9 = space();
    			h61 = element("h6");
    			h61.textContent = "Min. Final Bid";
    			t11 = space();
    			if_block1.c();
    			t12 = space();
    			br2 = element("br");
    			br3 = element("br");
    			t13 = space();
    			h62 = element("h6");
    			h62.textContent = "Max. Final Bid";
    			t15 = space();
    			if_block2.c();
    			t16 = space();
    			td2 = element("td");
    			h63 = element("h6");
    			h63.textContent = "Avg. Final Bid";
    			t18 = space();
    			if_block3.c();
    			t19 = space();
    			br4 = element("br");
    			br5 = element("br");
    			t20 = space();
    			if_block4.c();
    			t21 = space();
    			br6 = element("br");
    			br7 = element("br");
    			t22 = space();
    			h64 = element("h6");
    			h64.textContent = "Value Profit";
    			t24 = space();
    			if_block5.c();
    			t25 = space();
    			if (if_block6) if_block6.c();
    			if_block6_anchor = empty();
    			attr_dev(div0, "id", "lytiChart");
    			attr_dev(div0, "class", "chart-container svelte-1k6i1cn");
    			add_location(div0, file$b, 561, 16, 19126);
    			attr_dev(div1, "class", "box-body svelte-1k6i1cn");
    			set_style(div1, "margin-top", "20px");
    			set_style(div1, "padding", "0px 15px 0px 15px");
    			add_location(div1, file$b, 560, 12, 19037);
    			set_style(h40, "margin-top", "10px");
    			set_style(h40, "width", "100%");
    			set_style(h40, "text-align", "center");
    			attr_dev(h40, "class", "svelte-1k6i1cn");
    			add_location(h40, file$b, 566, 12, 19292);
    			set_style(h41, "text-align", "center");
    			set_style(h41, "width", "100%");
    			attr_dev(h41, "class", "svelte-1k6i1cn");
    			add_location(h41, file$b, 632, 24, 22813);
    			attr_dev(td0, "id", "statsTitle");
    			attr_dev(td0, "align", "center");
    			attr_dev(td0, "colspan", "2");
    			set_style(td0, "border-bottom", "1px solid red");
    			attr_dev(td0, "class", "svelte-1k6i1cn");
    			add_location(td0, file$b, 631, 20, 22705);
    			attr_dev(tr0, "class", "svelte-1k6i1cn");
    			add_location(tr0, file$b, 630, 16, 22680);
    			attr_dev(h60, "class", "details svelte-1k6i1cn");
    			set_style(h60, "float", "left");
    			set_style(h60, "width", "50%");
    			set_style(h60, "text-align", "center");
    			set_style(h60, "font-weight", "normal");
    			add_location(h60, file$b, 637, 24, 23014);
    			attr_dev(br0, "class", "svelte-1k6i1cn");
    			add_location(br0, file$b, 643, 24, 23482);
    			attr_dev(br1, "class", "svelte-1k6i1cn");
    			add_location(br1, file$b, 643, 30, 23488);
    			attr_dev(h61, "class", "details svelte-1k6i1cn");
    			set_style(h61, "float", "left");
    			set_style(h61, "width", "50%");
    			set_style(h61, "text-align", "center");
    			set_style(h61, "font-weight", "normal");
    			add_location(h61, file$b, 645, 24, 23520);
    			attr_dev(br2, "class", "svelte-1k6i1cn");
    			add_location(br2, file$b, 652, 24, 24039);
    			attr_dev(br3, "class", "svelte-1k6i1cn");
    			add_location(br3, file$b, 652, 30, 24045);
    			attr_dev(h62, "class", "details svelte-1k6i1cn");
    			set_style(h62, "float", "left");
    			set_style(h62, "width", "50%");
    			set_style(h62, "text-align", "center");
    			set_style(h62, "font-weight", "normal");
    			add_location(h62, file$b, 654, 24, 24077);
    			set_style(td1, "width", "50%");
    			attr_dev(td1, "class", "svelte-1k6i1cn");
    			add_location(td1, file$b, 636, 20, 22967);
    			attr_dev(h63, "class", "details svelte-1k6i1cn");
    			set_style(h63, "float", "left");
    			set_style(h63, "width", "50%");
    			set_style(h63, "text-align", "center");
    			set_style(h63, "font-weight", "normal");
    			add_location(h63, file$b, 663, 24, 24697);
    			attr_dev(br4, "class", "svelte-1k6i1cn");
    			add_location(br4, file$b, 670, 24, 25231);
    			attr_dev(br5, "class", "svelte-1k6i1cn");
    			add_location(br5, file$b, 670, 30, 25237);
    			attr_dev(br6, "class", "svelte-1k6i1cn");
    			add_location(br6, file$b, 688, 24, 26502);
    			attr_dev(br7, "class", "svelte-1k6i1cn");
    			add_location(br7, file$b, 688, 30, 26508);
    			attr_dev(h64, "class", "details svelte-1k6i1cn");
    			set_style(h64, "float", "left");
    			set_style(h64, "width", "50%");
    			set_style(h64, "text-align", "center");
    			set_style(h64, "font-weight", "normal");
    			add_location(h64, file$b, 690, 24, 26540);
    			set_style(td2, "border-left", "1px solid red");
    			attr_dev(td2, "class", "details svelte-1k6i1cn");
    			add_location(td2, file$b, 662, 20, 24618);
    			attr_dev(tr1, "class", "svelte-1k6i1cn");
    			add_location(tr1, file$b, 635, 16, 22942);
    			attr_dev(table, "id", "statsTable");
    			attr_dev(table, "align", "center");
    			attr_dev(table, "cellpadding", "2");
    			attr_dev(table, "class", "svelte-1k6i1cn");
    			add_location(table, file$b, 629, 12, 22609);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(chart, div0, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, h40, anchor);
    			insert_dev(target, t2, anchor);

    			for (let i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
    				each_blocks[i_1].m(target, anchor);
    			}

    			insert_dev(target, t3, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, tr0);
    			append_dev(tr0, td0);
    			append_dev(td0, h41);
    			append_dev(table, t5);
    			append_dev(table, tr1);
    			append_dev(tr1, td1);
    			append_dev(td1, h60);
    			append_dev(td1, t7);
    			if_block0.m(td1, null);
    			append_dev(td1, t8);
    			append_dev(td1, br0);
    			append_dev(td1, br1);
    			append_dev(td1, t9);
    			append_dev(td1, h61);
    			append_dev(td1, t11);
    			if_block1.m(td1, null);
    			append_dev(td1, t12);
    			append_dev(td1, br2);
    			append_dev(td1, br3);
    			append_dev(td1, t13);
    			append_dev(td1, h62);
    			append_dev(td1, t15);
    			if_block2.m(td1, null);
    			append_dev(tr1, t16);
    			append_dev(tr1, td2);
    			append_dev(td2, h63);
    			append_dev(td2, t18);
    			if_block3.m(td2, null);
    			append_dev(td2, t19);
    			append_dev(td2, br4);
    			append_dev(td2, br5);
    			append_dev(td2, t20);
    			if_block4.m(td2, null);
    			append_dev(td2, t21);
    			append_dev(td2, br6);
    			append_dev(td2, br7);
    			append_dev(td2, t22);
    			append_dev(td2, h64);
    			append_dev(td2, t24);
    			if_block5.m(td2, null);
    			insert_dev(target, t25, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, if_block6_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (changed.addComapare || changed.analytics || changed.price || changed.convertToCurrency || changed.url) {
    				each_value_2 = ctx.analytics.listGarage;

    				let i_1;
    				for (i_1 = 0; i_1 < each_value_2.length; i_1 += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i_1);

    					if (each_blocks[i_1]) {
    						each_blocks[i_1].p(changed, child_ctx);
    					} else {
    						each_blocks[i_1] = create_each_block_2$1(child_ctx);
    						each_blocks[i_1].c();
    						each_blocks[i_1].m(t3.parentNode, t3);
    					}
    				}

    				for (; i_1 < each_blocks.length; i_1 += 1) {
    					each_blocks[i_1].d(1);
    				}
    				each_blocks.length = each_value_2.length;
    			}

    			if (current_block_type === (current_block_type = select_block_type_13(changed, ctx)) && if_block0) {
    				if_block0.p(changed, ctx);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);
    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(td1, t8);
    				}
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_14(changed, ctx)) && if_block1) {
    				if_block1.p(changed, ctx);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);
    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(td1, t12);
    				}
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_15(changed, ctx)) && if_block2) {
    				if_block2.p(changed, ctx);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type_2(ctx);
    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(td1, null);
    				}
    			}

    			if (current_block_type_3 === (current_block_type_3 = select_block_type_16(changed, ctx)) && if_block3) {
    				if_block3.p(changed, ctx);
    			} else {
    				if_block3.d(1);
    				if_block3 = current_block_type_3(ctx);
    				if (if_block3) {
    					if_block3.c();
    					if_block3.m(td2, t19);
    				}
    			}

    			if (current_block_type_4 === (current_block_type_4 = select_block_type_17(changed, ctx)) && if_block4) {
    				if_block4.p(changed, ctx);
    			} else {
    				if_block4.d(1);
    				if_block4 = current_block_type_4(ctx);
    				if (if_block4) {
    					if_block4.c();
    					if_block4.m(td2, t21);
    				}
    			}

    			if (current_block_type_5 === (current_block_type_5 = select_block_type_20(changed, ctx)) && if_block5) {
    				if_block5.p(changed, ctx);
    			} else {
    				if_block5.d(1);
    				if_block5 = current_block_type_5(ctx);
    				if (if_block5) {
    					if_block5.c();
    					if_block5.m(td2, null);
    				}
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(chart.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(chart.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div1);
    			}

    			destroy_component(chart);

    			if (detaching) {
    				detach_dev(t0);
    				detach_dev(h40);
    				detach_dev(t2);
    			}

    			destroy_each(each_blocks, detaching);

    			if (detaching) {
    				detach_dev(t3);
    				detach_dev(table);
    			}

    			if_block0.d();
    			if_block1.d();
    			if_block2.d();
    			if_block3.d();
    			if_block4.d();
    			if_block5.d();

    			if (detaching) {
    				detach_dev(t25);
    			}

    			if (if_block6) if_block6.d(detaching);

    			if (detaching) {
    				detach_dev(if_block6_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_3$1.name, type: "else", source: "(560:8) {:else}", ctx });
    	return block;
    }

    // (558:96) 
    function create_if_block_8$1(ctx) {
    	var h5;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			h5.textContent = "Analytics Unavailable For This Vehicle";
    			set_style(h5, "text-align", "center");
    			set_style(h5, "margin-top", "20%");
    			attr_dev(h5, "class", "svelte-1k6i1cn");
    			add_location(h5, file$b, 558, 12, 18919);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    		},

    		p: noop,
    		i: noop,
    		o: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h5);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_8$1.name, type: "if", source: "(558:96) ", ctx });
    	return block;
    }

    // (553:8) {#if analyticErr == false && (analytics == null || typeof analytics == "undefined")}
    function create_if_block_7$1(ctx) {
    	var div_1, img, t, h6;

    	const block = {
    		c: function create() {
    			div_1 = element("div");
    			img = element("img");
    			t = space();
    			h6 = element("h6");
    			h6.textContent = "Loading...";
    			attr_dev(img, "src", "https://autoarch.blob.core.windows.net/resources/loader.gif");
    			attr_dev(img, "alt", "Loader");
    			attr_dev(img, "class", "svelte-1k6i1cn");
    			add_location(img, file$b, 554, 16, 18646);
    			attr_dev(div_1, "class", "text-center svelte-1k6i1cn");
    			add_location(div_1, file$b, 553, 12, 18604);
    			set_style(h6, "text-align", "center");
    			attr_dev(h6, "class", "svelte-1k6i1cn");
    			add_location(h6, file$b, 556, 12, 18763);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div_1, anchor);
    			append_dev(div_1, img);
    			insert_dev(target, t, anchor);
    			insert_dev(target, h6, anchor);
    		},

    		p: noop,
    		i: noop,
    		o: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div_1);
    				detach_dev(t);
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_7$1.name, type: "if", source: "(553:8) {#if analyticErr == false && (analytics == null || typeof analytics == \"undefined\")}", ctx });
    	return block;
    }

    // (576:36) {#if auto.Year != null}
    function create_if_block_20(ctx) {
    	var t_value = ctx.auto.Year + "", t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t_value !== (t_value = ctx.auto.Year + "")) {
    				set_data_dev(t, t_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(t);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_20.name, type: "if", source: "(576:36) {#if auto.Year != null}", ctx });
    	return block;
    }

    // (590:32) {:else}
    function create_else_block_13(ctx) {
    	var img, img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "class", "image svelte-1k6i1cn");
    			attr_dev(img, "src", img_src_value = ctx.auto.Images[0]);
    			attr_dev(img, "alt", "Image");
    			add_location(img, file$b, 590, 36, 20521);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && img_src_value !== (img_src_value = ctx.auto.Images[0])) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_13.name, type: "else", source: "(590:32) {:else}", ctx });
    	return block;
    }

    // (588:32) {#if url == "https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg"}
    function create_if_block_19(ctx) {
    	var img;

    	const block = {
    		c: function create() {
    			img = element("img");
    			set_style(img, "width", "75%");
    			set_style(img, "height", "75%");
    			set_style(img, "margin-left", "12.5%");
    			attr_dev(img, "src", ctx.url);
    			attr_dev(img, "alt", "Image");
    			attr_dev(img, "class", "svelte-1k6i1cn");
    			add_location(img, file$b, 588, 36, 20366);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.url) {
    				attr_dev(img, "src", ctx.url);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_19.name, type: "if", source: "(588:32) {#if url == \"https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg\"}", ctx });
    	return block;
    }

    // (609:28) {:else}
    function create_else_block_12(ctx) {
    	var span0, t_1, span1, b;

    	const block = {
    		c: function create() {
    			span0 = element("span");
    			span0.textContent = "Final Bid";
    			t_1 = space();
    			span1 = element("span");
    			b = element("b");
    			b.textContent = "Pending";
    			attr_dev(span0, "class", "label svelte-1k6i1cn");
    			add_location(span0, file$b, 609, 32, 21490);
    			attr_dev(b, "class", "svelte-1k6i1cn");
    			add_location(b, file$b, 610, 55, 21582);
    			attr_dev(span1, "class", "labelVal svelte-1k6i1cn");
    			add_location(span1, file$b, 610, 32, 21559);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span0, anchor);
    			insert_dev(target, t_1, anchor);
    			insert_dev(target, span1, anchor);
    			append_dev(span1, b);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span0);
    				detach_dev(t_1);
    				detach_dev(span1);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_12.name, type: "else", source: "(609:28) {:else}", ctx });
    	return block;
    }

    // (606:28) {#if price != null}
    function create_if_block_18(ctx) {
    	var span0, t1, span1, b, t2, t3_value = convertToCurrency(ctx.auto.Price) + "", t3;

    	const block = {
    		c: function create() {
    			span0 = element("span");
    			span0.textContent = "Final Bid";
    			t1 = space();
    			span1 = element("span");
    			b = element("b");
    			t2 = text("$");
    			t3 = text(t3_value);
    			attr_dev(span0, "class", "label svelte-1k6i1cn");
    			add_location(span0, file$b, 606, 32, 21263);
    			attr_dev(b, "class", "svelte-1k6i1cn");
    			add_location(b, file$b, 607, 75, 21375);
    			attr_dev(span1, "class", "labelVal svelte-1k6i1cn");
    			set_style(span1, "color", "green");
    			add_location(span1, file$b, 607, 32, 21332);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, span1, anchor);
    			append_dev(span1, b);
    			append_dev(b, t2);
    			append_dev(b, t3);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t3_value !== (t3_value = convertToCurrency(ctx.auto.Price) + "")) {
    				set_data_dev(t3, t3_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span0);
    				detach_dev(t1);
    				detach_dev(span1);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_18.name, type: "if", source: "(606:28) {#if price != null}", ctx });
    	return block;
    }

    // (569:12) {#each analytics.listGarage as auto}
    function create_each_block_2$1(ctx) {
    	var table, tr0, td0, div0, span0, b0, t0, t1_value = ctx.auto.Model + "", t1, t2, tr1, td1, div1, t3, td2, span1, t5, span2, b1, t6_value = ctx.auto.VIN + "", t6, t7, span3, t9, span4, b2, t10_value = ctx.auto.CYL + "", t10, t11, span5, t13, span6, b3, t14_value = ctx.auto.Status + "", t14, t15, td3, t16, span7, t18, span8, b4, t19_value = ctx.auto.Mileage + "", t19, t20, t21, span9, t23, span10, b5, t24_value = ctx.auto.Date + "", t24, t25, tr2, td4, button0, i0, t26, t27, button1, i1, t28, dispose;

    	var if_block0 = (ctx.auto.Year != null) && create_if_block_20(ctx);

    	function select_block_type_11(changed, ctx) {
    		if (ctx.url == "https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg") return create_if_block_19;
    		return create_else_block_13;
    	}

    	var current_block_type = select_block_type_11(null, ctx);
    	var if_block1 = current_block_type(ctx);

    	function select_block_type_12(changed, ctx) {
    		if (ctx.price != null) return create_if_block_18;
    		return create_else_block_12;
    	}

    	var current_block_type_1 = select_block_type_12(null, ctx);
    	var if_block2 = current_block_type_1(ctx);

    	function click_handler_14() {
    		return ctx.click_handler_14(ctx);
    	}

    	function click_handler_15() {
    		return ctx.click_handler_15(ctx);
    	}

    	const block = {
    		c: function create() {
    			table = element("table");
    			tr0 = element("tr");
    			td0 = element("td");
    			div0 = element("div");
    			span0 = element("span");
    			b0 = element("b");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			tr1 = element("tr");
    			td1 = element("td");
    			div1 = element("div");
    			if_block1.c();
    			t3 = space();
    			td2 = element("td");
    			span1 = element("span");
    			span1.textContent = "VIN";
    			t5 = space();
    			span2 = element("span");
    			b1 = element("b");
    			t6 = text(t6_value);
    			t7 = space();
    			span3 = element("span");
    			span3.textContent = "CYL";
    			t9 = space();
    			span4 = element("span");
    			b2 = element("b");
    			t10 = text(t10_value);
    			t11 = space();
    			span5 = element("span");
    			span5.textContent = "Status";
    			t13 = space();
    			span6 = element("span");
    			b3 = element("b");
    			t14 = text(t14_value);
    			t15 = space();
    			td3 = element("td");
    			if_block2.c();
    			t16 = space();
    			span7 = element("span");
    			span7.textContent = "Mileage";
    			t18 = space();
    			span8 = element("span");
    			b4 = element("b");
    			t19 = text(t19_value);
    			t20 = text(" km");
    			t21 = space();
    			span9 = element("span");
    			span9.textContent = "Date";
    			t23 = space();
    			span10 = element("span");
    			b5 = element("b");
    			t24 = text(t24_value);
    			t25 = space();
    			tr2 = element("tr");
    			td4 = element("td");
    			button0 = element("button");
    			i0 = element("i");
    			t26 = text(" Compare");
    			t27 = space();
    			button1 = element("button");
    			i1 = element("i");
    			t28 = text(" Add To Garage");
    			attr_dev(b0, "class", "svelte-1k6i1cn");
    			add_location(b0, file$b, 574, 36, 19717);
    			attr_dev(span0, "class", "svelte-1k6i1cn");
    			add_location(span0, file$b, 573, 32, 19674);
    			attr_dev(div0, "class", "title-inner svelte-1k6i1cn");
    			add_location(div0, file$b, 572, 28, 19615);
    			attr_dev(td0, "colspan", "3");
    			attr_dev(td0, "class", "title svelte-1k6i1cn");
    			add_location(td0, file$b, 571, 24, 19556);
    			attr_dev(tr0, "class", "svelte-1k6i1cn");
    			add_location(tr0, file$b, 570, 20, 19527);
    			attr_dev(div1, "class", "svelte-1k6i1cn");
    			add_location(div1, file$b, 586, 28, 20202);
    			set_style(td1, "width", "40%");
    			attr_dev(td1, "class", "svelte-1k6i1cn");
    			add_location(td1, file$b, 585, 24, 20151);
    			attr_dev(span1, "class", "label svelte-1k6i1cn");
    			add_location(span1, file$b, 595, 28, 20739);
    			attr_dev(b1, "class", "svelte-1k6i1cn");
    			add_location(b1, file$b, 596, 51, 20821);
    			attr_dev(span2, "class", "labelVal svelte-1k6i1cn");
    			add_location(span2, file$b, 596, 28, 20798);
    			attr_dev(span3, "class", "label svelte-1k6i1cn");
    			add_location(span3, file$b, 598, 28, 20875);
    			attr_dev(b2, "class", "svelte-1k6i1cn");
    			add_location(b2, file$b, 599, 51, 20957);
    			attr_dev(span4, "class", "labelVal svelte-1k6i1cn");
    			add_location(span4, file$b, 599, 28, 20934);
    			attr_dev(span5, "class", "label svelte-1k6i1cn");
    			add_location(span5, file$b, 601, 28, 21011);
    			attr_dev(b3, "class", "svelte-1k6i1cn");
    			add_location(b3, file$b, 602, 51, 21096);
    			attr_dev(span6, "class", "labelVal svelte-1k6i1cn");
    			add_location(span6, file$b, 602, 28, 21073);
    			attr_dev(td2, "class", "svelte-1k6i1cn");
    			add_location(td2, file$b, 594, 24, 20705);
    			attr_dev(span7, "class", "label svelte-1k6i1cn");
    			add_location(span7, file$b, 613, 28, 21667);
    			attr_dev(b4, "class", "svelte-1k6i1cn");
    			add_location(b4, file$b, 614, 51, 21753);
    			attr_dev(span8, "class", "labelVal svelte-1k6i1cn");
    			add_location(span8, file$b, 614, 28, 21730);
    			attr_dev(span9, "class", "label svelte-1k6i1cn");
    			add_location(span9, file$b, 616, 28, 21814);
    			attr_dev(b5, "class", "svelte-1k6i1cn");
    			add_location(b5, file$b, 617, 51, 21897);
    			attr_dev(span10, "class", "labelVal svelte-1k6i1cn");
    			add_location(span10, file$b, 617, 28, 21874);
    			attr_dev(td3, "class", "svelte-1k6i1cn");
    			add_location(td3, file$b, 604, 24, 21178);
    			attr_dev(tr1, "class", "svelte-1k6i1cn");
    			add_location(tr1, file$b, 584, 20, 20122);
    			attr_dev(i0, "class", "fa fa-balance-scale svelte-1k6i1cn");
    			add_location(i0, file$b, 622, 188, 22233);
    			attr_dev(button0, "id", "compare");
    			attr_dev(button0, "class", "btn btn-light btn-sm svelte-1k6i1cn");
    			set_style(button0, "width", "49.5%");
    			set_style(button0, "float", "left");
    			button0.disabled = ctx.addComapare;
    			add_location(button0, file$b, 622, 28, 22073);
    			attr_dev(i1, "class", "fa fa-plus svelte-1k6i1cn");
    			add_location(i1, file$b, 623, 159, 22445);
    			attr_dev(button1, "id", "garage");
    			attr_dev(button1, "class", "btn btn-light btn-sm svelte-1k6i1cn");
    			set_style(button1, "width", "49.5%");
    			set_style(button1, "float", "right");
    			add_location(button1, file$b, 623, 28, 22314);
    			attr_dev(td4, "colspan", "3");
    			attr_dev(td4, "class", "svelte-1k6i1cn");
    			add_location(td4, file$b, 621, 24, 22028);
    			attr_dev(tr2, "class", "svelte-1k6i1cn");
    			add_location(tr2, file$b, 620, 20, 21999);
    			attr_dev(table, "class", "analyticAutos svelte-1k6i1cn");
    			attr_dev(table, "cellpadding", "2");
    			attr_dev(table, "align", "center");
    			add_location(table, file$b, 569, 16, 19445);

    			dispose = [
    				listen_dev(button0, "click", click_handler_14),
    				listen_dev(button1, "click", click_handler_15)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, tr0);
    			append_dev(tr0, td0);
    			append_dev(td0, div0);
    			append_dev(div0, span0);
    			append_dev(span0, b0);
    			if (if_block0) if_block0.m(b0, null);
    			append_dev(b0, t0);
    			append_dev(b0, t1);
    			append_dev(table, t2);
    			append_dev(table, tr1);
    			append_dev(tr1, td1);
    			append_dev(td1, div1);
    			if_block1.m(div1, null);
    			append_dev(tr1, t3);
    			append_dev(tr1, td2);
    			append_dev(td2, span1);
    			append_dev(td2, t5);
    			append_dev(td2, span2);
    			append_dev(span2, b1);
    			append_dev(b1, t6);
    			append_dev(td2, t7);
    			append_dev(td2, span3);
    			append_dev(td2, t9);
    			append_dev(td2, span4);
    			append_dev(span4, b2);
    			append_dev(b2, t10);
    			append_dev(td2, t11);
    			append_dev(td2, span5);
    			append_dev(td2, t13);
    			append_dev(td2, span6);
    			append_dev(span6, b3);
    			append_dev(b3, t14);
    			append_dev(tr1, t15);
    			append_dev(tr1, td3);
    			if_block2.m(td3, null);
    			append_dev(td3, t16);
    			append_dev(td3, span7);
    			append_dev(td3, t18);
    			append_dev(td3, span8);
    			append_dev(span8, b4);
    			append_dev(b4, t19);
    			append_dev(b4, t20);
    			append_dev(td3, t21);
    			append_dev(td3, span9);
    			append_dev(td3, t23);
    			append_dev(td3, span10);
    			append_dev(span10, b5);
    			append_dev(b5, t24);
    			append_dev(table, t25);
    			append_dev(table, tr2);
    			append_dev(tr2, td4);
    			append_dev(td4, button0);
    			append_dev(button0, i0);
    			append_dev(button0, t26);
    			append_dev(td4, t27);
    			append_dev(td4, button1);
    			append_dev(button1, i1);
    			append_dev(button1, t28);
    		},

    		p: function update(changed, new_ctx) {
    			ctx = new_ctx;
    			if (ctx.auto.Year != null) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    				} else {
    					if_block0 = create_if_block_20(ctx);
    					if_block0.c();
    					if_block0.m(b0, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if ((changed.analytics) && t1_value !== (t1_value = ctx.auto.Model + "")) {
    				set_data_dev(t1, t1_value);
    			}

    			if (current_block_type === (current_block_type = select_block_type_11(changed, ctx)) && if_block1) {
    				if_block1.p(changed, ctx);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);
    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div1, null);
    				}
    			}

    			if ((changed.analytics) && t6_value !== (t6_value = ctx.auto.VIN + "")) {
    				set_data_dev(t6, t6_value);
    			}

    			if ((changed.analytics) && t10_value !== (t10_value = ctx.auto.CYL + "")) {
    				set_data_dev(t10, t10_value);
    			}

    			if ((changed.analytics) && t14_value !== (t14_value = ctx.auto.Status + "")) {
    				set_data_dev(t14, t14_value);
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_12(changed, ctx)) && if_block2) {
    				if_block2.p(changed, ctx);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type_1(ctx);
    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(td3, t16);
    				}
    			}

    			if ((changed.analytics) && t19_value !== (t19_value = ctx.auto.Mileage + "")) {
    				set_data_dev(t19, t19_value);
    			}

    			if ((changed.analytics) && t24_value !== (t24_value = ctx.auto.Date + "")) {
    				set_data_dev(t24, t24_value);
    			}

    			if (changed.addComapare) {
    				prop_dev(button0, "disabled", ctx.addComapare);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(table);
    			}

    			if (if_block0) if_block0.d();
    			if_block1.d();
    			if_block2.d();
    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_2$1.name, type: "each", source: "(569:12) {#each analytics.listGarage as auto}", ctx });
    	return block;
    }

    // (641:24) {:else}
    function create_else_block_11(ctx) {
    	var h6, t_value = ctx.analytics.count + "", t;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t = text(t_value);
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "right");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$b, 641, 28, 23337);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t_value !== (t_value = ctx.analytics.count + "")) {
    				set_data_dev(t, t_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_11.name, type: "else", source: "(641:24) {:else}", ctx });
    	return block;
    }

    // (639:24) {#if nullPrice}
    function create_if_block_17(ctx) {
    	var h6, t_value = ctx.analytics.count - 1 + "", t;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t = text(t_value);
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "right");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$b, 639, 28, 23182);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t_value !== (t_value = ctx.analytics.count - 1 + "")) {
    				set_data_dev(t, t_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_17.name, type: "if", source: "(639:24) {#if nullPrice}", ctx });
    	return block;
    }

    // (649:24) {:else}
    function create_else_block_10(ctx) {
    	var h6, t0, t1_value = convertToCurrency(ctx.analytics.minBid) + "", t1;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t0 = text("$");
    			t1 = text(t1_value);
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "right");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$b, 649, 28, 23871);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t0);
    			append_dev(h6, t1);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t1_value !== (t1_value = convertToCurrency(ctx.analytics.minBid) + "")) {
    				set_data_dev(t1, t1_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_10.name, type: "else", source: "(649:24) {:else}", ctx });
    	return block;
    }

    // (647:24) {#if analytics.minBid == 'Unavailable'}
    function create_if_block_16(ctx) {
    	var h6, t_value = ctx.analytics.minBid + "", t;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t = text(t_value);
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "right");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$b, 647, 28, 23718);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t_value !== (t_value = ctx.analytics.minBid + "")) {
    				set_data_dev(t, t_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_16.name, type: "if", source: "(647:24) {#if analytics.minBid == 'Unavailable'}", ctx });
    	return block;
    }

    // (658:24) {:else}
    function create_else_block_9(ctx) {
    	var h6, t0, t1_value = convertToCurrency(ctx.analytics.maxBid) + "", t1;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t0 = text("$");
    			t1 = text(t1_value);
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "right");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$b, 658, 28, 24428);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t0);
    			append_dev(h6, t1);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t1_value !== (t1_value = convertToCurrency(ctx.analytics.maxBid) + "")) {
    				set_data_dev(t1, t1_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_9.name, type: "else", source: "(658:24) {:else}", ctx });
    	return block;
    }

    // (656:24) {#if analytics.maxBid == 'Unavailable'}
    function create_if_block_15(ctx) {
    	var h6, t_value = ctx.analytics.maxBid + "", t;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t = text(t_value);
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "right");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$b, 656, 28, 24275);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t_value !== (t_value = ctx.analytics.maxBid + "")) {
    				set_data_dev(t, t_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_15.name, type: "if", source: "(656:24) {#if analytics.maxBid == 'Unavailable'}", ctx });
    	return block;
    }

    // (667:24) {:else}
    function create_else_block_8(ctx) {
    	var h6, t0, t1_value = convertToCurrency(ctx.analytics.avgBidPrice) + "", t1;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t0 = text("$");
    			t1 = text(t1_value);
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "right");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$b, 667, 28, 25058);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t0);
    			append_dev(h6, t1);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t1_value !== (t1_value = convertToCurrency(ctx.analytics.avgBidPrice) + "")) {
    				set_data_dev(t1, t1_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_8.name, type: "else", source: "(667:24) {:else}", ctx });
    	return block;
    }

    // (665:24) {#if analytics.avgBidPrice == 'Unavailable'}
    function create_if_block_14(ctx) {
    	var h6, t_value = ctx.analytics.avgBidPrice + "", t;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t = text(t_value);
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "right");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$b, 665, 28, 24900);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t_value !== (t_value = ctx.analytics.avgBidPrice + "")) {
    				set_data_dev(t, t_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_14.name, type: "if", source: "(665:24) {#if analytics.avgBidPrice == 'Unavailable'}", ctx });
    	return block;
    }

    // (680:24) {:else}
    function create_else_block_6(ctx) {
    	var h6, t_1, if_block_anchor;

    	function select_block_type_19(changed, ctx) {
    		if (ctx.analytics.avgSalePrice == 'Unavailable') return create_if_block_13;
    		return create_else_block_7;
    	}

    	var current_block_type = select_block_type_19(null, ctx);
    	var if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			h6.textContent = "Avg. Related Final Bids";
    			t_1 = space();
    			if_block.c();
    			if_block_anchor = empty();
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "left");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			set_style(h6, "font-weight", "normal");
    			add_location(h6, file$b, 680, 28, 25905);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			insert_dev(target, t_1, anchor);
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (current_block_type === (current_block_type = select_block_type_19(changed, ctx)) && if_block) {
    				if_block.p(changed, ctx);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);
    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    				detach_dev(t_1);
    			}

    			if_block.d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_6.name, type: "else", source: "(680:24) {:else}", ctx });
    	return block;
    }

    // (673:24) {#if nullPrice}
    function create_if_block_11(ctx) {
    	var h6, t_1, if_block_anchor;

    	function select_block_type_18(changed, ctx) {
    		if (ctx.analytics.avgSalePrice == 'Unavailable') return create_if_block_12;
    		return create_else_block_5;
    	}

    	var current_block_type = select_block_type_18(null, ctx);
    	var if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			h6.textContent = "Est. Final Bid";
    			t_1 = space();
    			if_block.c();
    			if_block_anchor = empty();
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "left");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			set_style(h6, "font-weight", "normal");
    			add_location(h6, file$b, 673, 28, 25313);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			insert_dev(target, t_1, anchor);
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (current_block_type === (current_block_type = select_block_type_18(changed, ctx)) && if_block) {
    				if_block.p(changed, ctx);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);
    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    				detach_dev(t_1);
    			}

    			if_block.d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_11.name, type: "if", source: "(673:24) {#if nullPrice}", ctx });
    	return block;
    }

    // (684:28) {:else}
    function create_else_block_7(ctx) {
    	var h6, t0, t1_value = convertToCurrency(ctx.analytics.avgSalePrice) + "", t1;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t0 = text("$");
    			t1 = text(t1_value);
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "right");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$b, 684, 32, 26294);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t0);
    			append_dev(h6, t1);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t1_value !== (t1_value = convertToCurrency(ctx.analytics.avgSalePrice) + "")) {
    				set_data_dev(t1, t1_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_7.name, type: "else", source: "(684:28) {:else}", ctx });
    	return block;
    }

    // (682:28) {#if analytics.avgSalePrice == 'Unavailable'}
    function create_if_block_13(ctx) {
    	var h6, t_value = ctx.analytics.avgSalePrice + "", t;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t = text(t_value);
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "right");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$b, 682, 32, 26127);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t_value !== (t_value = ctx.analytics.avgSalePrice + "")) {
    				set_data_dev(t, t_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_13.name, type: "if", source: "(682:28) {#if analytics.avgSalePrice == 'Unavailable'}", ctx });
    	return block;
    }

    // (677:28) {:else}
    function create_else_block_5(ctx) {
    	var h6, t0, t1_value = convertToCurrency(ctx.analytics.avgSalePrice) + "", t1;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t0 = text("$");
    			t1 = text(t1_value);
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "right");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$b, 677, 32, 25692);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t0);
    			append_dev(h6, t1);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t1_value !== (t1_value = convertToCurrency(ctx.analytics.avgSalePrice) + "")) {
    				set_data_dev(t1, t1_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_5.name, type: "else", source: "(677:28) {:else}", ctx });
    	return block;
    }

    // (675:28) {#if analytics.avgSalePrice == 'Unavailable'}
    function create_if_block_12(ctx) {
    	var h6, t_value = ctx.analytics.avgSalePrice + "", t;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t = text(t_value);
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "right");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$b, 675, 32, 25525);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t_value !== (t_value = ctx.analytics.avgSalePrice + "")) {
    				set_data_dev(t, t_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_12.name, type: "if", source: "(675:28) {#if analytics.avgSalePrice == 'Unavailable'}", ctx });
    	return block;
    }

    // (694:24) {:else}
    function create_else_block_4$1(ctx) {
    	var h6, t0, t1_value = convertToCurrency(ctx.analytics.extData) + "", t1;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t0 = text("$");
    			t1 = text(t1_value);
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "right");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			set_style(h6, "color", "green");
    			add_location(h6, file$b, 694, 28, 26891);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t0);
    			append_dev(h6, t1);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t1_value !== (t1_value = convertToCurrency(ctx.analytics.extData) + "")) {
    				set_data_dev(t1, t1_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_4$1.name, type: "else", source: "(694:24) {:else}", ctx });
    	return block;
    }

    // (692:24) {#if analytics.extData == 'Unavailable'}
    function create_if_block_10$1(ctx) {
    	var h6, t_value = ctx.analytics.extData + "", t;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t = text(t_value);
    			attr_dev(h6, "class", "details svelte-1k6i1cn");
    			set_style(h6, "float", "right");
    			set_style(h6, "width", "50%");
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$b, 692, 28, 26737);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t_value !== (t_value = ctx.analytics.extData + "")) {
    				set_data_dev(t, t_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_10$1.name, type: "if", source: "(692:24) {#if analytics.extData == 'Unavailable'}", ctx });
    	return block;
    }

    // (701:12) {#if screenWidth <= 1024}
    function create_if_block_9$1(ctx) {
    	var table, tr, td;

    	const block = {
    		c: function create() {
    			table = element("table");
    			tr = element("tr");
    			td = element("td");
    			attr_dev(td, "class", "svelte-1k6i1cn");
    			add_location(td, file$b, 703, 24, 27261);
    			attr_dev(tr, "class", "svelte-1k6i1cn");
    			add_location(tr, file$b, 702, 20, 27232);
    			set_style(table, "width", "100%");
    			set_style(table, "height", "100px");
    			attr_dev(table, "class", "svelte-1k6i1cn");
    			add_location(table, file$b, 701, 16, 27171);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, tr);
    			append_dev(tr, td);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(table);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_9$1.name, type: "if", source: "(701:12) {#if screenWidth <= 1024}", ctx });
    	return block;
    }

    // (713:8) {#if screenWidth <= 1024}
    function create_if_block_6$1(ctx) {
    	var button0, t1, button1, i_1, t2, dispose;

    	const block = {
    		c: function create() {
    			button0 = element("button");
    			button0.textContent = "Close";
    			t1 = space();
    			button1 = element("button");
    			i_1 = element("i");
    			t2 = text(" View Analytics");
    			attr_dev(button0, "id", "closeAnalytics");
    			attr_dev(button0, "class", "btn btn-danger btn-sm svelte-1k6i1cn");
    			set_style(button0, "float", "right");
    			set_style(button0, "margin-top", "10px");
    			set_style(button0, "font-size", "20px");
    			add_location(button0, file$b, 713, 12, 27489);
    			attr_dev(i_1, "class", "fa fa-arrow-left svelte-1k6i1cn");
    			add_location(i_1, file$b, 714, 148, 27803);
    			attr_dev(button1, "id", "closeAnalytics");
    			attr_dev(button1, "class", "btn btn-dark btn-sm svelte-1k6i1cn");
    			set_style(button1, "float", "left");
    			set_style(button1, "margin-top", "10px");
    			set_style(button1, "font-size", "20px");
    			add_location(button1, file$b, 714, 12, 27667);

    			dispose = [
    				listen_dev(button0, "click", ctx.click_handler_16),
    				listen_dev(button1, "click", toggleAnalytics)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button1, anchor);
    			append_dev(button1, i_1);
    			append_dev(button1, t2);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button0);
    				detach_dev(t1);
    				detach_dev(button1);
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_6$1.name, type: "if", source: "(713:8) {#if screenWidth <= 1024}", ctx });
    	return block;
    }

    // (725:8) {:else}
    function create_else_block$4(ctx) {
    	var div_1, t;

    	let each_value_1 = ctx.analytics.comments;

    	let each_blocks = [];

    	for (let i_1 = 0; i_1 < each_value_1.length; i_1 += 1) {
    		each_blocks[i_1] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i_1));
    	}

    	var if_block = (ctx.garResults.length > 0 && ctx.userComment.length > 0) && create_if_block_3$3(ctx);

    	const block = {
    		c: function create() {
    			div_1 = element("div");

    			for (let i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
    				each_blocks[i_1].c();
    			}

    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(div_1, "class", "scrollable svelte-1k6i1cn");
    			add_location(div_1, file$b, 725, 12, 28391);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div_1, anchor);

    			for (let i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
    				each_blocks[i_1].m(div_1, null);
    			}

    			append_dev(div_1, t);
    			if (if_block) if_block.m(div_1, null);
    			ctx.div_1_binding(div_1);
    		},

    		p: function update(changed, ctx) {
    			if (changed.analytics || changed.$acctTab || changed.getTimeSpan) {
    				each_value_1 = ctx.analytics.comments;

    				let i_1;
    				for (i_1 = 0; i_1 < each_value_1.length; i_1 += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i_1);

    					if (each_blocks[i_1]) {
    						each_blocks[i_1].p(changed, child_ctx);
    					} else {
    						each_blocks[i_1] = create_each_block_1$1(child_ctx);
    						each_blocks[i_1].c();
    						each_blocks[i_1].m(div_1, t);
    					}
    				}

    				for (; i_1 < each_blocks.length; i_1 += 1) {
    					each_blocks[i_1].d(1);
    				}
    				each_blocks.length = each_value_1.length;
    			}

    			if (ctx.garResults.length > 0 && ctx.userComment.length > 0) {
    				if (if_block) {
    					if_block.p(changed, ctx);
    				} else {
    					if_block = create_if_block_3$3(ctx);
    					if_block.c();
    					if_block.m(div_1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div_1);
    			}

    			destroy_each(each_blocks, detaching);

    			if (if_block) if_block.d();
    			ctx.div_1_binding(null);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$4.name, type: "else", source: "(725:8) {:else}", ctx });
    	return block;
    }

    // (723:45) 
    function create_if_block_2$4(ctx) {
    	var h5;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			h5.textContent = "No Comments For This Vehicle";
    			set_style(h5, "text-align", "center");
    			set_style(h5, "margin-top", "50%");
    			attr_dev(h5, "class", "svelte-1k6i1cn");
    			add_location(h5, file$b, 723, 12, 28283);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h5);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$4.name, type: "if", source: "(723:45) ", ctx });
    	return block;
    }

    // (718:8) {#if analyticErr == false && (analytics == null || analytics == undefined)}
    function create_if_block_1$4(ctx) {
    	var div_1, img, t, h6;

    	const block = {
    		c: function create() {
    			div_1 = element("div");
    			img = element("img");
    			t = space();
    			h6 = element("h6");
    			h6.textContent = "Loading...";
    			attr_dev(img, "src", "https://autoarch.blob.core.windows.net/resources/loader.gif");
    			attr_dev(img, "alt", "Loader");
    			attr_dev(img, "class", "svelte-1k6i1cn");
    			add_location(img, file$b, 719, 16, 28061);
    			attr_dev(div_1, "class", "text-center svelte-1k6i1cn");
    			add_location(div_1, file$b, 718, 12, 28019);
    			set_style(h6, "text-align", "center");
    			attr_dev(h6, "class", "svelte-1k6i1cn");
    			add_location(h6, file$b, 721, 12, 28178);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div_1, anchor);
    			append_dev(div_1, img);
    			insert_dev(target, t, anchor);
    			insert_dev(target, h6, anchor);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div_1);
    				detach_dev(t);
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$4.name, type: "if", source: "(718:8) {#if analyticErr == false && (analytics == null || analytics == undefined)}", ctx });
    	return block;
    }

    // (733:20) {:else}
    function create_else_block_1$3(ctx) {
    	var article, t0, p, t1_value = ctx.comment.name + "", t1, t2, t3_value = getTimeSpan(ctx.comment.date) + "", t3;

    	function select_block_type_23(changed, ctx) {
    		if (typeof ctx.comment.autoID == "undefined") return create_if_block_5$1;
    		return create_else_block_2$2;
    	}

    	var current_block_type = select_block_type_23(null, ctx);
    	var if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			article = element("article");
    			if_block.c();
    			t0 = space();
    			p = element("p");
    			t1 = text(t1_value);
    			t2 = space();
    			t3 = text(t3_value);
    			set_style(p, "font-size", "10px");
    			attr_dev(p, "class", "svelte-1k6i1cn");
    			add_location(p, file$b, 739, 28, 29275);
    			attr_dev(article, "class", "odaUser svelte-1k6i1cn");
    			add_location(article, file$b, 733, 24, 28845);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, article, anchor);
    			if_block.m(article, null);
    			append_dev(article, t0);
    			append_dev(article, p);
    			append_dev(p, t1);
    			append_dev(p, t2);
    			append_dev(p, t3);
    		},

    		p: function update(changed, ctx) {
    			if (current_block_type === (current_block_type = select_block_type_23(changed, ctx)) && if_block) {
    				if_block.p(changed, ctx);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);
    				if (if_block) {
    					if_block.c();
    					if_block.m(article, t0);
    				}
    			}

    			if ((changed.analytics) && t1_value !== (t1_value = ctx.comment.name + "")) {
    				set_data_dev(t1, t1_value);
    			}

    			if ((changed.analytics) && t3_value !== (t3_value = getTimeSpan(ctx.comment.date) + "")) {
    				set_data_dev(t3, t3_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(article);
    			}

    			if_block.d();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_1$3.name, type: "else", source: "(733:20) {:else}", ctx });
    	return block;
    }

    // (728:20) {#if comment.userID == $acctTab.uuid}
    function create_if_block_4$2(ctx) {
    	var article, span, t0_value = ctx.comment.text + "", t0, t1, p, t2, t3_value = getTimeSpan(ctx.comment.date) + "", t3;

    	const block = {
    		c: function create() {
    			article = element("article");
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			p = element("p");
    			t2 = text("Me ");
    			t3 = text(t3_value);
    			attr_dev(span, "class", "textCom svelte-1k6i1cn");
    			add_location(span, file$b, 729, 28, 28624);
    			set_style(p, "font-size", "10px");
    			attr_dev(p, "class", "svelte-1k6i1cn");
    			add_location(p, file$b, 730, 28, 28696);
    			attr_dev(article, "class", "curUser svelte-1k6i1cn");
    			add_location(article, file$b, 728, 24, 28570);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, article, anchor);
    			append_dev(article, span);
    			append_dev(span, t0);
    			append_dev(article, t1);
    			append_dev(article, p);
    			append_dev(p, t2);
    			append_dev(p, t3);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t0_value !== (t0_value = ctx.comment.text + "")) {
    				set_data_dev(t0, t0_value);
    			}

    			if ((changed.analytics) && t3_value !== (t3_value = getTimeSpan(ctx.comment.date) + "")) {
    				set_data_dev(t3, t3_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(article);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_4$2.name, type: "if", source: "(728:20) {#if comment.userID == $acctTab.uuid}", ctx });
    	return block;
    }

    // (737:28) {:else}
    function create_else_block_2$2(ctx) {
    	var span, t_value = ctx.comment.text + "", t, dispose;

    	function click_handler_17() {
    		return ctx.click_handler_17(ctx);
    	}

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "class", "textShare svelte-1k6i1cn");
    			set_style(span, "cursor", "pointer");
    			add_location(span, file$b, 737, 32, 29086);
    			dispose = listen_dev(span, "click", click_handler_17);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},

    		p: function update(changed, new_ctx) {
    			ctx = new_ctx;
    			if ((changed.analytics) && t_value !== (t_value = ctx.comment.text + "")) {
    				set_data_dev(t, t_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_2$2.name, type: "else", source: "(737:28) {:else}", ctx });
    	return block;
    }

    // (735:28) {#if typeof comment.autoID == "undefined"}
    function create_if_block_5$1(ctx) {
    	var span, t_value = ctx.comment.text + "", t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "class", "textCom svelte-1k6i1cn");
    			add_location(span, file$b, 735, 32, 28974);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},

    		p: function update(changed, ctx) {
    			if ((changed.analytics) && t_value !== (t_value = ctx.comment.text + "")) {
    				set_data_dev(t, t_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_5$1.name, type: "if", source: "(735:28) {#if typeof comment.autoID == \"undefined\"}", ctx });
    	return block;
    }

    // (727:16) {#each analytics.comments as comment}
    function create_each_block_1$1(ctx) {
    	var if_block_anchor;

    	function select_block_type_22(changed, ctx) {
    		if (ctx.comment.userID == ctx.$acctTab.uuid) return create_if_block_4$2;
    		return create_else_block_1$3;
    	}

    	var current_block_type = select_block_type_22(null, ctx);
    	var if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (current_block_type === (current_block_type = select_block_type_22(changed, ctx)) && if_block) {
    				if_block.p(changed, ctx);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);
    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},

    		d: function destroy(detaching) {
    			if_block.d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_1$1.name, type: "each", source: "(727:16) {#each analytics.comments as comment}", ctx });
    	return block;
    }

    // (744:16) {#if garResults.length > 0 && userComment.length > 0}
    function create_if_block_3$3(ctx) {
    	var h6, t_1, each_1_anchor;

    	let each_value = ctx.garResults;

    	let each_blocks = [];

    	for (let i_1 = 0; i_1 < each_value.length; i_1 += 1) {
    		each_blocks[i_1] = create_each_block$1(get_each_context$1(ctx, each_value, i_1));
    	}

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			h6.textContent = "Garage Results";
    			t_1 = space();

    			for (let i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
    				each_blocks[i_1].c();
    			}

    			each_1_anchor = empty();
    			set_style(h6, "text-align", "center");
    			attr_dev(h6, "class", "svelte-1k6i1cn");
    			add_location(h6, file$b, 744, 20, 29524);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			insert_dev(target, t_1, anchor);

    			for (let i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
    				each_blocks[i_1].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.garResults) {
    				each_value = ctx.garResults;

    				let i_1;
    				for (i_1 = 0; i_1 < each_value.length; i_1 += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i_1);

    					if (each_blocks[i_1]) {
    						each_blocks[i_1].p(changed, child_ctx);
    					} else {
    						each_blocks[i_1] = create_each_block$1(child_ctx);
    						each_blocks[i_1].c();
    						each_blocks[i_1].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i_1 < each_blocks.length; i_1 += 1) {
    					each_blocks[i_1].d(1);
    				}
    				each_blocks.length = each_value.length;
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    				detach_dev(t_1);
    			}

    			destroy_each(each_blocks, detaching);

    			if (detaching) {
    				detach_dev(each_1_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_3$3.name, type: "if", source: "(744:16) {#if garResults.length > 0 && userComment.length > 0}", ctx });
    	return block;
    }

    // (746:20) {#each garResults as auto}
    function create_each_block$1(ctx) {
    	var div_1, p, t0_value = ctx.auto.Year + "", t0, t1, t2_value = ctx.auto.Model + "", t2, t3, button, i_1, t4, t5, dispose;

    	function click_handler_18() {
    		return ctx.click_handler_18(ctx);
    	}

    	const block = {
    		c: function create() {
    			div_1 = element("div");
    			p = element("p");
    			t0 = text(t0_value);
    			t1 = space();
    			t2 = text(t2_value);
    			t3 = space();
    			button = element("button");
    			i_1 = element("i");
    			t4 = text(" Share");
    			t5 = space();
    			set_style(p, "float", "left");
    			attr_dev(p, "class", "svelte-1k6i1cn");
    			add_location(p, file$b, 747, 28, 29716);
    			attr_dev(i_1, "class", "fa fa-share-alt svelte-1k6i1cn");
    			add_location(i_1, file$b, 748, 150, 29918);
    			attr_dev(button, "class", "btn btn-info btn-sm svelte-1k6i1cn");
    			set_style(button, "float", "right");
    			add_location(button, file$b, 748, 28, 29796);
    			set_style(div_1, "padding", "5px");
    			set_style(div_1, "margin-top", "5px");
    			attr_dev(div_1, "class", "svelte-1k6i1cn");
    			add_location(div_1, file$b, 746, 24, 29646);
    			dispose = listen_dev(button, "click", click_handler_18);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div_1, anchor);
    			append_dev(div_1, p);
    			append_dev(p, t0);
    			append_dev(p, t1);
    			append_dev(p, t2);
    			append_dev(div_1, t3);
    			append_dev(div_1, button);
    			append_dev(button, i_1);
    			append_dev(button, t4);
    			append_dev(div_1, t5);
    		},

    		p: function update(changed, new_ctx) {
    			ctx = new_ctx;
    			if ((changed.garResults) && t0_value !== (t0_value = ctx.auto.Year + "")) {
    				set_data_dev(t0, t0_value);
    			}

    			if ((changed.garResults) && t2_value !== (t2_value = ctx.auto.Model + "")) {
    				set_data_dev(t2, t2_value);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div_1);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block$1.name, type: "each", source: "(746:20) {#each garResults as auto}", ctx });
    	return block;
    }

    function create_fragment$c(ctx) {
    	var t0, t1, t2, if_block3_anchor, current;

    	var if_block0 = (ctx.showMsg) && create_if_block_38(ctx);

    	function select_block_type(changed, ctx) {
    		if (ctx.$tabIndex == 2 && ctx.$garageIndex == 1) return create_if_block_25;
    		return create_else_block_17;
    	}

    	var current_block_type = select_block_type(null, ctx);
    	var if_block1 = current_block_type(ctx);

    	var if_block2 = (ctx.viewImages) && create_if_block_23(ctx);

    	var if_block3 = (ctx.viewAnalytics) && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			if_block3_anchor = empty();
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, if_block3_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (ctx.showMsg) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    					transition_in(if_block0, 1);
    				} else {
    					if_block0 = create_if_block_38(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();
    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});
    				check_outros();
    			}

    			if (current_block_type === (current_block_type = select_block_type(changed, ctx)) && if_block1) {
    				if_block1.p(changed, ctx);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);
    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			}

    			if (ctx.viewImages) {
    				if (if_block2) {
    					if_block2.p(changed, ctx);
    					transition_in(if_block2, 1);
    				} else {
    					if_block2 = create_if_block_23(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				group_outros();
    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});
    				check_outros();
    			}

    			if (ctx.viewAnalytics) {
    				if (if_block3) {
    					if_block3.p(changed, ctx);
    					transition_in(if_block3, 1);
    				} else {
    					if_block3 = create_if_block$5(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
    				}
    			} else if (if_block3) {
    				group_outros();
    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});
    				check_outros();
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);

    			if (detaching) {
    				detach_dev(t0);
    			}

    			if_block1.d(detaching);

    			if (detaching) {
    				detach_dev(t1);
    			}

    			if (if_block2) if_block2.d(detaching);

    			if (detaching) {
    				detach_dev(t2);
    			}

    			if (if_block3) if_block3.d(detaching);

    			if (detaching) {
    				detach_dev(if_block3_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$c.name, type: "component", source: "", ctx });
    	return block;
    }

    function toggleComments() {
        document.documentElement.style.setProperty('--view-comments', 'block');
        document.documentElement.style.setProperty('--view-analytic', 'none');
    }

    function toggleAnalytics() {
        document.documentElement.style.setProperty('--view-comments', 'none');
        document.documentElement.style.setProperty('--view-analytic', 'block');
    }

    function getTimeSpan(date) {
        return moment(date, "YYYYMMDD, HH:mm").fromNow();
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let $garageTab, $acctTab, $tabIndex, $garageIndex;

    	validate_store(garageTab, 'garageTab');
    	component_subscribe($$self, garageTab, $$value => { $garageTab = $$value; $$invalidate('$garageTab', $garageTab); });
    	validate_store(acctTab$1, 'acctTab');
    	component_subscribe($$self, acctTab$1, $$value => { $acctTab = $$value; $$invalidate('$acctTab', $acctTab); });
    	validate_store(tabIndex, 'tabIndex');
    	component_subscribe($$self, tabIndex, $$value => { $tabIndex = $$value; $$invalidate('$tabIndex', $tabIndex); });
    	validate_store(garageIndex, 'garageIndex');
    	component_subscribe($$self, garageIndex, $$value => { $garageIndex = $$value; $$invalidate('$garageIndex', $garageIndex); });

    	

        let div, autoscroll;

        let { id, year, model, url, vin, cyl, status, price, mileage, date, images } = $$props; 

        let Payload;

        let showMsg = false, heading = '', message = '', statusColor = ''; 

        let ratio = screen.width / screen.height;

        let addComapare = $garageTab.compare.length == 7 ? true : false;

        document.documentElement.style.setProperty('--msg-color', statusColor);

        let viewAnalytics = false, analytics, currModel, currYear, nullPrice = false, xValues = [], yValues = [], analyticErr = false;
        
        let userComment;

        let i = 0;

        let viewImages = false, currImage = images != undefined ? images[i] : [];

        setInterval(function() {
            $$invalidate('addComapare', addComapare = $garageTab.compare.length == 7 ? true : false);
        }, 1);

        let screenWidth = screen.width;

        let leftMarginMob = (screen.width - 500) / 2;

        let marginLeftMob = (screen.width - 350) / 2;

        let garResults = [];

        document.documentElement.style.setProperty('--left-margin-mob', leftMarginMob + 'px');

        document.documentElement.style.setProperty('--margin-left-mob', marginLeftMob + 'px');

        if(ratio > 1.6) {
            document.documentElement.style.setProperty('--left-margin', '4.5%');
        }
        if(ratio < 1.6) {
            document.documentElement.style.setProperty('--left-margin', '8.5%');
        }
        if(ratio == 1.6) {
            document.documentElement.style.setProperty('--left-margin', '6.5%');
        }

        function checkExist(id, garType) {

            if(garType == 'owned'){

                if($garageTab.owned.length > 0) {

                    for(let i = 0; i < $garageTab.owned.length; i++) {

                        if($garageTab.owned[i].id == id)
                            return true

                    }

                    return false;

                }
                else 
                    return false;
                
            }

            if(garType == 'comapare'){

                if($garageTab.compare.length > 0) {

                    for(let i = 0; i < $garageTab.compare.length; i++) {

                        if($garageTab.compare[i].id == id)
                            return true;

                    }

                    return false;

                }
                else 
                    return false;
                
            }

            if(garType == 'shared') {

                if($garageTab.shared.length > 0) {

                    for(let i = 0; i < $garageTab.shared.length; i++) {

                        if($garageTab.shared[i].id == id)
                            return true;

                    }

                    return false;

                }
                else 
                    return false;
            }
        }

        function addToGarage(id, garType) {

            if(!checkExist(id, garType)) {

                Payload = { 
                    func : 'addToGarage',
                    map : garType, 
                    ID : id,
                    uuid : $acctTab.uuid,
                };

                invokeLambda(env.lambda.pythonAPI, Payload).then((response) => {

                    console.log(response);

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Success!'), $$invalidate('message', message = 'Vehicle Added To Garage'), $$invalidate('statusColor', statusColor = 'green'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                    updateGarage(response);

                }).catch((err) => {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Garage'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                });

            }
            else {

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Garage'), $$invalidate('message', message = "This Vehicle Already Exist In Your Garage"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            }
        }

        function removeAuto(id, garType) {

            Payload = { 
                func : 'removeAuto',
                map : garType, 
                ID : id,
                uuid : $acctTab.uuid,
            };

            invokeLambda(env.lambda.pythonAPI, Payload).then((response) => {

                console.log(response);

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Success!'), $$invalidate('message', message = 'Vehicle Removed From Garage'), $$invalidate('statusColor', statusColor = 'green'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

                updateGarage(response);

            }).catch((err) => {

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Garage'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            });
        }

        function Analytics(vin, model, year) {

            $$invalidate('viewAnalytics', viewAnalytics = true);

            $$invalidate('currModel', currModel = model), $$invalidate('currYear', currYear = year);

            Payload = { 
                func : 'getAnalytics',
                vin : vin, 
                model : model,
                year : year,
            };

            invokeLambda(env.lambda.pythonAPI, Payload).then((response) => {

                if(response.count != undefined) {
                    $$invalidate('analytics', analytics = response);

                    let listGarage = response.listGarage;

                    let listChart = response.listChart;

                    for(let i = 0; i < listGarage.length; i++)
                        if(listGarage[i].Price == null)
                            $$invalidate('nullPrice', nullPrice = true);

                    for(let i = 0; i < listChart.length; i++) {
                        xValues.push(listChart[i].Date); 
                        yValues.push(listChart[i].Price);
                    }

                    autoscroll = div && (div.offsetHeight + div.scrollTop) > (div.scrollHeight - 20);
                }
                else {
                    console.log(response);
                    $$invalidate('analyticErr', analyticErr = true);
                }

            }).catch((err) => {

                console.log(err);

                $$invalidate('analyticErr', analyticErr = true);

            });
        }

        document.documentElement.style.setProperty('--view-comments', 'none');
        document.documentElement.style.setProperty('--view-analytic', 'block');

        function shareVehicle(id, year, model) {

            console.log(id);

            Payload = { 
                func : 'shareVehicle',
                autoID : id,
                userID : $acctTab.uuid,
                name : $acctTab.name,
                vin : vin,
                date : moment().format("YYYYMMDD, HH:mm"),
                text : year + ' ' + model
            };

            invokeLambda(env.lambda.pythonAPI, Payload).then((response) => {

                console.log(response);

                $$invalidate('analytics', analytics.comments = response, analytics);

                $$invalidate('userComment', userComment = '');

            }).catch((err) => {

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Comments'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            });
        }

        function postComment() {

            if(userComment != '') {

                Payload = { 
                    func : 'postComment',
                    vin : vin, 
                    name : $acctTab.name,
                    userID : $acctTab.uuid,
                    date : moment().format("YYYYMMDD, HH:mm"),
                    text : userComment
                };

                if (autoscroll) div.scrollTo(0, div.scrollHeight);

                invokeLambda(env.lambda.pythonAPI, Payload).then((response) => {

                    console.log(response);

                    $$invalidate('analytics', analytics.comments = response, analytics);

                    $$invalidate('userComment', userComment = '');

                }).catch((err) => {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Comments'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                });
            }
        }

        function nextImage() {
            $$invalidate('i', i += 1);
            if(images[i] == undefined || images[i] == null) {
                $$invalidate('i', i = 0); $$invalidate('currImage', currImage = images[i]); 
            }
            else {
                $$invalidate('currImage', currImage = images[i]); 
            }
        }

        function prevImage() {
            $$invalidate('i', i -= 1);
            if(images[i] == undefined || images[i] == null) {
                $$invalidate('i', i = images.length - 1); $$invalidate('currImage', currImage = images[i]); 
            }
            else {
                $$invalidate('currImage', currImage = images[i]); 
            }
        }

    	const writable_props = ['id', 'year', 'model', 'url', 'vin', 'cyl', 'status', 'price', 'mileage', 'date', 'images'];
    	Object.keys($$props).forEach(key => {
    		if (!writable_props.includes(key) && !key.startsWith('$$')) console_1.warn(`<Template> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate('viewImages', viewImages = true);

    	const click_handler_1 = () => Analytics(vin, model, year);

    	const click_handler_2 = () => addToGarage(id, 'owned');

    	const click_handler_3 = () => removeAuto(id, 'compared');

    	const click_handler_4 = () => $$invalidate('viewImages', viewImages = true);

    	const click_handler_5 = () => addToGarage(id, 'compared');

    	const click_handler_6 = () => Analytics(vin, model, year);

    	const click_handler_7 = () => addToGarage(id, 'owned');

    	const click_handler_8 = () => removeAuto(id, 'owned');

    	const click_handler_9 = () => removeAuto(id, 'shared');

    	const click_handler_10 = () => $$invalidate('viewImages', viewImages = false);

    	const click_handler_11 = ({ image }) => $$invalidate('currImage', currImage = image);

    	const click_handler_12 = () => $$invalidate('viewAnalytics', viewAnalytics = false);

    	const click_handler_13 = () => $$invalidate('viewAnalytics', viewAnalytics = false);

    	const click_handler_14 = ({ auto }) => addToGarage(auto._id, 'compared');

    	const click_handler_15 = ({ auto }) => addToGarage(auto._id, 'owned');

    	const click_handler_16 = () => $$invalidate('viewAnalytics', viewAnalytics = false);

    	const click_handler_17 = ({ comment }) => addToGarage(comment.autoID, 'shared');

    	const click_handler_18 = ({ auto }) => shareVehicle(auto._id, auto.Year, auto.Model);

    	function div_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			$$invalidate('div', div = $$value);
    		});
    	}

    	function input_input_handler() {
    		userComment = this.value;
    		$$invalidate('userComment', userComment);
    	}

    	const keyup_handler = () => $$invalidate('garResults', garResults = queryResults(userComment, $garageTab.owned, []));

    	const keydown_handler = (event) => event.which === 13 && postComment();

    	$$self.$set = $$props => {
    		if ('id' in $$props) $$invalidate('id', id = $$props.id);
    		if ('year' in $$props) $$invalidate('year', year = $$props.year);
    		if ('model' in $$props) $$invalidate('model', model = $$props.model);
    		if ('url' in $$props) $$invalidate('url', url = $$props.url);
    		if ('vin' in $$props) $$invalidate('vin', vin = $$props.vin);
    		if ('cyl' in $$props) $$invalidate('cyl', cyl = $$props.cyl);
    		if ('status' in $$props) $$invalidate('status', status = $$props.status);
    		if ('price' in $$props) $$invalidate('price', price = $$props.price);
    		if ('mileage' in $$props) $$invalidate('mileage', mileage = $$props.mileage);
    		if ('date' in $$props) $$invalidate('date', date = $$props.date);
    		if ('images' in $$props) $$invalidate('images', images = $$props.images);
    	};

    	$$self.$capture_state = () => {
    		return { div, autoscroll, id, year, model, url, vin, cyl, status, price, mileage, date, images, Payload, showMsg, heading, message, statusColor, ratio, addComapare, viewAnalytics, analytics, currModel, currYear, nullPrice, xValues, yValues, analyticErr, userComment, i, viewImages, currImage, screenWidth, leftMarginMob, marginLeftMob, garResults, $garageTab, $acctTab, $tabIndex, $garageIndex };
    	};

    	$$self.$inject_state = $$props => {
    		if ('div' in $$props) $$invalidate('div', div = $$props.div);
    		if ('autoscroll' in $$props) autoscroll = $$props.autoscroll;
    		if ('id' in $$props) $$invalidate('id', id = $$props.id);
    		if ('year' in $$props) $$invalidate('year', year = $$props.year);
    		if ('model' in $$props) $$invalidate('model', model = $$props.model);
    		if ('url' in $$props) $$invalidate('url', url = $$props.url);
    		if ('vin' in $$props) $$invalidate('vin', vin = $$props.vin);
    		if ('cyl' in $$props) $$invalidate('cyl', cyl = $$props.cyl);
    		if ('status' in $$props) $$invalidate('status', status = $$props.status);
    		if ('price' in $$props) $$invalidate('price', price = $$props.price);
    		if ('mileage' in $$props) $$invalidate('mileage', mileage = $$props.mileage);
    		if ('date' in $$props) $$invalidate('date', date = $$props.date);
    		if ('images' in $$props) $$invalidate('images', images = $$props.images);
    		if ('Payload' in $$props) Payload = $$props.Payload;
    		if ('showMsg' in $$props) $$invalidate('showMsg', showMsg = $$props.showMsg);
    		if ('heading' in $$props) $$invalidate('heading', heading = $$props.heading);
    		if ('message' in $$props) $$invalidate('message', message = $$props.message);
    		if ('statusColor' in $$props) $$invalidate('statusColor', statusColor = $$props.statusColor);
    		if ('ratio' in $$props) ratio = $$props.ratio;
    		if ('addComapare' in $$props) $$invalidate('addComapare', addComapare = $$props.addComapare);
    		if ('viewAnalytics' in $$props) $$invalidate('viewAnalytics', viewAnalytics = $$props.viewAnalytics);
    		if ('analytics' in $$props) $$invalidate('analytics', analytics = $$props.analytics);
    		if ('currModel' in $$props) $$invalidate('currModel', currModel = $$props.currModel);
    		if ('currYear' in $$props) $$invalidate('currYear', currYear = $$props.currYear);
    		if ('nullPrice' in $$props) $$invalidate('nullPrice', nullPrice = $$props.nullPrice);
    		if ('xValues' in $$props) $$invalidate('xValues', xValues = $$props.xValues);
    		if ('yValues' in $$props) $$invalidate('yValues', yValues = $$props.yValues);
    		if ('analyticErr' in $$props) $$invalidate('analyticErr', analyticErr = $$props.analyticErr);
    		if ('userComment' in $$props) $$invalidate('userComment', userComment = $$props.userComment);
    		if ('i' in $$props) $$invalidate('i', i = $$props.i);
    		if ('viewImages' in $$props) $$invalidate('viewImages', viewImages = $$props.viewImages);
    		if ('currImage' in $$props) $$invalidate('currImage', currImage = $$props.currImage);
    		if ('screenWidth' in $$props) $$invalidate('screenWidth', screenWidth = $$props.screenWidth);
    		if ('leftMarginMob' in $$props) leftMarginMob = $$props.leftMarginMob;
    		if ('marginLeftMob' in $$props) marginLeftMob = $$props.marginLeftMob;
    		if ('garResults' in $$props) $$invalidate('garResults', garResults = $$props.garResults);
    		if ('$garageTab' in $$props) garageTab.set($garageTab);
    		if ('$acctTab' in $$props) acctTab$1.set($acctTab);
    		if ('$tabIndex' in $$props) tabIndex.set($tabIndex);
    		if ('$garageIndex' in $$props) garageIndex.set($garageIndex);
    	};

    	return {
    		div,
    		id,
    		year,
    		model,
    		url,
    		vin,
    		cyl,
    		status,
    		price,
    		mileage,
    		date,
    		images,
    		showMsg,
    		heading,
    		message,
    		statusColor,
    		addComapare,
    		viewAnalytics,
    		analytics,
    		currModel,
    		currYear,
    		nullPrice,
    		xValues,
    		yValues,
    		analyticErr,
    		userComment,
    		i,
    		viewImages,
    		currImage,
    		screenWidth,
    		garResults,
    		checkExist,
    		addToGarage,
    		removeAuto,
    		Analytics,
    		shareVehicle,
    		postComment,
    		nextImage,
    		prevImage,
    		$garageTab,
    		undefined,
    		$acctTab,
    		$tabIndex,
    		$garageIndex,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		click_handler_7,
    		click_handler_8,
    		click_handler_9,
    		click_handler_10,
    		click_handler_11,
    		click_handler_12,
    		click_handler_13,
    		click_handler_14,
    		click_handler_15,
    		click_handler_16,
    		click_handler_17,
    		click_handler_18,
    		div_1_binding,
    		input_input_handler,
    		keyup_handler,
    		keydown_handler
    	};
    }

    class Template extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$c, safe_not_equal, ["id", "year", "model", "url", "vin", "cyl", "status", "price", "mileage", "date", "images"]);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Template", options, id: create_fragment$c.name });

    		const { ctx } = this.$$;
    		const props = options.props || {};
    		if (ctx.id === undefined && !('id' in props)) {
    			console_1.warn("<Template> was created without expected prop 'id'");
    		}
    		if (ctx.year === undefined && !('year' in props)) {
    			console_1.warn("<Template> was created without expected prop 'year'");
    		}
    		if (ctx.model === undefined && !('model' in props)) {
    			console_1.warn("<Template> was created without expected prop 'model'");
    		}
    		if (ctx.url === undefined && !('url' in props)) {
    			console_1.warn("<Template> was created without expected prop 'url'");
    		}
    		if (ctx.vin === undefined && !('vin' in props)) {
    			console_1.warn("<Template> was created without expected prop 'vin'");
    		}
    		if (ctx.cyl === undefined && !('cyl' in props)) {
    			console_1.warn("<Template> was created without expected prop 'cyl'");
    		}
    		if (ctx.status === undefined && !('status' in props)) {
    			console_1.warn("<Template> was created without expected prop 'status'");
    		}
    		if (ctx.price === undefined && !('price' in props)) {
    			console_1.warn("<Template> was created without expected prop 'price'");
    		}
    		if (ctx.mileage === undefined && !('mileage' in props)) {
    			console_1.warn("<Template> was created without expected prop 'mileage'");
    		}
    		if (ctx.date === undefined && !('date' in props)) {
    			console_1.warn("<Template> was created without expected prop 'date'");
    		}
    		if (ctx.images === undefined && !('images' in props)) {
    			console_1.warn("<Template> was created without expected prop 'images'");
    		}
    	}

    	get id() {
    		throw new Error("<Template>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Template>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get year() {
    		throw new Error("<Template>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set year(value) {
    		throw new Error("<Template>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get model() {
    		throw new Error("<Template>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set model(value) {
    		throw new Error("<Template>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get url() {
    		throw new Error("<Template>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set url(value) {
    		throw new Error("<Template>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vin() {
    		throw new Error("<Template>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vin(value) {
    		throw new Error("<Template>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get cyl() {
    		throw new Error("<Template>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set cyl(value) {
    		throw new Error("<Template>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get status() {
    		throw new Error("<Template>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set status(value) {
    		throw new Error("<Template>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get price() {
    		throw new Error("<Template>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set price(value) {
    		throw new Error("<Template>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mileage() {
    		throw new Error("<Template>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mileage(value) {
    		throw new Error("<Template>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get date() {
    		throw new Error("<Template>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set date(value) {
    		throw new Error("<Template>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get images() {
    		throw new Error("<Template>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set images(value) {
    		throw new Error("<Template>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/Shared/Filter.svelte generated by Svelte v3.12.1 */

    const file$c = "src/Components/Shared/Filter.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.year = list[i];
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.year = list[i];
    	return child_ctx;
    }

    function get_each_context_2$2(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.status = list[i];
    	return child_ctx;
    }

    function get_each_context_3$1(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.cyl = list[i];
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.auto = list[i];
    	return child_ctx;
    }

    function get_each_context_5(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.prop = list[i];
    	return child_ctx;
    }

    // (53:0) {#if prevResults.length > 10}
    function create_if_block_4$3(ctx) {
    	var input, t0, button0, i0, t1, t2, t3, button1, i1, t4, select0, t5, select1, option0, option1, t8, button2, dispose;

    	let each_value_5 = ctx.propList;

    	let each_blocks = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    	}

    	const block = {
    		c: function create() {
    			input = element("input");
    			t0 = space();
    			button0 = element("button");
    			i0 = element("i");
    			t1 = text(" Fliter ");
    			t2 = text(ctx.filter);
    			t3 = space();
    			button1 = element("button");
    			i1 = element("i");
    			t4 = space();
    			select0 = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t5 = space();
    			select1 = element("select");
    			option0 = element("option");
    			option0.textContent = "Ascending";
    			option1 = element("option");
    			option1.textContent = "Descending";
    			t8 = space();
    			button2 = element("button");
    			button2.textContent = "Top";
    			attr_dev(input, "id", "search-bar");
    			attr_dev(input, "class", "form-control-lg svelte-weh3kp");
    			attr_dev(input, "placeholder", ctx.placeholder);
    			attr_dev(input, "autocomplete", "off");
    			add_location(input, file$c, 53, 4, 1496);
    			attr_dev(i0, "class", "fa fa-filter");
    			add_location(i0, file$c, 55, 92, 1785);
    			attr_dev(button0, "id", "filter");
    			attr_dev(button0, "class", "btn btn-info btn-lg svelte-weh3kp");
    			add_location(button0, file$c, 55, 4, 1697);
    			attr_dev(i1, "class", "fa fa-filter");
    			add_location(i1, file$c, 57, 96, 1936);
    			attr_dev(button1, "id", "filter-mob");
    			attr_dev(button1, "class", "btn btn-info btn-lg svelte-weh3kp");
    			add_location(button1, file$c, 57, 4, 1844);
    			if (ctx.sort === void 0) add_render_callback(() => ctx.select0_change_handler.call(select0));
    			attr_dev(select0, "class", "form-control-lg sort svelte-weh3kp");
    			add_location(select0, file$c, 59, 4, 1979);
    			option0.__value = "asc";
    			option0.value = option0.__value;
    			add_location(option0, file$c, 66, 8, 2351);
    			option1.__value = "dsc";
    			option1.value = option1.__value;
    			add_location(option1, file$c, 67, 8, 2398);
    			if (ctx.order === void 0) add_render_callback(() => ctx.select1_change_handler.call(select1));
    			attr_dev(select1, "class", "form-control-lg sort svelte-weh3kp");
    			add_location(select1, file$c, 65, 4, 2220);
    			attr_dev(button2, "id", "goTop");
    			attr_dev(button2, "class", "btn btn-primary btn-lg svelte-weh3kp");
    			add_location(button2, file$c, 70, 4, 2457);

    			dispose = [
    				listen_dev(input, "input", ctx.input_input_handler),
    				listen_dev(input, "keyup", ctx.keyup_handler),
    				listen_dev(button0, "click", ctx.click_handler),
    				listen_dev(button1, "click", ctx.click_handler_1),
    				listen_dev(select0, "change", ctx.select0_change_handler),
    				listen_dev(select0, "change", ctx.change_handler),
    				listen_dev(select1, "change", ctx.select1_change_handler),
    				listen_dev(select1, "change", ctx.change_handler_1),
    				listen_dev(button2, "click", goTop)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);

    			set_input_value(input, ctx.userInput);

    			insert_dev(target, t0, anchor);
    			insert_dev(target, button0, anchor);
    			append_dev(button0, i0);
    			append_dev(button0, t1);
    			append_dev(button0, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, button1, anchor);
    			append_dev(button1, i1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, select0, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select0, null);
    			}

    			select_option(select0, ctx.sort);

    			insert_dev(target, t5, anchor);
    			insert_dev(target, select1, anchor);
    			append_dev(select1, option0);
    			append_dev(select1, option1);

    			select_option(select1, ctx.order);

    			insert_dev(target, t8, anchor);
    			insert_dev(target, button2, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.userInput && (input.value !== ctx.userInput)) set_input_value(input, ctx.userInput);

    			if (changed.placeholder) {
    				attr_dev(input, "placeholder", ctx.placeholder);
    			}

    			if (changed.filter) {
    				set_data_dev(t2, ctx.filter);
    			}

    			if (changed.propList) {
    				each_value_5 = ctx.propList;

    				let i;
    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5(ctx, each_value_5, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    					} else {
    						each_blocks[i] = create_each_block_5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}
    				each_blocks.length = each_value_5.length;
    			}

    			if (changed.sort) select_option(select0, ctx.sort);
    			if (changed.order) select_option(select1, ctx.order);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(input);
    				detach_dev(t0);
    				detach_dev(button0);
    				detach_dev(t3);
    				detach_dev(button1);
    				detach_dev(t4);
    				detach_dev(select0);
    			}

    			destroy_each(each_blocks, detaching);

    			if (detaching) {
    				detach_dev(t5);
    				detach_dev(select1);
    				detach_dev(t8);
    				detach_dev(button2);
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_4$3.name, type: "if", source: "(53:0) {#if prevResults.length > 10}", ctx });
    	return block;
    }

    // (61:8) {#each propList as prop}
    function create_each_block_5(ctx) {
    	var option, t_value = ctx.prop + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.prop;
    			option.value = option.__value;
    			add_location(option, file$c, 61, 12, 2146);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_5.name, type: "each", source: "(61:8) {#each propList as prop}", ctx });
    	return block;
    }

    // (80:8) {:else}
    function create_else_block$5(ctx) {
    	var current;

    	var card = new Template({
    		props: {
    		id: ctx.auto._id || ctx.auto.id,
    		year: ctx.auto.Year,
    		model: ctx.auto.Model,
    		url: ctx.auto.Images[0],
    		vin: ctx.auto.VIN,
    		cyl: ctx.auto.CYL,
    		status: ctx.auto.Status,
    		price: ctx.auto.Price,
    		mileage: ctx.auto.Mileage,
    		date: ctx.auto.Date,
    		images: ctx.auto.Images
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			card.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var card_changes = {};
    			if (changed.results || changed.range) card_changes.id = ctx.auto._id || ctx.auto.id;
    			if (changed.results || changed.range) card_changes.year = ctx.auto.Year;
    			if (changed.results || changed.range) card_changes.model = ctx.auto.Model;
    			if (changed.results || changed.range) card_changes.url = ctx.auto.Images[0];
    			if (changed.results || changed.range) card_changes.vin = ctx.auto.VIN;
    			if (changed.results || changed.range) card_changes.cyl = ctx.auto.CYL;
    			if (changed.results || changed.range) card_changes.status = ctx.auto.Status;
    			if (changed.results || changed.range) card_changes.price = ctx.auto.Price;
    			if (changed.results || changed.range) card_changes.mileage = ctx.auto.Mileage;
    			if (changed.results || changed.range) card_changes.date = ctx.auto.Date;
    			if (changed.results || changed.range) card_changes.images = ctx.auto.Images;
    			card.$set(card_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$5.name, type: "else", source: "(80:8) {:else}", ctx });
    	return block;
    }

    // (76:8) {#if auto.Images === undefined || auto.Images.length == 0}
    function create_if_block_3$4(ctx) {
    	var current;

    	var card = new Template({
    		props: {
    		id: ctx.auto._id || ctx.auto.id,
    		year: ctx.auto.Year,
    		model: ctx.auto.Model,
    		url: "https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg",
    		vin: ctx.auto.VIN,
    		cyl: ctx.auto.CYL,
    		status: ctx.auto.Status,
    		price: ctx.auto.Price,
    		mileage: ctx.auto.Mileage,
    		date: ctx.auto.Date,
    		images: undefined
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			card.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var card_changes = {};
    			if (changed.results || changed.range) card_changes.id = ctx.auto._id || ctx.auto.id;
    			if (changed.results || changed.range) card_changes.year = ctx.auto.Year;
    			if (changed.results || changed.range) card_changes.model = ctx.auto.Model;
    			if (changed.results || changed.range) card_changes.vin = ctx.auto.VIN;
    			if (changed.results || changed.range) card_changes.cyl = ctx.auto.CYL;
    			if (changed.results || changed.range) card_changes.status = ctx.auto.Status;
    			if (changed.results || changed.range) card_changes.price = ctx.auto.Price;
    			if (changed.results || changed.range) card_changes.mileage = ctx.auto.Mileage;
    			if (changed.results || changed.range) card_changes.date = ctx.auto.Date;
    			card.$set(card_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_3$4.name, type: "if", source: "(76:8) {#if auto.Images === undefined || auto.Images.length == 0}", ctx });
    	return block;
    }

    // (75:4) {#each results.slice(0, range) as auto}
    function create_each_block_4(ctx) {
    	var current_block_type_index, if_block, if_block_anchor, current;

    	var if_block_creators = [
    		create_if_block_3$4,
    		create_else_block$5
    	];

    	var if_blocks = [];

    	function select_block_type(changed, ctx) {
    		if (ctx.auto.Images === undefined || ctx.auto.Images.length == 0) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(null, ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(changed, ctx);
    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(changed, ctx);
    			} else {
    				group_outros();
    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});
    				check_outros();

    				if_block = if_blocks[current_block_type_index];
    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}
    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_4.name, type: "each", source: "(75:4) {#each results.slice(0, range) as auto}", ctx });
    	return block;
    }

    // (94:0) {#if range <= results.length && results.length > 0}
    function create_if_block_2$5(ctx) {
    	var button, dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Load More";
    			attr_dev(button, "id", "loadMore");
    			attr_dev(button, "class", "btn btn-primary svelte-weh3kp");
    			add_location(button, file$c, 94, 4, 3470);
    			dispose = listen_dev(button, "click", ctx.click_handler_2);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$5.name, type: "if", source: "(94:0) {#if range <= results.length && results.length > 0}", ctx });
    	return block;
    }

    // (98:0) {#if $showFilter}
    function create_if_block$6(ctx) {
    	var div, select0, option0, t1, select1, option1, t3, select2, option2, t5, select3, option3, t7, t8, input0, input0_updating = false, t9, input1, input1_updating = false, t10, input2, input2_updating = false, t11, input3, input3_updating = false, t12, button0, t14, button1, div_intro, div_outro, current, dispose;

    	let each_value_3 = ctx.cylList;

    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks_3[i] = create_each_block_3$1(get_each_context_3$1(ctx, each_value_3, i));
    	}

    	let each_value_2 = ctx.statusList;

    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2$2(get_each_context_2$2(ctx, each_value_2, i));
    	}

    	let each_value_1 = ctx.yearList;

    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	let each_value = ctx.yearList;

    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	var if_block = (ctx.$tabIndex != 0) && create_if_block_1$5(ctx);

    	function input0_input_handler_1() {
    		input0_updating = true;
    		ctx.input0_input_handler_1.call(input0);
    	}

    	function input1_input_handler_1() {
    		input1_updating = true;
    		ctx.input1_input_handler_1.call(input1);
    	}

    	function input2_input_handler() {
    		input2_updating = true;
    		ctx.input2_input_handler.call(input2);
    	}

    	function input3_input_handler() {
    		input3_updating = true;
    		ctx.input3_input_handler.call(input3);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			select0 = element("select");
    			option0 = element("option");
    			option0.textContent = "CYL";

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			t1 = space();
    			select1 = element("select");
    			option1 = element("option");
    			option1.textContent = "Status";

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t3 = space();
    			select2 = element("select");
    			option2 = element("option");
    			option2.textContent = "Start Year";

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t5 = space();
    			select3 = element("select");
    			option3 = element("option");
    			option3.textContent = "End Year";

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t7 = space();
    			if (if_block) if_block.c();
    			t8 = space();
    			input0 = element("input");
    			t9 = space();
    			input1 = element("input");
    			t10 = space();
    			input2 = element("input");
    			t11 = space();
    			input3 = element("input");
    			t12 = space();
    			button0 = element("button");
    			button0.textContent = "Reset";
    			t14 = space();
    			button1 = element("button");
    			button1.textContent = "Close";
    			option0.__value = "";
    			option0.value = option0.__value;
    			option0.disabled = true;
    			option0.selected = true;
    			add_location(option0, file$c, 100, 12, 3888);
    			if (ctx.filters.CYL === void 0) add_render_callback(() => ctx.select0_change_handler_1.call(select0));
    			attr_dev(select0, "class", "form-control filterInput svelte-weh3kp");
    			attr_dev(select0, "aria-placeholder", "CYL");
    			add_location(select0, file$c, 99, 8, 3722);
    			option1.__value = "";
    			option1.value = option1.__value;
    			option1.disabled = true;
    			option1.selected = true;
    			add_location(option1, file$c, 107, 12, 4217);
    			if (ctx.filters.Status === void 0) add_render_callback(() => ctx.select1_change_handler_1.call(select1));
    			attr_dev(select1, "class", "form-control filterInput svelte-weh3kp");
    			add_location(select1, file$c, 106, 8, 4071);
    			option2.__value = "";
    			option2.value = option2.__value;
    			option2.disabled = true;
    			option2.selected = true;
    			add_location(option2, file$c, 114, 12, 4563);
    			if (ctx.filters.startYear === void 0) add_render_callback(() => ctx.select2_change_handler.call(select2));
    			attr_dev(select2, "class", "form-control leftFilter svelte-weh3kp");
    			add_location(select2, file$c, 113, 8, 4415);
    			option3.__value = "";
    			option3.value = option3.__value;
    			option3.disabled = true;
    			option3.selected = true;
    			add_location(option3, file$c, 121, 12, 4904);
    			if (ctx.filters.endYear === void 0) add_render_callback(() => ctx.select3_change_handler.call(select3));
    			attr_dev(select3, "class", "form-control rightFilter svelte-weh3kp");
    			add_location(select3, file$c, 120, 8, 4757);
    			attr_dev(input0, "type", "number");
    			attr_dev(input0, "class", "form-control leftFilter svelte-weh3kp");
    			attr_dev(input0, "placeholder", "Min Mileage");
    			attr_dev(input0, "autocomplete", "off");
    			add_location(input0, file$c, 132, 8, 5583);
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "class", "form-control rightFilter svelte-weh3kp");
    			attr_dev(input1, "placeholder", "Max Mileage");
    			attr_dev(input1, "autocomplete", "off");
    			add_location(input1, file$c, 133, 8, 5783);
    			attr_dev(input2, "type", "number");
    			attr_dev(input2, "class", "form-control leftFilter svelte-weh3kp");
    			attr_dev(input2, "placeholder", "Min Bid");
    			attr_dev(input2, "autocomplete", "off");
    			add_location(input2, file$c, 134, 8, 5984);
    			attr_dev(input3, "type", "number");
    			attr_dev(input3, "class", "form-control rightFilter svelte-weh3kp");
    			attr_dev(input3, "placeholder", "Max Bid");
    			attr_dev(input3, "autocomplete", "off");
    			add_location(input3, file$c, 135, 8, 6179);
    			set_style(button0, "margin-top", "10px");
    			set_style(button0, "margin-bottom", "10px");
    			set_style(button0, "float", "left");
    			attr_dev(button0, "class", "btn btn-warning");
    			add_location(button0, file$c, 136, 8, 6375);
    			set_style(button1, "margin-top", "10px");
    			set_style(button1, "margin-bottom", "10px");
    			set_style(button1, "float", "right");
    			attr_dev(button1, "class", "btn btn-danger");
    			add_location(button1, file$c, 137, 8, 6510);
    			attr_dev(div, "id", "filterblock");
    			attr_dev(div, "class", "container-fluid svelte-weh3kp");
    			add_location(div, file$c, 98, 4, 3596);

    			dispose = [
    				listen_dev(select0, "change", ctx.select0_change_handler_1),
    				listen_dev(select0, "change", ctx.change_handler_2),
    				listen_dev(select1, "change", ctx.select1_change_handler_1),
    				listen_dev(select1, "change", ctx.change_handler_3),
    				listen_dev(select2, "change", ctx.select2_change_handler),
    				listen_dev(select2, "change", ctx.change_handler_4),
    				listen_dev(select3, "change", ctx.select3_change_handler),
    				listen_dev(select3, "change", ctx.change_handler_5),
    				listen_dev(input0, "input", input0_input_handler_1),
    				listen_dev(input0, "keyup", ctx.keyup_handler_1),
    				listen_dev(input1, "input", input1_input_handler_1),
    				listen_dev(input1, "keyup", ctx.keyup_handler_2),
    				listen_dev(input2, "input", input2_input_handler),
    				listen_dev(input2, "keyup", ctx.keyup_handler_3),
    				listen_dev(input3, "input", input3_input_handler),
    				listen_dev(input3, "keyup", ctx.keyup_handler_4),
    				listen_dev(button0, "click", ctx.clearFields),
    				listen_dev(button1, "click", ctx.click_handler_3)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, select0);
    			append_dev(select0, option0);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(select0, null);
    			}

    			select_option(select0, ctx.filters.CYL);

    			append_dev(div, t1);
    			append_dev(div, select1);
    			append_dev(select1, option1);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(select1, null);
    			}

    			select_option(select1, ctx.filters.Status);

    			append_dev(div, t3);
    			append_dev(div, select2);
    			append_dev(select2, option2);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select2, null);
    			}

    			select_option(select2, ctx.filters.startYear);

    			append_dev(div, t5);
    			append_dev(div, select3);
    			append_dev(select3, option3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select3, null);
    			}

    			select_option(select3, ctx.filters.endYear);

    			append_dev(div, t7);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t8);
    			append_dev(div, input0);

    			set_input_value(input0, ctx.filters.minMile);

    			append_dev(div, t9);
    			append_dev(div, input1);

    			set_input_value(input1, ctx.filters.maxMile);

    			append_dev(div, t10);
    			append_dev(div, input2);

    			set_input_value(input2, ctx.filters.minBid);

    			append_dev(div, t11);
    			append_dev(div, input3);

    			set_input_value(input3, ctx.filters.maxBid);

    			append_dev(div, t12);
    			append_dev(div, button0);
    			append_dev(div, t14);
    			append_dev(div, button1);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (changed.cylList) {
    				each_value_3 = ctx.cylList;

    				let i;
    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$1(ctx, each_value_3, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(changed, child_ctx);
    					} else {
    						each_blocks_3[i] = create_each_block_3$1(child_ctx);
    						each_blocks_3[i].c();
    						each_blocks_3[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks_3.length; i += 1) {
    					each_blocks_3[i].d(1);
    				}
    				each_blocks_3.length = each_value_3.length;
    			}

    			if (changed.filters) select_option(select0, ctx.filters.CYL);

    			if (changed.statusList) {
    				each_value_2 = ctx.statusList;

    				let i;
    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$2(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(changed, child_ctx);
    					} else {
    						each_blocks_2[i] = create_each_block_2$2(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(select1, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}
    				each_blocks_2.length = each_value_2.length;
    			}

    			if (changed.filters) select_option(select1, ctx.filters.Status);

    			if (changed.yearList) {
    				each_value_1 = ctx.yearList;

    				let i;
    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(changed, child_ctx);
    					} else {
    						each_blocks_1[i] = create_each_block_1$2(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select2, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}
    				each_blocks_1.length = each_value_1.length;
    			}

    			if (changed.filters) select_option(select2, ctx.filters.startYear);

    			if (changed.yearList) {
    				each_value = ctx.yearList;

    				let i;
    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select3, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}
    				each_blocks.length = each_value.length;
    			}

    			if (changed.filters) select_option(select3, ctx.filters.endYear);

    			if (ctx.$tabIndex != 0) {
    				if (if_block) {
    					if_block.p(changed, ctx);
    				} else {
    					if_block = create_if_block_1$5(ctx);
    					if_block.c();
    					if_block.m(div, t8);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (!input0_updating && changed.filters) set_input_value(input0, ctx.filters.minMile);
    			input0_updating = false;
    			if (!input1_updating && changed.filters) set_input_value(input1, ctx.filters.maxMile);
    			input1_updating = false;
    			if (!input2_updating && changed.filters) set_input_value(input2, ctx.filters.minBid);
    			input2_updating = false;
    			if (!input3_updating && changed.filters) set_input_value(input3, ctx.filters.maxBid);
    			input3_updating = false;
    		},

    		i: function intro(local) {
    			if (current) return;
    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				if (!div_intro) div_intro = create_in_transition(div, fly, { x:200, duration:500 });
    				div_intro.start();
    			});

    			current = true;
    		},

    		o: function outro(local) {
    			if (div_intro) div_intro.invalidate();

    			div_outro = create_out_transition(div, fly, { x:200, duration:500 });

    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			destroy_each(each_blocks_3, detaching);

    			destroy_each(each_blocks_2, detaching);

    			destroy_each(each_blocks_1, detaching);

    			destroy_each(each_blocks, detaching);

    			if (if_block) if_block.d();

    			if (detaching) {
    				if (div_outro) div_outro.end();
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$6.name, type: "if", source: "(98:0) {#if $showFilter}", ctx });
    	return block;
    }

    // (102:12) {#each cylList as cyl}
    function create_each_block_3$1(ctx) {
    	var option, t_value = ctx.cyl + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.cyl;
    			option.value = option.__value;
    			add_location(option, file$c, 102, 16, 3987);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_3$1.name, type: "each", source: "(102:12) {#each cylList as cyl}", ctx });
    	return block;
    }

    // (109:12) {#each statusList as status}
    function create_each_block_2$2(ctx) {
    	var option, t_value = ctx.status + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.status;
    			option.value = option.__value;
    			add_location(option, file$c, 109, 16, 4325);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_2$2.name, type: "each", source: "(109:12) {#each statusList as status}", ctx });
    	return block;
    }

    // (116:12) {#each yearList as year}
    function create_each_block_1$2(ctx) {
    	var option, t_value = ctx.year + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.year;
    			option.value = option.__value;
    			add_location(option, file$c, 116, 16, 4671);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_1$2.name, type: "each", source: "(116:12) {#each yearList as year}", ctx });
    	return block;
    }

    // (123:12) {#each yearList as year}
    function create_each_block$2(ctx) {
    	var option, t_value = ctx.year + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.year;
    			option.value = option.__value;
    			add_location(option, file$c, 123, 16, 5010);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block$2.name, type: "each", source: "(123:12) {#each yearList as year}", ctx });
    	return block;
    }

    // (128:8) {#if $tabIndex != 0}
    function create_if_block_1$5(ctx) {
    	var input0, t, input1, dispose;

    	const block = {
    		c: function create() {
    			input0 = element("input");
    			t = space();
    			input1 = element("input");
    			attr_dev(input0, "class", "form-control leftFilter svelte-weh3kp");
    			attr_dev(input0, "onfocus", "this.type='Date'");
    			attr_dev(input0, "placeholder", "Start Date");
    			attr_dev(input0, "autocomplete", "off");
    			add_location(input0, file$c, 128, 12, 5129);
    			attr_dev(input1, "class", "form-control rightFilter svelte-weh3kp");
    			attr_dev(input1, "onfocus", "this.type='Date'");
    			attr_dev(input1, "placeholder", "End Date");
    			attr_dev(input1, "autocomplete", "off");
    			add_location(input1, file$c, 129, 12, 5348);

    			dispose = [
    				listen_dev(input0, "input", ctx.input0_input_handler),
    				listen_dev(input0, "change", ctx.change_handler_6),
    				listen_dev(input1, "input", ctx.input1_input_handler),
    				listen_dev(input1, "change", ctx.change_handler_7)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, input0, anchor);

    			set_input_value(input0, ctx.filters.startDate);

    			insert_dev(target, t, anchor);
    			insert_dev(target, input1, anchor);

    			set_input_value(input1, ctx.filters.endDate);
    		},

    		p: function update(changed, ctx) {
    			if (changed.filters && (input0.value !== ctx.filters.startDate)) set_input_value(input0, ctx.filters.startDate);
    			if (changed.filters && (input1.value !== ctx.filters.endDate)) set_input_value(input1, ctx.filters.endDate);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(input0);
    				detach_dev(t);
    				detach_dev(input1);
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$5.name, type: "if", source: "(128:8) {#if $tabIndex != 0}", ctx });
    	return block;
    }

    function create_fragment$d(ctx) {
    	var t0, div, t1, table, tr, td, t2, t3, if_block2_anchor, current;

    	var if_block0 = (ctx.prevResults.length > 10) && create_if_block_4$3(ctx);

    	let each_value_4 = ctx.results.slice(0, ctx.range);

    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	var if_block1 = (ctx.range <= ctx.results.length && ctx.results.length > 0) && create_if_block_2$5(ctx);

    	var if_block2 = (ctx.$showFilter) && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			table = element("table");
    			tr = element("tr");
    			td = element("td");
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    			set_style(div, "width", "100%");
    			set_style(div, "margin-top", "40px");
    			add_location(div, file$c, 73, 0, 2544);
    			add_location(td, file$c, 89, 8, 3384);
    			add_location(tr, file$c, 88, 4, 3371);
    			set_style(table, "width", "100%");
    			add_location(table, file$c, 87, 0, 3340);
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			insert_dev(target, t1, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, tr);
    			append_dev(tr, td);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (ctx.prevResults.length > 10) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    				} else {
    					if_block0 = create_if_block_4$3(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (changed.results || changed.range) {
    				each_value_4 = ctx.results.slice(0, ctx.range);

    				let i;
    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();
    				for (i = each_value_4.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}
    				check_outros();
    			}

    			if (ctx.range <= ctx.results.length && ctx.results.length > 0) {
    				if (!if_block1) {
    					if_block1 = create_if_block_2$5(ctx);
    					if_block1.c();
    					if_block1.m(t3.parentNode, t3);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (ctx.$showFilter) {
    				if (if_block2) {
    					if_block2.p(changed, ctx);
    					transition_in(if_block2, 1);
    				} else {
    					if_block2 = create_if_block$6(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				group_outros();
    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});
    				check_outros();
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			for (let i = 0; i < each_value_4.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block2);
    			current = true;
    		},

    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block2);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);

    			if (detaching) {
    				detach_dev(t0);
    				detach_dev(div);
    			}

    			destroy_each(each_blocks, detaching);

    			if (detaching) {
    				detach_dev(t1);
    				detach_dev(table);
    				detach_dev(t2);
    			}

    			if (if_block1) if_block1.d(detaching);

    			if (detaching) {
    				detach_dev(t3);
    			}

    			if (if_block2) if_block2.d(detaching);

    			if (detaching) {
    				detach_dev(if_block2_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$d.name, type: "component", source: "", ctx });
    	return block;
    }

    function goTop() {
        document.body.scrollTop = 0; 
        document.documentElement.scrollTop = 0;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let $showFilter, $tabIndex;

    	validate_store(showFilter, 'showFilter');
    	component_subscribe($$self, showFilter, $$value => { $showFilter = $$value; $$invalidate('$showFilter', $showFilter); });
    	validate_store(tabIndex, 'tabIndex');
    	component_subscribe($$self, tabIndex, $$value => { $tabIndex = $$value; $$invalidate('$tabIndex', $tabIndex); });

    	

        let { results, prevResults, placeholder, filter } = $$props;

        let userInput = '';

        let range = 10;

        let cylList = ['A', 'CC', 'S', 'None'];

        let statusList = ['Salvageable', 'Normal', 'Irreparable', 'Writeoff (Hail)', 'Writeoff (Stolen)', 'Writeoff (Other)', 'Rebuilt'];

        let propList = ['Model', 'Year', 'Date', 'Bid', 'Mileage'];

        var currDate = new window.Date();

        let yearList = [];

        let filters = {
            startYear : '', endYear : '',
            CYL : '',
            Status : '',
            startDate : '', endDate : '',
            minMile : '', maxMile : '',
            minBid : '', maxBid : ''
        };

        let sort, order;

        for(let i = currDate.getFullYear() + 1; i >= currDate.getFullYear() - 25; i--) 
            yearList.push(i);

        function clearFields() {
            $$invalidate('filters', filters.startYear = '', filters); $$invalidate('filters', filters.endYear = '', filters); 
            $$invalidate('filters', filters.CYL = '', filters); $$invalidate('filters', filters.Status = '', filters); 
            $$invalidate('filters', filters.startDate = '', filters); filters.maxBid;
            $$invalidate('filters', filters.minBid = '', filters); $$invalidate('filters', filters.maxBid = '', filters); 
            $$invalidate('filters', filters.minMile = '', filters); $$invalidate('filters', filters.maxMile = '', filters);

            $$invalidate('results', results = prevResults);
        }

    	const writable_props = ['results', 'prevResults', 'placeholder', 'filter'];
    	Object.keys($$props).forEach(key => {
    		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Filter> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		userInput = this.value;
    		$$invalidate('userInput', userInput);
    	}

    	const keyup_handler = () => $$invalidate('results', results = queryResults(userInput, results, prevResults));

    	const click_handler = () => showFilter.set(true);

    	const click_handler_1 = () => showFilter.set(true);

    	function select0_change_handler() {
    		sort = select_value(this);
    		$$invalidate('sort', sort);
    		$$invalidate('propList', propList);
    	}

    	const change_handler = () => $$invalidate('results', results = sortResults(sort, order, results));

    	function select1_change_handler() {
    		order = select_value(this);
    		$$invalidate('order', order);
    	}

    	const change_handler_1 = () => $$invalidate('results', results = sortResults(sort, order, results));

    	const click_handler_2 = () => $$invalidate('range', range += 100);

    	function select0_change_handler_1() {
    		filters.CYL = select_value(this);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	const change_handler_2 = () => $$invalidate('results', results = filterResults(filters, results));

    	function select1_change_handler_1() {
    		filters.Status = select_value(this);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	const change_handler_3 = () => $$invalidate('results', results = filterResults(filters, results));

    	function select2_change_handler() {
    		filters.startYear = select_value(this);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	const change_handler_4 = () => $$invalidate('results', results = filterResults(filters, results));

    	function select3_change_handler() {
    		filters.endYear = select_value(this);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	const change_handler_5 = () => $$invalidate('results', results = filterResults(filters, results));

    	function input0_input_handler() {
    		filters.startDate = this.value;
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	const change_handler_6 = () => $$invalidate('results', results = filterResults(filters, results));

    	function input1_input_handler() {
    		filters.endDate = this.value;
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	const change_handler_7 = () => $$invalidate('results', results = filterResults(filters, results));

    	function input0_input_handler_1() {
    		filters.minMile = to_number(this.value);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	const keyup_handler_1 = () => $$invalidate('results', results = filterResults(filters, results));

    	function input1_input_handler_1() {
    		filters.maxMile = to_number(this.value);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	const keyup_handler_2 = () => $$invalidate('results', results = filterResults(filters, results));

    	function input2_input_handler() {
    		filters.minBid = to_number(this.value);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	const keyup_handler_3 = () => $$invalidate('results', results = filterResults(filters, results));

    	function input3_input_handler() {
    		filters.maxBid = to_number(this.value);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	const keyup_handler_4 = () => $$invalidate('results', results = filterResults(filters, results));

    	const click_handler_3 = () => showFilter.set(false);

    	$$self.$set = $$props => {
    		if ('results' in $$props) $$invalidate('results', results = $$props.results);
    		if ('prevResults' in $$props) $$invalidate('prevResults', prevResults = $$props.prevResults);
    		if ('placeholder' in $$props) $$invalidate('placeholder', placeholder = $$props.placeholder);
    		if ('filter' in $$props) $$invalidate('filter', filter = $$props.filter);
    	};

    	$$self.$capture_state = () => {
    		return { results, prevResults, placeholder, filter, userInput, range, cylList, statusList, propList, currDate, yearList, filters, sort, order, $showFilter, $tabIndex };
    	};

    	$$self.$inject_state = $$props => {
    		if ('results' in $$props) $$invalidate('results', results = $$props.results);
    		if ('prevResults' in $$props) $$invalidate('prevResults', prevResults = $$props.prevResults);
    		if ('placeholder' in $$props) $$invalidate('placeholder', placeholder = $$props.placeholder);
    		if ('filter' in $$props) $$invalidate('filter', filter = $$props.filter);
    		if ('userInput' in $$props) $$invalidate('userInput', userInput = $$props.userInput);
    		if ('range' in $$props) $$invalidate('range', range = $$props.range);
    		if ('cylList' in $$props) $$invalidate('cylList', cylList = $$props.cylList);
    		if ('statusList' in $$props) $$invalidate('statusList', statusList = $$props.statusList);
    		if ('propList' in $$props) $$invalidate('propList', propList = $$props.propList);
    		if ('currDate' in $$props) currDate = $$props.currDate;
    		if ('yearList' in $$props) $$invalidate('yearList', yearList = $$props.yearList);
    		if ('filters' in $$props) $$invalidate('filters', filters = $$props.filters);
    		if ('sort' in $$props) $$invalidate('sort', sort = $$props.sort);
    		if ('order' in $$props) $$invalidate('order', order = $$props.order);
    		if ('$showFilter' in $$props) showFilter.set($showFilter);
    		if ('$tabIndex' in $$props) tabIndex.set($tabIndex);
    	};

    	return {
    		results,
    		prevResults,
    		placeholder,
    		filter,
    		userInput,
    		range,
    		cylList,
    		statusList,
    		propList,
    		yearList,
    		filters,
    		sort,
    		order,
    		clearFields,
    		$showFilter,
    		$tabIndex,
    		input_input_handler,
    		keyup_handler,
    		click_handler,
    		click_handler_1,
    		select0_change_handler,
    		change_handler,
    		select1_change_handler,
    		change_handler_1,
    		click_handler_2,
    		select0_change_handler_1,
    		change_handler_2,
    		select1_change_handler_1,
    		change_handler_3,
    		select2_change_handler,
    		change_handler_4,
    		select3_change_handler,
    		change_handler_5,
    		input0_input_handler,
    		change_handler_6,
    		input1_input_handler,
    		change_handler_7,
    		input0_input_handler_1,
    		keyup_handler_1,
    		input1_input_handler_1,
    		keyup_handler_2,
    		input2_input_handler,
    		keyup_handler_3,
    		input3_input_handler,
    		keyup_handler_4,
    		click_handler_3
    	};
    }

    class Filter extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$d, safe_not_equal, ["results", "prevResults", "placeholder", "filter"]);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Filter", options, id: create_fragment$d.name });

    		const { ctx } = this.$$;
    		const props = options.props || {};
    		if (ctx.results === undefined && !('results' in props)) {
    			console.warn("<Filter> was created without expected prop 'results'");
    		}
    		if (ctx.prevResults === undefined && !('prevResults' in props)) {
    			console.warn("<Filter> was created without expected prop 'prevResults'");
    		}
    		if (ctx.placeholder === undefined && !('placeholder' in props)) {
    			console.warn("<Filter> was created without expected prop 'placeholder'");
    		}
    		if (ctx.filter === undefined && !('filter' in props)) {
    			console.warn("<Filter> was created without expected prop 'filter'");
    		}
    	}

    	get results() {
    		throw new Error("<Filter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set results(value) {
    		throw new Error("<Filter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prevResults() {
    		throw new Error("<Filter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prevResults(value) {
    		throw new Error("<Filter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<Filter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<Filter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filter() {
    		throw new Error("<Filter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filter(value) {
    		throw new Error("<Filter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/Garage/Owned.svelte generated by Svelte v3.12.1 */

    const file$d = "src/Components/Garage/Owned.svelte";

    // (17:0) {:else}
    function create_else_block$6(ctx) {
    	var h5;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			h5.textContent = "There Are No Vehicles Here";
    			attr_dev(h5, "id", "noneOwn");
    			attr_dev(h5, "class", "svelte-tr8k2");
    			add_location(h5, file$d, 17, 4, 515);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    		},

    		p: noop,
    		i: noop,
    		o: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h5);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$6.name, type: "else", source: "(17:0) {:else}", ctx });
    	return block;
    }

    // (15:0) {#if results.length > 0}
    function create_if_block$7(ctx) {
    	var current;

    	var filter = new Filter({
    		props: {
    		results: ctx.results,
    		prevResults: ctx.prevResults,
    		placeholder: 'Search Garage',
    		filter: 'Garage'
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			filter.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(filter, target, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var filter_changes = {};
    			if (changed.results) filter_changes.results = ctx.results;
    			if (changed.prevResults) filter_changes.prevResults = ctx.prevResults;
    			filter.$set(filter_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(filter.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(filter.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(filter, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$7.name, type: "if", source: "(15:0) {#if results.length > 0}", ctx });
    	return block;
    }

    function create_fragment$e(ctx) {
    	var current_block_type_index, if_block, if_block_anchor, current;

    	var if_block_creators = [
    		create_if_block$7,
    		create_else_block$6
    	];

    	var if_blocks = [];

    	function select_block_type(changed, ctx) {
    		if (ctx.results.length > 0) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(null, ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(changed, ctx);
    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(changed, ctx);
    			} else {
    				group_outros();
    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});
    				check_outros();

    				if_block = if_blocks[current_block_type_index];
    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}
    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$e.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let $garageTab;

    	validate_store(garageTab, 'garageTab');
    	component_subscribe($$self, garageTab, $$value => { $garageTab = $$value; $$invalidate('$garageTab', $garageTab); });

    	

        let results = $garageTab.owned, prevResults = $garageTab.owned;

        setInterval(function() {
            $$invalidate('results', results = $garageTab.owned);
            $$invalidate('prevResults', prevResults = $garageTab.owned);
        }, 1000);

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('results' in $$props) $$invalidate('results', results = $$props.results);
    		if ('prevResults' in $$props) $$invalidate('prevResults', prevResults = $$props.prevResults);
    		if ('$garageTab' in $$props) garageTab.set($garageTab);
    	};

    	return { results, prevResults };
    }

    class Owned extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$e, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Owned", options, id: create_fragment$e.name });
    	}
    }

    /* src/Components/Garage/Shared.svelte generated by Svelte v3.12.1 */

    const file$e = "src/Components/Garage/Shared.svelte";

    // (18:0) {:else}
    function create_else_block$7(ctx) {
    	var h5;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			h5.textContent = "There Are No Vehicles Here";
    			attr_dev(h5, "id", "noneShare");
    			attr_dev(h5, "class", "svelte-1mnytrj");
    			add_location(h5, file$e, 18, 4, 555);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    		},

    		p: noop,
    		i: noop,
    		o: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h5);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$7.name, type: "else", source: "(18:0) {:else}", ctx });
    	return block;
    }

    // (16:0) {#if results.length > 0}
    function create_if_block$8(ctx) {
    	var current;

    	var filter = new Filter({
    		props: {
    		results: ctx.results,
    		prevResults: ctx.prevResults,
    		placeholder: 'Search Shared Garage',
    		filter: 'Garage'
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			filter.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(filter, target, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var filter_changes = {};
    			if (changed.results) filter_changes.results = ctx.results;
    			if (changed.prevResults) filter_changes.prevResults = ctx.prevResults;
    			filter.$set(filter_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(filter.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(filter.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(filter, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$8.name, type: "if", source: "(16:0) {#if results.length > 0}", ctx });
    	return block;
    }

    function create_fragment$f(ctx) {
    	var current_block_type_index, if_block, if_block_anchor, current;

    	var if_block_creators = [
    		create_if_block$8,
    		create_else_block$7
    	];

    	var if_blocks = [];

    	function select_block_type(changed, ctx) {
    		if (ctx.results.length > 0) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(null, ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(changed, ctx);
    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(changed, ctx);
    			} else {
    				group_outros();
    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});
    				check_outros();

    				if_block = if_blocks[current_block_type_index];
    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}
    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$f.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let $garageTab;

    	validate_store(garageTab, 'garageTab');
    	component_subscribe($$self, garageTab, $$value => { $garageTab = $$value; $$invalidate('$garageTab', $garageTab); });

    	

        let results = $garageTab.shared, prevResults = $garageTab.shared;

        setInterval(function() {
            $$invalidate('results', results = $garageTab.shared);
            $$invalidate('prevResults', prevResults = $garageTab.shared);
        }, 1000);

        let cars = [];

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('results' in $$props) $$invalidate('results', results = $$props.results);
    		if ('prevResults' in $$props) $$invalidate('prevResults', prevResults = $$props.prevResults);
    		if ('cars' in $$props) cars = $$props.cars;
    		if ('$garageTab' in $$props) garageTab.set($garageTab);
    	};

    	return { results, prevResults };
    }

    class Shared extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$f, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Shared", options, id: create_fragment$f.name });
    	}
    }

    /* src/Components/Garage/Compare.svelte generated by Svelte v3.12.1 */

    const file$f = "src/Components/Garage/Compare.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.auto = list[i];
    	return child_ctx;
    }

    // (72:0) {:else}
    function create_else_block_1$4(ctx) {
    	var h50, t_1, h51;

    	const block = {
    		c: function create() {
    			h50 = element("h5");
    			h50.textContent = "There Are No Vehicles Here For Comparsion";
    			t_1 = space();
    			h51 = element("h5");
    			h51.textContent = "You Can Compare Up To 7 Vehicles";
    			attr_dev(h50, "id", "noneOwn");
    			attr_dev(h50, "class", "svelte-tr8k2");
    			add_location(h50, file$f, 72, 4, 2915);
    			set_style(h51, "text-align", "center");
    			add_location(h51, file$f, 73, 4, 2983);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h50, anchor);
    			insert_dev(target, t_1, anchor);
    			insert_dev(target, h51, anchor);
    		},

    		p: noop,
    		i: noop,
    		o: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h50);
    				detach_dev(t_1);
    				detach_dev(h51);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_1$4.name, type: "else", source: "(72:0) {:else}", ctx });
    	return block;
    }

    // (15:0) {#if results.length > 0}
    function create_if_block$9(ctx) {
    	var div, table, tr0, td0, span0, t1, tr1, td1, span1, t3, tr2, td2, span2, t5, tr3, td3, span3, t7, tr4, td4, span4, t9, tr5, td5, span5, t11, tr6, td6, span6, t13, tr7, td7, span7, t15, current;

    	let each_value = ctx.results;

    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");
    			table = element("table");
    			tr0 = element("tr");
    			td0 = element("td");
    			span0 = element("span");
    			span0.textContent = "Make";
    			t1 = space();
    			tr1 = element("tr");
    			td1 = element("td");
    			span1 = element("span");
    			span1.textContent = "Year";
    			t3 = space();
    			tr2 = element("tr");
    			td2 = element("td");
    			span2 = element("span");
    			span2.textContent = "Vin";
    			t5 = space();
    			tr3 = element("tr");
    			td3 = element("td");
    			span3 = element("span");
    			span3.textContent = "Cyl";
    			t7 = space();
    			tr4 = element("tr");
    			td4 = element("td");
    			span4 = element("span");
    			span4.textContent = "Status";
    			t9 = space();
    			tr5 = element("tr");
    			td5 = element("td");
    			span5 = element("span");
    			span5.textContent = "Mileage";
    			t11 = space();
    			tr6 = element("tr");
    			td6 = element("td");
    			span6 = element("span");
    			span6.textContent = "Auction Date";
    			t13 = space();
    			tr7 = element("tr");
    			td7 = element("td");
    			span7 = element("span");
    			span7.textContent = "Final Bid";
    			t15 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}
    			attr_dev(span0, "id", "makeKey");
    			add_location(span0, file$f, 19, 20, 614);
    			attr_dev(td0, "align", "center");
    			add_location(td0, file$f, 18, 16, 574);
    			set_style(tr0, "border-bottom", "1px solid black");
    			set_style(tr0, "font-weight", "bold");
    			add_location(tr0, file$f, 17, 12, 497);
    			attr_dev(span1, "id", "yearKey");
    			add_location(span1, file$f, 24, 20, 814);
    			attr_dev(td1, "align", "center");
    			add_location(td1, file$f, 23, 16, 774);
    			set_style(tr1, "border-bottom", "1px solid black");
    			set_style(tr1, "font-weight", "bold");
    			add_location(tr1, file$f, 22, 12, 697);
    			attr_dev(span2, "id", "vinKey");
    			add_location(span2, file$f, 29, 20, 1014);
    			attr_dev(td2, "align", "center");
    			add_location(td2, file$f, 28, 16, 974);
    			set_style(tr2, "border-bottom", "1px solid black");
    			set_style(tr2, "font-weight", "bold");
    			add_location(tr2, file$f, 27, 12, 897);
    			attr_dev(span3, "id", "cylKey");
    			add_location(span3, file$f, 34, 20, 1212);
    			attr_dev(td3, "align", "center");
    			add_location(td3, file$f, 33, 16, 1172);
    			set_style(tr3, "border-bottom", "1px solid black");
    			set_style(tr3, "font-weight", "bold");
    			add_location(tr3, file$f, 32, 12, 1095);
    			attr_dev(span4, "id", "statusKey");
    			add_location(span4, file$f, 39, 20, 1410);
    			attr_dev(td4, "align", "center");
    			add_location(td4, file$f, 38, 16, 1370);
    			set_style(tr4, "border-bottom", "1px solid black");
    			set_style(tr4, "font-weight", "bold");
    			add_location(tr4, file$f, 37, 12, 1293);
    			attr_dev(span5, "id", "mileKey");
    			add_location(span5, file$f, 44, 20, 1614);
    			attr_dev(td5, "align", "center");
    			add_location(td5, file$f, 43, 16, 1574);
    			set_style(tr5, "border-bottom", "1px solid black");
    			set_style(tr5, "font-weight", "bold");
    			add_location(tr5, file$f, 42, 12, 1497);
    			attr_dev(span6, "id", "dateKey");
    			add_location(span6, file$f, 49, 20, 1817);
    			attr_dev(td6, "align", "center");
    			add_location(td6, file$f, 48, 16, 1777);
    			set_style(tr6, "border-bottom", "1px solid black");
    			set_style(tr6, "font-weight", "bold");
    			add_location(tr6, file$f, 47, 12, 1700);
    			attr_dev(span7, "id", "bidKey");
    			add_location(span7, file$f, 54, 20, 2025);
    			attr_dev(td7, "align", "center");
    			add_location(td7, file$f, 53, 16, 1985);
    			set_style(tr7, "border-bottom", "1px solid black");
    			set_style(tr7, "font-weight", "bold");
    			add_location(tr7, file$f, 52, 12, 1908);
    			set_style(table, "float", "left");
    			set_style(table, "font-size", "13px");
    			set_style(table, "margin-top", "123px");
    			attr_dev(table, "width", "140");
    			attr_dev(table, "height", "211");
    			attr_dev(table, "border", "0");
    			add_location(table, file$f, 16, 8, 389);
    			set_style(div, "margin-top", "10%");
    			set_style(div, "margin-left", "40px");
    			add_location(div, file$f, 15, 4, 334);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, table);
    			append_dev(table, tr0);
    			append_dev(tr0, td0);
    			append_dev(td0, span0);
    			append_dev(table, t1);
    			append_dev(table, tr1);
    			append_dev(tr1, td1);
    			append_dev(td1, span1);
    			append_dev(table, t3);
    			append_dev(table, tr2);
    			append_dev(tr2, td2);
    			append_dev(td2, span2);
    			append_dev(table, t5);
    			append_dev(table, tr3);
    			append_dev(tr3, td3);
    			append_dev(td3, span3);
    			append_dev(table, t7);
    			append_dev(table, tr4);
    			append_dev(tr4, td4);
    			append_dev(td4, span4);
    			append_dev(table, t9);
    			append_dev(table, tr5);
    			append_dev(tr5, td5);
    			append_dev(td5, span5);
    			append_dev(table, t11);
    			append_dev(table, tr6);
    			append_dev(tr6, td6);
    			append_dev(td6, span6);
    			append_dev(table, t13);
    			append_dev(table, tr7);
    			append_dev(tr7, td7);
    			append_dev(td7, span7);
    			append_dev(div, t15);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (changed.results) {
    				each_value = ctx.results;

    				let i;
    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();
    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}
    				check_outros();
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},

    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			destroy_each(each_blocks, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$9.name, type: "if", source: "(15:0) {#if results.length > 0}", ctx });
    	return block;
    }

    // (65:12) {:else}
    function create_else_block$8(ctx) {
    	var current;

    	var card = new Template({
    		props: {
    		id: ctx.auto._id || ctx.auto.id,
    		year: ctx.auto.Year,
    		model: ctx.auto.Model,
    		url: ctx.auto.Images[0],
    		vin: ctx.auto.VIN,
    		cyl: ctx.auto.CYL,
    		status: ctx.auto.Status,
    		price: ctx.auto.Price,
    		mileage: ctx.auto.Mileage,
    		date: ctx.auto.Date,
    		images: ctx.auto.Images
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			card.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var card_changes = {};
    			if (changed.results) card_changes.id = ctx.auto._id || ctx.auto.id;
    			if (changed.results) card_changes.year = ctx.auto.Year;
    			if (changed.results) card_changes.model = ctx.auto.Model;
    			if (changed.results) card_changes.url = ctx.auto.Images[0];
    			if (changed.results) card_changes.vin = ctx.auto.VIN;
    			if (changed.results) card_changes.cyl = ctx.auto.CYL;
    			if (changed.results) card_changes.status = ctx.auto.Status;
    			if (changed.results) card_changes.price = ctx.auto.Price;
    			if (changed.results) card_changes.mileage = ctx.auto.Mileage;
    			if (changed.results) card_changes.date = ctx.auto.Date;
    			if (changed.results) card_changes.images = ctx.auto.Images;
    			card.$set(card_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$8.name, type: "else", source: "(65:12) {:else}", ctx });
    	return block;
    }

    // (61:12) {#if auto.Images === undefined || auto.Images.length == 0}
    function create_if_block_1$6(ctx) {
    	var current;

    	var card = new Template({
    		props: {
    		id: ctx.auto._id || ctx.auto.id,
    		year: ctx.auto.Year,
    		model: ctx.auto.Model,
    		url: "https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg",
    		vin: ctx.auto.VIN,
    		cyl: ctx.auto.CYL,
    		status: ctx.auto.Status,
    		price: ctx.auto.Price,
    		mileage: ctx.auto.Mileage,
    		date: ctx.auto.Date,
    		images: undefined
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			card.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var card_changes = {};
    			if (changed.results) card_changes.id = ctx.auto._id || ctx.auto.id;
    			if (changed.results) card_changes.year = ctx.auto.Year;
    			if (changed.results) card_changes.model = ctx.auto.Model;
    			if (changed.results) card_changes.vin = ctx.auto.VIN;
    			if (changed.results) card_changes.cyl = ctx.auto.CYL;
    			if (changed.results) card_changes.status = ctx.auto.Status;
    			if (changed.results) card_changes.price = ctx.auto.Price;
    			if (changed.results) card_changes.mileage = ctx.auto.Mileage;
    			if (changed.results) card_changes.date = ctx.auto.Date;
    			card.$set(card_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$6.name, type: "if", source: "(61:12) {#if auto.Images === undefined || auto.Images.length == 0}", ctx });
    	return block;
    }

    // (60:8) {#each results as auto}
    function create_each_block$3(ctx) {
    	var current_block_type_index, if_block, if_block_anchor, current;

    	var if_block_creators = [
    		create_if_block_1$6,
    		create_else_block$8
    	];

    	var if_blocks = [];

    	function select_block_type_1(changed, ctx) {
    		if (ctx.auto.Images === undefined || ctx.auto.Images.length == 0) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(null, ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(changed, ctx);
    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(changed, ctx);
    			} else {
    				group_outros();
    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});
    				check_outros();

    				if_block = if_blocks[current_block_type_index];
    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}
    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block$3.name, type: "each", source: "(60:8) {#each results as auto}", ctx });
    	return block;
    }

    function create_fragment$g(ctx) {
    	var current_block_type_index, if_block, if_block_anchor, current;

    	var if_block_creators = [
    		create_if_block$9,
    		create_else_block_1$4
    	];

    	var if_blocks = [];

    	function select_block_type(changed, ctx) {
    		if (ctx.results.length > 0) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(null, ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(changed, ctx);
    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(changed, ctx);
    			} else {
    				group_outros();
    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});
    				check_outros();

    				if_block = if_blocks[current_block_type_index];
    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}
    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$g.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let $garageTab;

    	validate_store(garageTab, 'garageTab');
    	component_subscribe($$self, garageTab, $$value => { $garageTab = $$value; $$invalidate('$garageTab', $garageTab); });

    	

        let results = $garageTab.compare;

        setInterval(function() {
            $$invalidate('results', results = $garageTab.compare);
        }, 1000);

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('results' in $$props) $$invalidate('results', results = $$props.results);
    		if ('$garageTab' in $$props) garageTab.set($garageTab);
    	};

    	return { results };
    }

    class Compare extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$g, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Compare", options, id: create_fragment$g.name });
    	}
    }

    /* src/Pages/Garage.svelte generated by Svelte v3.12.1 */

    const file$g = "src/Pages/Garage.svelte";

    // (28:16) {#if ownCount > 0}
    function create_if_block_4$4(ctx) {
    	var span, t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(ctx.ownCount);
    			attr_dev(span, "class", "badge badge-primary svelte-kw7e43");
    			add_location(span, file$g, 28, 20, 879);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},

    		p: function update(changed, ctx) {
    			if (changed.ownCount) {
    				set_data_dev(t, ctx.ownCount);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_4$4.name, type: "if", source: "(28:16) {#if ownCount > 0}", ctx });
    	return block;
    }

    // (25:8) <Tab>
    function create_default_slot_7(ctx) {
    	var div, t, dispose;

    	var if_block = (ctx.ownCount > 0) && create_if_block_4$4(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Owned\n                ");
    			if (if_block) if_block.c();
    			add_location(div, file$g, 25, 12, 758);
    			dispose = listen_dev(div, "click", ctx.click_handler);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);
    		},

    		p: function update(changed, ctx) {
    			if (ctx.ownCount > 0) {
    				if (if_block) {
    					if_block.p(changed, ctx);
    				} else {
    					if_block = create_if_block_4$4(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			if (if_block) if_block.d();
    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot_7.name, type: "slot", source: "(25:8) <Tab>", ctx });
    	return block;
    }

    // (33:8) {#if screenWidth > 1024}
    function create_if_block_2$6(ctx) {
    	var current;

    	var tab = new Tab({
    		props: {
    		$$slots: { default: [create_default_slot_6] },
    		$$scope: { ctx }
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			tab.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(tab, target, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var tab_changes = {};
    			if (changed.$$scope || changed.comCount) tab_changes.$$scope = { changed, ctx };
    			tab.$set(tab_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(tab.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(tab.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(tab, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$6.name, type: "if", source: "(33:8) {#if screenWidth > 1024}", ctx });
    	return block;
    }

    // (37:20) {#if comCount > 0}
    function create_if_block_3$5(ctx) {
    	var span, t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(ctx.comCount);
    			attr_dev(span, "class", "badge badge-primary svelte-kw7e43");
    			add_location(span, file$g, 37, 24, 1190);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},

    		p: function update(changed, ctx) {
    			if (changed.comCount) {
    				set_data_dev(t, ctx.comCount);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_3$5.name, type: "if", source: "(37:20) {#if comCount > 0}", ctx });
    	return block;
    }

    // (34:12) <Tab>
    function create_default_slot_6(ctx) {
    	var div, t, dispose;

    	var if_block = (ctx.comCount > 0) && create_if_block_3$5(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Compared\n                    ");
    			if (if_block) if_block.c();
    			add_location(div, file$g, 34, 16, 1054);
    			dispose = listen_dev(div, "click", ctx.click_handler_1);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);
    		},

    		p: function update(changed, ctx) {
    			if (ctx.comCount > 0) {
    				if (if_block) {
    					if_block.p(changed, ctx);
    				} else {
    					if_block = create_if_block_3$5(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			if (if_block) if_block.d();
    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot_6.name, type: "slot", source: "(34:12) <Tab>", ctx });
    	return block;
    }

    // (46:16) {#if shrCount > 0}
    function create_if_block_1$7(ctx) {
    	var span, t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(ctx.shrCount);
    			attr_dev(span, "class", "badge badge-primary svelte-kw7e43");
    			add_location(span, file$g, 46, 20, 1472);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},

    		p: function update(changed, ctx) {
    			if (changed.shrCount) {
    				set_data_dev(t, ctx.shrCount);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$7.name, type: "if", source: "(46:16) {#if shrCount > 0}", ctx });
    	return block;
    }

    // (43:8) <Tab>
    function create_default_slot_5(ctx) {
    	var div, t, dispose;

    	var if_block = (ctx.shrCount > 0) && create_if_block_1$7(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Shared\n                ");
    			if (if_block) if_block.c();
    			add_location(div, file$g, 43, 12, 1350);
    			dispose = listen_dev(div, "click", ctx.click_handler_2);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);
    		},

    		p: function update(changed, ctx) {
    			if (ctx.shrCount > 0) {
    				if (if_block) {
    					if_block.p(changed, ctx);
    				} else {
    					if_block = create_if_block_1$7(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			if (if_block) if_block.d();
    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot_5.name, type: "slot", source: "(43:8) <Tab>", ctx });
    	return block;
    }

    // (24:4) <TabList>
    function create_default_slot_4(ctx) {
    	var t0, t1, current;

    	var tab0 = new Tab({
    		props: {
    		$$slots: { default: [create_default_slot_7] },
    		$$scope: { ctx }
    	},
    		$$inline: true
    	});

    	var if_block = (ctx.screenWidth > 1024) && create_if_block_2$6(ctx);

    	var tab1 = new Tab({
    		props: {
    		$$slots: { default: [create_default_slot_5] },
    		$$scope: { ctx }
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			tab0.$$.fragment.c();
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			tab1.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(tab0, target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(tab1, target, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var tab0_changes = {};
    			if (changed.$$scope || changed.ownCount) tab0_changes.$$scope = { changed, ctx };
    			tab0.$set(tab0_changes);

    			if (ctx.screenWidth > 1024) if_block.p(changed, ctx);

    			var tab1_changes = {};
    			if (changed.$$scope || changed.shrCount) tab1_changes.$$scope = { changed, ctx };
    			tab1.$set(tab1_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(tab0.$$.fragment, local);

    			transition_in(if_block);

    			transition_in(tab1.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(tab0.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(tab1.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(tab0, detaching);

    			if (detaching) {
    				detach_dev(t0);
    			}

    			if (if_block) if_block.d(detaching);

    			if (detaching) {
    				detach_dev(t1);
    			}

    			destroy_component(tab1, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot_4.name, type: "slot", source: "(24:4) <TabList>", ctx });
    	return block;
    }

    // (53:4) <TabPanel>
    function create_default_slot_3(ctx) {
    	var current;

    	var owned = new Owned({ $$inline: true });

    	const block = {
    		c: function create() {
    			owned.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(owned, target, anchor);
    			current = true;
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(owned.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(owned.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(owned, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot_3.name, type: "slot", source: "(53:4) <TabPanel>", ctx });
    	return block;
    }

    // (57:4) {#if screenWidth > 1024}
    function create_if_block$a(ctx) {
    	var current;

    	var tabpanel = new TabPanel({
    		props: {
    		$$slots: { default: [create_default_slot_2] },
    		$$scope: { ctx }
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			tabpanel.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(tabpanel, target, anchor);
    			current = true;
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(tabpanel.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(tabpanel.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(tabpanel, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$a.name, type: "if", source: "(57:4) {#if screenWidth > 1024}", ctx });
    	return block;
    }

    // (58:8) <TabPanel>
    function create_default_slot_2(ctx) {
    	var current;

    	var compare = new Compare({ $$inline: true });

    	const block = {
    		c: function create() {
    			compare.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(compare, target, anchor);
    			current = true;
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(compare.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(compare.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(compare, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot_2.name, type: "slot", source: "(58:8) <TabPanel>", ctx });
    	return block;
    }

    // (63:4) <TabPanel>
    function create_default_slot_1(ctx) {
    	var current;

    	var shared = new Shared({ $$inline: true });

    	const block = {
    		c: function create() {
    			shared.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(shared, target, anchor);
    			current = true;
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(shared.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(shared.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(shared, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot_1.name, type: "slot", source: "(63:4) <TabPanel>", ctx });
    	return block;
    }

    // (23:0) <Tabs>
    function create_default_slot(ctx) {
    	var t0, t1, t2, current;

    	var tablist = new TabList({
    		props: {
    		$$slots: { default: [create_default_slot_4] },
    		$$scope: { ctx }
    	},
    		$$inline: true
    	});

    	var tabpanel0 = new TabPanel({
    		props: {
    		$$slots: { default: [create_default_slot_3] },
    		$$scope: { ctx }
    	},
    		$$inline: true
    	});

    	var if_block = (ctx.screenWidth > 1024) && create_if_block$a(ctx);

    	var tabpanel1 = new TabPanel({
    		props: {
    		$$slots: { default: [create_default_slot_1] },
    		$$scope: { ctx }
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			tablist.$$.fragment.c();
    			t0 = space();
    			tabpanel0.$$.fragment.c();
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			tabpanel1.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(tablist, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(tabpanel0, target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(tabpanel1, target, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var tablist_changes = {};
    			if (changed.$$scope || changed.shrCount || changed.comCount || changed.ownCount) tablist_changes.$$scope = { changed, ctx };
    			tablist.$set(tablist_changes);

    			var tabpanel0_changes = {};
    			if (changed.$$scope) tabpanel0_changes.$$scope = { changed, ctx };
    			tabpanel0.$set(tabpanel0_changes);

    			var tabpanel1_changes = {};
    			if (changed.$$scope) tabpanel1_changes.$$scope = { changed, ctx };
    			tabpanel1.$set(tabpanel1_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(tablist.$$.fragment, local);

    			transition_in(tabpanel0.$$.fragment, local);

    			transition_in(if_block);

    			transition_in(tabpanel1.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(tablist.$$.fragment, local);
    			transition_out(tabpanel0.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(tabpanel1.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(tablist, detaching);

    			if (detaching) {
    				detach_dev(t0);
    			}

    			destroy_component(tabpanel0, detaching);

    			if (detaching) {
    				detach_dev(t1);
    			}

    			if (if_block) if_block.d(detaching);

    			if (detaching) {
    				detach_dev(t2);
    			}

    			destroy_component(tabpanel1, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot.name, type: "slot", source: "(23:0) <Tabs>", ctx });
    	return block;
    }

    function create_fragment$h(ctx) {
    	var h1, t_1, current;

    	var tabs = new Tabs({
    		props: {
    		$$slots: { default: [create_default_slot] },
    		$$scope: { ctx }
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Garage";
    			t_1 = space();
    			tabs.$$.fragment.c();
    			add_location(h1, file$g, 20, 0, 694);
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t_1, anchor);
    			mount_component(tabs, target, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var tabs_changes = {};
    			if (changed.$$scope || changed.shrCount || changed.comCount || changed.ownCount) tabs_changes.$$scope = { changed, ctx };
    			tabs.$set(tabs_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(tabs.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(tabs.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h1);
    				detach_dev(t_1);
    			}

    			destroy_component(tabs, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$h.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let $garageTab;

    	validate_store(garageTab, 'garageTab');
    	component_subscribe($$self, garageTab, $$value => { $garageTab = $$value; $$invalidate('$garageTab', $garageTab); });

    	

        let ownCount = $garageTab.owned.length;
        let comCount = $garageTab.compare.length;
        let shrCount = $garageTab.shared.length;

        let screenWidth = screen.width;

        setInterval(function() {
            $$invalidate('ownCount', ownCount = $garageTab.owned.length);
            $$invalidate('comCount', comCount = $garageTab.compare.length);
            $$invalidate('shrCount', shrCount = $garageTab.shared.length);
        }, 1000);

    	const click_handler = () => garageIndex.set(0);

    	const click_handler_1 = () => garageIndex.set(1);

    	const click_handler_2 = () => garageIndex.set(2);

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('ownCount' in $$props) $$invalidate('ownCount', ownCount = $$props.ownCount);
    		if ('comCount' in $$props) $$invalidate('comCount', comCount = $$props.comCount);
    		if ('shrCount' in $$props) $$invalidate('shrCount', shrCount = $$props.shrCount);
    		if ('screenWidth' in $$props) $$invalidate('screenWidth', screenWidth = $$props.screenWidth);
    		if ('$garageTab' in $$props) garageTab.set($garageTab);
    	};

    	return {
    		ownCount,
    		comCount,
    		shrCount,
    		screenWidth,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	};
    }

    class Garage extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$h, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Garage", options, id: create_fragment$h.name });
    	}
    }

    class User {

        constructor() {
            this.isAuth = false;
        }

        setTokens(data) {
            this.tokens = data.tokns != null ? data.tokns : data;
        }

        setKeyCode(data) {
            this.keyCode = data.key != null ? data.key : null;
        }
    }

    class Auto {

        constructor(auto) {

            this.CYL = auto.CYL;
            this.date = auto.Date;
            this.mileage = auto.Mileage;
            this.model = auto.Model;
            this.price = auto.Price;
            this.status = auto.Status;
            this.VIN = auto.VIN;
            this.year = auto.Year;
            this.images = auto.Images;
        }
    }

    class Home {

        constructor() { 
            this.saved = false;
        }

        initHome(data) {
            let i;

            this.saved = true;

            for(i = 0; i < data.weekAucts.length; i++) {
                this.week.push(new Auto(data.weekAucts[i]));
            }

            for(i = 0; i < data.nextAucts.length; i++) {
                this.next.push(new Auto(data.nextAucts[i]));
            }
        }
    }

    let currUser = writable(new User());

    let homeTab$1 = writable(new Home());

    const storageKey$1 = v5(window.location.hostname, v5.DNS);

    const tabIndex$1 = writable(0);

    window.onbeforeunload = async function() {

        const indexes = {};

        tabIndex$1.update(state => {
            indexes.tab = state;
            return state;
        });

        currUser.update(state => {
            indexes.user = state;
            return state;
        });

        sessionStorage.setItem('idx', JSON.stringify(indexes));

        const cache = await caches.open('autoknct');
        await cache.delete('/bundle.js');
        await cache.delete('/bundle.css');
    };

    let inactivityTime$1 = function () {
        let time;
        window.onload = resetTimer;
        // DOM Events
        document.onmousemove = resetTimer;
        document.onkeypress = resetTimer;
        document.onload = resetTimer;
        document.onmousemove = resetTimer;
        document.onmousedown = resetTimer; // touchscreen presses
        document.ontouchstart = resetTimer;
        document.onclick = resetTimer;     // touchpad clicks
        document.onscroll = resetTimer;    // scrolling with arrow keys
        document.onkeypress = resetTimer;

        function logout() {
            // resetStates();
        }

        function resetTimer() {
            clearTimeout(time);
            time = setTimeout(logout, 900000);
        }
    };

    window.onload = async function() {
        if (sessionStorage.getItem('idx') != null && sessionStorage.getItem(storageKey$1) != null) {

            const indexes = await JSON.parse(sessionStorage.getItem('idx'));
            
            await tabIndex$1.set(indexes.tab);

            await currUser.set(indexes.user);

            sessionStorage.removeItem('idx');
        }
        
        inactivityTime$1(); 
        const cache = await caches.open('autoknct');
        await cache.addAll(['/bundle.js', '/bundle.css']);
    };

    function invokeLambda$1(api, load) {
        return new Promise((resolve, reject) => {

            load.env = window.location.hostname;

            currUser.update(state => {
                load.tokens = state.tokens || null;
                load.type = state.access_level || null;
                return state;
            });
            
            if(typeof load.id == "undefined") {
                currUser.update(state => {
                    load.id = state.user_id || sessionStorage.getItem(storageKey$1);
                    return state;
                });
            }

            fetch(api, {
                method: 'post',
                body: JSON.stringify(load),
                headers: { 'Content-Type': 'application/json' },
                'Access-Control-Allow-Origin' : '*'
            })
            .then(res =>
                res.json()
            )
            .then(json => {
                resolve(json);
            })
            .catch(err => 
                reject(err)
            );
        });
    }

    /* src/Components/Home/initAutos.svelte generated by Svelte v3.12.1 */

    const file$h = "src/Components/Home/initAutos.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.auto = list[i];
    	return child_ctx;
    }

    // (78:0) {#if showMsg}
    function create_if_block_3$6(ctx) {
    	var div, div_intro, div_outro, current;

    	var message_1 = new StatusMsg({
    		props: {
    		heading: ctx.heading,
    		message: ctx.message,
    		status: ctx.statusColor
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			div = element("div");
    			message_1.$$.fragment.c();
    			attr_dev(div, "id", "status");
    			attr_dev(div, "class", "container-fluid svelte-65olre");
    			add_location(div, file$h, 78, 4, 2348);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(message_1, div, null);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var message_1_changes = {};
    			if (changed.heading) message_1_changes.heading = ctx.heading;
    			if (changed.message) message_1_changes.message = ctx.message;
    			if (changed.statusColor) message_1_changes.status = ctx.statusColor;
    			message_1.$set(message_1_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(message_1.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				if (!div_intro) div_intro = create_in_transition(div, fly, { x:200, duration:500 });
    				div_intro.start();
    			});

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(message_1.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();

    			div_outro = create_out_transition(div, fly, { x:200, duration:500 });

    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			destroy_component(message_1);

    			if (detaching) {
    				if (div_outro) div_outro.end();
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_3$6.name, type: "if", source: "(78:0) {#if showMsg}", ctx });
    	return block;
    }

    // (89:0) {:else}
    function create_else_block$9(ctx) {
    	var h20, t1, t2, table, tr, td, t3, hr, t4, h21, t6, t7, if_block_anchor, current;

    	var filter = new Filter({
    		props: {
    		results: ctx.next,
    		prevResults: ctx.next,
    		placeholder: 'Search Upcoming Auctions',
    		filter: 'Auction'
    	},
    		$$inline: true
    	});

    	let each_value = ctx.week;

    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	var if_block = (ctx.screenWidth <= 1024) && create_if_block_1$8(ctx);

    	const block = {
    		c: function create() {
    			h20 = element("h2");
    			h20.textContent = "Upcoming Auctions";
    			t1 = space();
    			filter.$$.fragment.c();
    			t2 = space();
    			table = element("table");
    			tr = element("tr");
    			td = element("td");
    			t3 = space();
    			hr = element("hr");
    			t4 = space();
    			h21 = element("h2");
    			h21.textContent = "This Week's Popular Auctions";
    			t6 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t7 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(h20, "id", "heading");
    			attr_dev(h20, "class", "svelte-65olre");
    			add_location(h20, file$h, 89, 4, 2797);
    			add_location(td, file$h, 95, 12, 3003);
    			add_location(tr, file$h, 94, 8, 2986);
    			set_style(table, "width", "100%");
    			add_location(table, file$h, 93, 4, 2951);
    			add_location(hr, file$h, 99, 4, 3045);
    			attr_dev(h21, "id", "heading");
    			attr_dev(h21, "class", "svelte-65olre");
    			add_location(h21, file$h, 101, 4, 3056);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h20, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(filter, target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, tr);
    			append_dev(tr, td);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, h21, anchor);
    			insert_dev(target, t6, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t7, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var filter_changes = {};
    			if (changed.next) filter_changes.results = ctx.next;
    			if (changed.next) filter_changes.prevResults = ctx.next;
    			filter.$set(filter_changes);

    			if (changed.week) {
    				each_value = ctx.week;

    				let i;
    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(t7.parentNode, t7);
    					}
    				}

    				group_outros();
    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}
    				check_outros();
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(filter.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(filter.$$.fragment, local);

    			each_blocks = each_blocks.filter(Boolean);
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h20);
    				detach_dev(t1);
    			}

    			destroy_component(filter, detaching);

    			if (detaching) {
    				detach_dev(t2);
    				detach_dev(table);
    				detach_dev(t3);
    				detach_dev(hr);
    				detach_dev(t4);
    				detach_dev(h21);
    				detach_dev(t6);
    			}

    			destroy_each(each_blocks, detaching);

    			if (detaching) {
    				detach_dev(t7);
    			}

    			if (if_block) if_block.d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$9.name, type: "else", source: "(89:0) {:else}", ctx });
    	return block;
    }

    // (84:0) {#if week.length == 0 || next.length == 0}
    function create_if_block$b(ctx) {
    	var div, img, t, h6;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			t = space();
    			h6 = element("h6");
    			h6.textContent = "Loading...";
    			attr_dev(img, "src", "https://autoarch.blob.core.windows.net/resources/loader.gif");
    			attr_dev(img, "alt", "Loader");
    			add_location(img, file$h, 85, 8, 2637);
    			attr_dev(div, "class", "text-center svelte-65olre");
    			add_location(div, file$h, 84, 4, 2603);
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$h, 87, 4, 2738);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			insert_dev(target, t, anchor);
    			insert_dev(target, h6, anchor);
    		},

    		p: noop,
    		i: noop,
    		o: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    				detach_dev(t);
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$b.name, type: "if", source: "(84:0) {#if week.length == 0 || next.length == 0}", ctx });
    	return block;
    }

    // (109:8) {:else}
    function create_else_block_1$5(ctx) {
    	var current;

    	var card = new Template({
    		props: {
    		id: ctx.auto._id || ctx.auto.id,
    		year: ctx.auto.Year,
    		model: ctx.auto.Model,
    		url: ctx.auto.Images[0],
    		vin: ctx.auto.VIN,
    		cyl: ctx.auto.CYL,
    		status: ctx.auto.Status,
    		price: ctx.auto.Price,
    		mileage: ctx.auto.Mileage,
    		date: ctx.auto.Date,
    		images: ctx.auto.Images
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			card.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var card_changes = {};
    			if (changed.week) card_changes.id = ctx.auto._id || ctx.auto.id;
    			if (changed.week) card_changes.year = ctx.auto.Year;
    			if (changed.week) card_changes.model = ctx.auto.Model;
    			if (changed.week) card_changes.url = ctx.auto.Images[0];
    			if (changed.week) card_changes.vin = ctx.auto.VIN;
    			if (changed.week) card_changes.cyl = ctx.auto.CYL;
    			if (changed.week) card_changes.status = ctx.auto.Status;
    			if (changed.week) card_changes.price = ctx.auto.Price;
    			if (changed.week) card_changes.mileage = ctx.auto.Mileage;
    			if (changed.week) card_changes.date = ctx.auto.Date;
    			if (changed.week) card_changes.images = ctx.auto.Images;
    			card.$set(card_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_1$5.name, type: "else", source: "(109:8) {:else}", ctx });
    	return block;
    }

    // (105:8) {#if auto.Images === undefined || auto.Images.length == 0}
    function create_if_block_2$7(ctx) {
    	var current;

    	var card = new Template({
    		props: {
    		id: ctx.auto._id || ctx.auto.id,
    		year: ctx.auto.Year,
    		model: ctx.auto.Model,
    		url: "https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg",
    		vin: ctx.auto.VIN,
    		cyl: ctx.auto.CYL,
    		status: ctx.auto.Status,
    		price: ctx.auto.Price,
    		mileage: ctx.auto.Mileage,
    		date: ctx.auto.Date,
    		images: undefined
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			card.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var card_changes = {};
    			if (changed.week) card_changes.id = ctx.auto._id || ctx.auto.id;
    			if (changed.week) card_changes.year = ctx.auto.Year;
    			if (changed.week) card_changes.model = ctx.auto.Model;
    			if (changed.week) card_changes.vin = ctx.auto.VIN;
    			if (changed.week) card_changes.cyl = ctx.auto.CYL;
    			if (changed.week) card_changes.status = ctx.auto.Status;
    			if (changed.week) card_changes.price = ctx.auto.Price;
    			if (changed.week) card_changes.mileage = ctx.auto.Mileage;
    			if (changed.week) card_changes.date = ctx.auto.Date;
    			card.$set(card_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$7.name, type: "if", source: "(105:8) {#if auto.Images === undefined || auto.Images.length == 0}", ctx });
    	return block;
    }

    // (104:4) {#each week as auto}
    function create_each_block$4(ctx) {
    	var current_block_type_index, if_block, if_block_anchor, current;

    	var if_block_creators = [
    		create_if_block_2$7,
    		create_else_block_1$5
    	];

    	var if_blocks = [];

    	function select_block_type_1(changed, ctx) {
    		if (ctx.auto.Images === undefined || ctx.auto.Images.length == 0) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(null, ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(changed, ctx);
    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(changed, ctx);
    			} else {
    				group_outros();
    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});
    				check_outros();

    				if_block = if_blocks[current_block_type_index];
    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}
    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block$4.name, type: "each", source: "(104:4) {#each week as auto}", ctx });
    	return block;
    }

    // (116:4) {#if screenWidth <= 1024}
    function create_if_block_1$8(ctx) {
    	var table, tr, td;

    	const block = {
    		c: function create() {
    			table = element("table");
    			tr = element("tr");
    			td = element("td");
    			add_location(td, file$h, 118, 16, 3952);
    			add_location(tr, file$h, 117, 12, 3931);
    			set_style(table, "width", "100%");
    			set_style(table, "height", "100px");
    			add_location(table, file$h, 116, 8, 3878);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, tr);
    			append_dev(tr, td);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(table);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$8.name, type: "if", source: "(116:4) {#if screenWidth <= 1024}", ctx });
    	return block;
    }

    function create_fragment$i(ctx) {
    	var t, current_block_type_index, if_block1, if_block1_anchor, current;

    	var if_block0 = (ctx.showMsg) && create_if_block_3$6(ctx);

    	var if_block_creators = [
    		create_if_block$b,
    		create_else_block$9
    	];

    	var if_blocks = [];

    	function select_block_type(changed, ctx) {
    		if (ctx.week.length == 0 || ctx.next.length == 0) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(null, ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t = space();
    			if_block1.c();
    			if_block1_anchor = empty();
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (ctx.showMsg) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    					transition_in(if_block0, 1);
    				} else {
    					if_block0 = create_if_block_3$6(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t.parentNode, t);
    				}
    			} else if (if_block0) {
    				group_outros();
    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});
    				check_outros();
    			}

    			var previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(changed, ctx);
    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(changed, ctx);
    			} else {
    				group_outros();
    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});
    				check_outros();

    				if_block1 = if_blocks[current_block_type_index];
    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				}
    				transition_in(if_block1, 1);
    				if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);

    			if (detaching) {
    				detach_dev(t);
    			}

    			if_blocks[current_block_type_index].d(detaching);

    			if (detaching) {
    				detach_dev(if_block1_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$i.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let $acctTab, $homeTab;

    	validate_store(acctTab, 'acctTab');
    	component_subscribe($$self, acctTab, $$value => { $acctTab = $$value; $$invalidate('$acctTab', $acctTab); });
    	validate_store(homeTab$1, 'homeTab');
    	component_subscribe($$self, homeTab$1, $$value => { $homeTab = $$value; $$invalidate('$homeTab', $homeTab); });

    	

        let week = [], next = [];

        let showMsg = false, heading = '', message = '', statusColor = ''; 

        let screenWidth = screen.width;

        document.documentElement.style.setProperty('--msg-color', statusColor);

        if(sessionStorage.getItem(storageKey$1) == null) {

            sessionStorage.setItem(storageKey$1, $acctTab.uuid);

            setTimeout(function() { 
                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Successful Login!'), $$invalidate('message', message = 'Welcome ' + $acctTab.name), $$invalidate('statusColor', statusColor = 'green');
            }, 1000);

            setTimeout(function() { 
                $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
            }, 3000);
        }

        function initHome() {

    		let Payload = { func : 'initRecords' };

            invokeLambda$1(env.lambda.pythonAPI, Payload).then(async (response) => {

                await homeTab$1.update(state => {
                    state.initHome(response);
                    return state;
                });

                $$invalidate('week', week = await $homeTab.week);
                $$invalidate('next', next = await $homeTab.next);
                /*
                homeTab.update(state => {
                    state.saved = true;
                    state.week = response.weekAucts;
                    state.next = response.nextAucts;
                    return state;
                });
    */
            }).catch((err) => {

                console.log(err);

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Home'), $$invalidate('message', message = 'Unable To Get Latest Updates'), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 5000);

            });
        }
        
        onMount(async () => {
            if($homeTab.saved) {
                $$invalidate('week', week = await $homeTab.week);
                $$invalidate('next', next = await $homeTab.next);
            } else{
                await initHome();
            }
        });

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('week' in $$props) $$invalidate('week', week = $$props.week);
    		if ('next' in $$props) $$invalidate('next', next = $$props.next);
    		if ('showMsg' in $$props) $$invalidate('showMsg', showMsg = $$props.showMsg);
    		if ('heading' in $$props) $$invalidate('heading', heading = $$props.heading);
    		if ('message' in $$props) $$invalidate('message', message = $$props.message);
    		if ('statusColor' in $$props) $$invalidate('statusColor', statusColor = $$props.statusColor);
    		if ('screenWidth' in $$props) $$invalidate('screenWidth', screenWidth = $$props.screenWidth);
    		if ('$acctTab' in $$props) acctTab.set($acctTab);
    		if ('$homeTab' in $$props) homeTab$1.set($homeTab);
    	};

    	return {
    		week,
    		next,
    		showMsg,
    		heading,
    		message,
    		statusColor,
    		screenWidth
    	};
    }

    class InitAutos extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$i, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "InitAutos", options, id: create_fragment$i.name });
    	}
    }

    /* src/Pages/Home.svelte generated by Svelte v3.12.1 */

    const file$i = "src/Pages/Home.svelte";

    function create_fragment$j(ctx) {
    	var h1, t_1, current;

    	var init_1 = new InitAutos({ $$inline: true });

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Home";
    			t_1 = space();
    			init_1.$$.fragment.c();
    			add_location(h1, file$i, 4, 0, 86);
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t_1, anchor);
    			mount_component(init_1, target, anchor);
    			current = true;
    		},

    		p: noop,

    		i: function intro(local) {
    			if (current) return;
    			transition_in(init_1.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(init_1.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h1);
    				detach_dev(t_1);
    			}

    			destroy_component(init_1, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$j.name, type: "component", source: "", ctx });
    	return block;
    }

    class Home$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, null, create_fragment$j, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Home", options, id: create_fragment$j.name });
    	}
    }

    /* src/Components/Search/Chart.svelte generated by Svelte v3.12.1 */

    const file$j = "src/Components/Search/Chart.svelte";

    function create_fragment$k(ctx) {
    	var canvas;

    	const block = {
    		c: function create() {
    			canvas = element("canvas");
    			attr_dev(canvas, "id", "sChart");
    			attr_dev(canvas, "width", "400");
    			attr_dev(canvas, "height", "400");
    			add_location(canvas, file$j, 44, 0, 1508);
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, canvas, anchor);
    		},

    		p: noop,
    		i: noop,
    		o: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(canvas);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$k.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	

        let { xValues, yValues, rightYValues } = $$props;

        function createSearchChart() {
            let ctx = document.getElementById('sChart').getContext('2d');

            let dataSet = [{ label : "Average Bid", yAxisID : "Prices", data : yValues, borderWidth : 1, backgroundColor : 'rgba(255, 99, 132, 0.2)', borderColor : 'rgba(255,99,132,1)' }, { label : "Vehicle Count", yAxisID : "Count", data : rightYValues, borderWidth : 1, backgroundColor : 'rgba(132, 99, 255, 0.2)', borderColor : 'rgba(132,99,255,1)' }];
            
            let yAxis = [{ id: 'Prices', type: 'linear', position: 'left', gridLines: { display: false } }, { id: 'Count', type: 'linear', position: 'right', gridLines: { display: false } }];

            let data = {
                labels: xValues,
                datasets: dataSet
            };

            let options = {
                maintainAspectRatio: false,
                scales: {
                    yAxes: yAxis,
                    xAxes: [{
                        ticks: {
                            min: 0,
                            beginAtZero: true
                        },
                        gridLines: {
                            display: false
                        }
                    }]
                }
            };

            var sChart = new Chart(ctx, {
                options: options,
                data: data,
                type: 'line'
            });
        }

        onMount(createSearchChart);

    	const writable_props = ['xValues', 'yValues', 'rightYValues'];
    	Object.keys($$props).forEach(key => {
    		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Chart> was created with unknown prop '${key}'`);
    	});

    	$$self.$set = $$props => {
    		if ('xValues' in $$props) $$invalidate('xValues', xValues = $$props.xValues);
    		if ('yValues' in $$props) $$invalidate('yValues', yValues = $$props.yValues);
    		if ('rightYValues' in $$props) $$invalidate('rightYValues', rightYValues = $$props.rightYValues);
    	};

    	$$self.$capture_state = () => {
    		return { xValues, yValues, rightYValues };
    	};

    	$$self.$inject_state = $$props => {
    		if ('xValues' in $$props) $$invalidate('xValues', xValues = $$props.xValues);
    		if ('yValues' in $$props) $$invalidate('yValues', yValues = $$props.yValues);
    		if ('rightYValues' in $$props) $$invalidate('rightYValues', rightYValues = $$props.rightYValues);
    	};

    	return { xValues, yValues, rightYValues };
    }

    class Chart_1$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$k, safe_not_equal, ["xValues", "yValues", "rightYValues"]);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Chart_1", options, id: create_fragment$k.name });

    		const { ctx } = this.$$;
    		const props = options.props || {};
    		if (ctx.xValues === undefined && !('xValues' in props)) {
    			console.warn("<Chart> was created without expected prop 'xValues'");
    		}
    		if (ctx.yValues === undefined && !('yValues' in props)) {
    			console.warn("<Chart> was created without expected prop 'yValues'");
    		}
    		if (ctx.rightYValues === undefined && !('rightYValues' in props)) {
    			console.warn("<Chart> was created without expected prop 'rightYValues'");
    		}
    	}

    	get xValues() {
    		throw new Error("<Chart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xValues(value) {
    		throw new Error("<Chart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yValues() {
    		throw new Error("<Chart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yValues(value) {
    		throw new Error("<Chart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rightYValues() {
    		throw new Error("<Chart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rightYValues(value) {
    		throw new Error("<Chart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/Search/searchBar.svelte generated by Svelte v3.12.1 */

    const file$k = "src/Components/Search/searchBar.svelte";

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.year = list[i];
    	return child_ctx;
    }

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.year = list[i];
    	return child_ctx;
    }

    function get_each_context_3$2(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.year = list[i];
    	return child_ctx;
    }

    function get_each_context_2$3(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.year = list[i];
    	return child_ctx;
    }

    function get_each_context_4$1(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.status = list[i];
    	return child_ctx;
    }

    function get_each_context_5$1(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.cyl = list[i];
    	return child_ctx;
    }

    function get_each_context_6(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.auto = list[i];
    	return child_ctx;
    }

    function get_each_context_7(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.prop = list[i];
    	return child_ctx;
    }

    function get_each_context_8(ctx, list, i) {
    	const child_ctx = Object.create(ctx);
    	child_ctx.hist = list[i];
    	return child_ctx;
    }

    // (249:0) {#if userSearch.length > 0 && $showResults == false}
    function create_if_block_15$1(ctx) {
    	var datalist;

    	let each_value_8 = ctx.userSearch.slice(0, 8);

    	let each_blocks = [];

    	for (let i = 0; i < each_value_8.length; i += 1) {
    		each_blocks[i] = create_each_block_8(get_each_context_8(ctx, each_value_8, i));
    	}

    	const block = {
    		c: function create() {
    			datalist = element("datalist");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}
    			attr_dev(datalist, "id", "hist");
    			add_location(datalist, file$k, 249, 4, 7824);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, datalist, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(datalist, null);
    			}
    		},

    		p: function update(changed, ctx) {
    			if (changed.userSearch) {
    				each_value_8 = ctx.userSearch.slice(0, 8);

    				let i;
    				for (i = 0; i < each_value_8.length; i += 1) {
    					const child_ctx = get_each_context_8(ctx, each_value_8, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    					} else {
    						each_blocks[i] = create_each_block_8(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(datalist, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}
    				each_blocks.length = each_value_8.length;
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(datalist);
    			}

    			destroy_each(each_blocks, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_15$1.name, type: "if", source: "(249:0) {#if userSearch.length > 0 && $showResults == false}", ctx });
    	return block;
    }

    // (251:8) {#each userSearch.slice(0, 8) as hist}
    function create_each_block_8(ctx) {
    	var option, t_value = ctx.hist + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.hist;
    			option.value = option.__value;
    			add_location(option, file$k, 251, 12, 7904);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_8.name, type: "each", source: "(251:8) {#each userSearch.slice(0, 8) as hist}", ctx });
    	return block;
    }

    // (257:0) {#if $showResults}
    function create_if_block$c(ctx) {
    	var current_block_type_index, if_block0, t, if_block1_anchor, current;

    	var if_block_creators = [
    		create_if_block_6$2,
    		create_if_block_9$2
    	];

    	var if_blocks = [];

    	function select_block_type(changed, ctx) {
    		if (ctx.count == 0 && ctx.userInput.length > 0) return 0;
    		if (ctx.count > 0) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(null, ctx))) {
    		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	var if_block1 = (ctx.showFilter) && create_if_block_1$9(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			if (~current_block_type_index) if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(changed, ctx);
    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) if_blocks[current_block_type_index].p(changed, ctx);
    			} else {
    				if (if_block0) {
    					group_outros();
    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});
    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block0 = if_blocks[current_block_type_index];
    					if (!if_block0) {
    						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block0.c();
    					}
    					transition_in(if_block0, 1);
    					if_block0.m(t.parentNode, t);
    				} else {
    					if_block0 = null;
    				}
    			}

    			if (ctx.showFilter) {
    				if (if_block1) {
    					if_block1.p(changed, ctx);
    					transition_in(if_block1, 1);
    				} else {
    					if_block1 = create_if_block_1$9(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();
    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});
    				check_outros();
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (~current_block_type_index) if_blocks[current_block_type_index].d(detaching);

    			if (detaching) {
    				detach_dev(t);
    			}

    			if (if_block1) if_block1.d(detaching);

    			if (detaching) {
    				detach_dev(if_block1_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$c.name, type: "if", source: "(257:0) {#if $showResults}", ctx });
    	return block;
    }

    // (267:24) 
    function create_if_block_9$2(ctx) {
    	var t0, t1, t2, t3, table, tr, td, t4, if_block3_anchor, current;

    	var if_block0 = (ctx.count > 10) && create_if_block_14$1(ctx);

    	function select_block_type_2(changed, ctx) {
    		if (ctx.count == 1) return create_if_block_13$1;
    		return create_else_block_3$2;
    	}

    	var current_block_type = select_block_type_2(null, ctx);
    	var if_block1 = current_block_type(ctx);

    	var if_block2 = (ctx.screenWidth >= 1024) && create_if_block_12$1(ctx);

    	let each_value_6 = ctx.results.slice(0, ctx.range);

    	let each_blocks = [];

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		each_blocks[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	var if_block3 = (ctx.range <= ctx.count && ctx.count > 0) && create_if_block_10$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space();
    			table = element("table");
    			tr = element("tr");
    			td = element("td");
    			t4 = space();
    			if (if_block3) if_block3.c();
    			if_block3_anchor = empty();
    			add_location(td, file$k, 314, 16, 10929);
    			add_location(tr, file$k, 313, 12, 10908);
    			set_style(table, "width", "100%");
    			add_location(table, file$k, 312, 8, 10869);
    		},

    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t3, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, tr);
    			append_dev(tr, td);
    			insert_dev(target, t4, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, if_block3_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (ctx.count > 10) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    				} else {
    					if_block0 = create_if_block_14$1(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (current_block_type === (current_block_type = select_block_type_2(changed, ctx)) && if_block1) {
    				if_block1.p(changed, ctx);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);
    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			}

    			if (ctx.screenWidth >= 1024) if_block2.p(changed, ctx);

    			if (changed.results || changed.range) {
    				each_value_6 = ctx.results.slice(0, ctx.range);

    				let i;
    				for (i = 0; i < each_value_6.length; i += 1) {
    					const child_ctx = get_each_context_6(ctx, each_value_6, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_6(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(t3.parentNode, t3);
    					}
    				}

    				group_outros();
    				for (i = each_value_6.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}
    				check_outros();
    			}

    			if (ctx.range <= ctx.count && ctx.count > 0) {
    				if (!if_block3) {
    					if_block3 = create_if_block_10$2(ctx);
    					if_block3.c();
    					if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block2);

    			for (let i = 0; i < each_value_6.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block2);

    			each_blocks = each_blocks.filter(Boolean);
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);

    			if (detaching) {
    				detach_dev(t0);
    			}

    			if_block1.d(detaching);

    			if (detaching) {
    				detach_dev(t1);
    			}

    			if (if_block2) if_block2.d(detaching);

    			if (detaching) {
    				detach_dev(t2);
    			}

    			destroy_each(each_blocks, detaching);

    			if (detaching) {
    				detach_dev(t3);
    				detach_dev(table);
    				detach_dev(t4);
    			}

    			if (if_block3) if_block3.d(detaching);

    			if (detaching) {
    				detach_dev(if_block3_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_9$2.name, type: "if", source: "(267:24) ", ctx });
    	return block;
    }

    // (258:4) {#if count == 0 && userInput.length > 0}
    function create_if_block_6$2(ctx) {
    	var if_block_anchor;

    	function select_block_type_1(changed, ctx) {
    		if (ctx.queryStatus == 'Loading') return create_if_block_7$2;
    		if (ctx.queryStatus == 'No Results') return create_if_block_8$2;
    	}

    	var current_block_type = select_block_type_1(null, ctx);
    	var if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (current_block_type === (current_block_type = select_block_type_1(changed, ctx)) && if_block) {
    				if_block.p(changed, ctx);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);
    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},

    		i: noop,
    		o: noop,

    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_6$2.name, type: "if", source: "(258:4) {#if count == 0 && userInput.length > 0}", ctx });
    	return block;
    }

    // (268:8) {#if count > 10}
    function create_if_block_14$1(ctx) {
    	var button0, i0, t0, t1, button1, i1, t2, select0, t3, select1, option0, option1, t6, button2, dispose;

    	let each_value_7 = ctx.propList;

    	let each_blocks = [];

    	for (let i = 0; i < each_value_7.length; i += 1) {
    		each_blocks[i] = create_each_block_7(get_each_context_7(ctx, each_value_7, i));
    	}

    	const block = {
    		c: function create() {
    			button0 = element("button");
    			i0 = element("i");
    			t0 = text(" Fliter Results");
    			t1 = space();
    			button1 = element("button");
    			i1 = element("i");
    			t2 = space();
    			select0 = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space();
    			select1 = element("select");
    			option0 = element("option");
    			option0.textContent = "Ascending";
    			option1 = element("option");
    			option1.textContent = "Descending";
    			t6 = space();
    			button2 = element("button");
    			button2.textContent = "Top";
    			attr_dev(i0, "class", "fa fa-filter");
    			add_location(i0, file$k, 268, 97, 8592);
    			attr_dev(button0, "id", "filter");
    			attr_dev(button0, "class", "btn btn-info btn-lg svelte-r7ifs6");
    			add_location(button0, file$k, 268, 12, 8507);
    			attr_dev(i1, "class", "fa fa-filter");
    			add_location(i1, file$k, 270, 101, 8759);
    			attr_dev(button1, "id", "filter-mob");
    			attr_dev(button1, "class", "btn btn-info btn-lg svelte-r7ifs6");
    			add_location(button1, file$k, 270, 12, 8670);
    			if (ctx.sort === void 0) add_render_callback(() => ctx.select0_change_handler.call(select0));
    			attr_dev(select0, "class", "form-control-lg sort svelte-r7ifs6");
    			add_location(select0, file$k, 272, 12, 8810);
    			option0.__value = "asc";
    			option0.value = option0.__value;
    			add_location(option0, file$k, 279, 16, 9230);
    			option1.__value = "dsc";
    			option1.value = option1.__value;
    			add_location(option1, file$k, 280, 16, 9285);
    			if (ctx.order === void 0) add_render_callback(() => ctx.select1_change_handler.call(select1));
    			attr_dev(select1, "class", "form-control-lg sort svelte-r7ifs6");
    			add_location(select1, file$k, 278, 12, 9091);
    			attr_dev(button2, "id", "goTop");
    			attr_dev(button2, "class", "btn btn-primary btn-lg svelte-r7ifs6");
    			add_location(button2, file$k, 283, 12, 9360);

    			dispose = [
    				listen_dev(button0, "click", ctx.click_handler),
    				listen_dev(button1, "click", ctx.click_handler_1),
    				listen_dev(select0, "change", ctx.select0_change_handler),
    				listen_dev(select0, "change", ctx.change_handler),
    				listen_dev(select1, "change", ctx.select1_change_handler),
    				listen_dev(select1, "change", ctx.change_handler_1),
    				listen_dev(button2, "click", goTop$1)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button0, anchor);
    			append_dev(button0, i0);
    			append_dev(button0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button1, anchor);
    			append_dev(button1, i1);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, select0, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select0, null);
    			}

    			select_option(select0, ctx.sort);

    			insert_dev(target, t3, anchor);
    			insert_dev(target, select1, anchor);
    			append_dev(select1, option0);
    			append_dev(select1, option1);

    			select_option(select1, ctx.order);

    			insert_dev(target, t6, anchor);
    			insert_dev(target, button2, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.propList) {
    				each_value_7 = ctx.propList;

    				let i;
    				for (i = 0; i < each_value_7.length; i += 1) {
    					const child_ctx = get_each_context_7(ctx, each_value_7, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    					} else {
    						each_blocks[i] = create_each_block_7(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}
    				each_blocks.length = each_value_7.length;
    			}

    			if (changed.sort) select_option(select0, ctx.sort);
    			if (changed.order) select_option(select1, ctx.order);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button0);
    				detach_dev(t1);
    				detach_dev(button1);
    				detach_dev(t2);
    				detach_dev(select0);
    			}

    			destroy_each(each_blocks, detaching);

    			if (detaching) {
    				detach_dev(t3);
    				detach_dev(select1);
    				detach_dev(t6);
    				detach_dev(button2);
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_14$1.name, type: "if", source: "(268:8) {#if count > 10}", ctx });
    	return block;
    }

    // (274:16) {#each propList as prop}
    function create_each_block_7(ctx) {
    	var option, t_value = ctx.prop + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.prop;
    			option.value = option.__value;
    			add_location(option, file$k, 274, 20, 8993);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_7.name, type: "each", source: "(274:16) {#each propList as prop}", ctx });
    	return block;
    }

    // (289:8) {:else}
    function create_else_block_3$2(ctx) {
    	var h5, t0, t1;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			t0 = text(ctx.count);
    			t1 = text(" Results Found");
    			set_style(h5, "text-align", "center");
    			set_style(h5, "margin-top", "20px");
    			set_style(h5, "margin-bottom", "20px");
    			add_location(h5, file$k, 289, 12, 9612);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			append_dev(h5, t0);
    			append_dev(h5, t1);
    		},

    		p: function update(changed, ctx) {
    			if (changed.count) {
    				set_data_dev(t0, ctx.count);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h5);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_3$2.name, type: "else", source: "(289:8) {:else}", ctx });
    	return block;
    }

    // (287:8) {#if count == 1}
    function create_if_block_13$1(ctx) {
    	var h5, t0, t1;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			t0 = text(ctx.count);
    			t1 = text(" Result Found");
    			set_style(h5, "text-align", "center");
    			set_style(h5, "margin-top", "20px");
    			set_style(h5, "margin-bottom", "20px");
    			add_location(h5, file$k, 287, 12, 9492);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			append_dev(h5, t0);
    			append_dev(h5, t1);
    		},

    		p: function update(changed, ctx) {
    			if (changed.count) {
    				set_data_dev(t0, ctx.count);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h5);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_13$1.name, type: "if", source: "(287:8) {#if count == 1}", ctx });
    	return block;
    }

    // (293:8) {#if screenWidth >= 1024}
    function create_if_block_12$1(ctx) {
    	var div1, div0, current;

    	var chart = new Chart_1$1({
    		props: {
    		xValues: ctx.xAxis,
    		yValues: ctx.leftYAxis,
    		rightYValues: ctx.rightYAxis
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			chart.$$.fragment.c();
    			attr_dev(div0, "id", "searchChart");
    			attr_dev(div0, "class", "chart-container");
    			add_location(div0, file$k, 294, 16, 9875);
    			attr_dev(div1, "class", "box-body");
    			set_style(div1, "margin-top", "20px");
    			set_style(div1, "padding", "0px 15px 0px 15px");
    			set_style(div1, "margin-bottom", "20px");
    			add_location(div1, file$k, 293, 12, 9766);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(chart, div0, null);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var chart_changes = {};
    			if (changed.xAxis) chart_changes.xValues = ctx.xAxis;
    			if (changed.leftYAxis) chart_changes.yValues = ctx.leftYAxis;
    			if (changed.rightYAxis) chart_changes.rightYValues = ctx.rightYAxis;
    			chart.$set(chart_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(chart.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(chart.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div1);
    			}

    			destroy_component(chart);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_12$1.name, type: "if", source: "(293:8) {#if screenWidth >= 1024}", ctx });
    	return block;
    }

    // (306:12) {:else}
    function create_else_block_2$3(ctx) {
    	var current;

    	var card = new Template({
    		props: {
    		id: ctx.auto._id || ctx.auto.id,
    		year: ctx.auto.Year,
    		model: ctx.auto.Model,
    		url: ctx.auto.Images[0],
    		vin: ctx.auto.VIN,
    		cyl: ctx.auto.CYL,
    		status: ctx.auto.Status,
    		price: ctx.auto.Price,
    		mileage: ctx.auto.Mileage,
    		date: ctx.auto.Date,
    		images: ctx.auto.Images
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			card.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var card_changes = {};
    			if (changed.results || changed.range) card_changes.id = ctx.auto._id || ctx.auto.id;
    			if (changed.results || changed.range) card_changes.year = ctx.auto.Year;
    			if (changed.results || changed.range) card_changes.model = ctx.auto.Model;
    			if (changed.results || changed.range) card_changes.url = ctx.auto.Images[0];
    			if (changed.results || changed.range) card_changes.vin = ctx.auto.VIN;
    			if (changed.results || changed.range) card_changes.cyl = ctx.auto.CYL;
    			if (changed.results || changed.range) card_changes.status = ctx.auto.Status;
    			if (changed.results || changed.range) card_changes.price = ctx.auto.Price;
    			if (changed.results || changed.range) card_changes.mileage = ctx.auto.Mileage;
    			if (changed.results || changed.range) card_changes.date = ctx.auto.Date;
    			if (changed.results || changed.range) card_changes.images = ctx.auto.Images;
    			card.$set(card_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_2$3.name, type: "else", source: "(306:12) {:else}", ctx });
    	return block;
    }

    // (302:12) {#if auto.Images === undefined || auto.Images.length == 0}
    function create_if_block_11$1(ctx) {
    	var current;

    	var card = new Template({
    		props: {
    		id: ctx.auto._id || ctx.auto.id,
    		year: ctx.auto.Year,
    		model: ctx.auto.Model,
    		url: "https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg",
    		vin: ctx.auto.VIN,
    		cyl: ctx.auto.CYL,
    		status: ctx.auto.Status,
    		price: ctx.auto.Price,
    		mileage: ctx.auto.Mileage,
    		date: ctx.auto.Date,
    		images: undefined
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			card.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var card_changes = {};
    			if (changed.results || changed.range) card_changes.id = ctx.auto._id || ctx.auto.id;
    			if (changed.results || changed.range) card_changes.year = ctx.auto.Year;
    			if (changed.results || changed.range) card_changes.model = ctx.auto.Model;
    			if (changed.results || changed.range) card_changes.vin = ctx.auto.VIN;
    			if (changed.results || changed.range) card_changes.cyl = ctx.auto.CYL;
    			if (changed.results || changed.range) card_changes.status = ctx.auto.Status;
    			if (changed.results || changed.range) card_changes.price = ctx.auto.Price;
    			if (changed.results || changed.range) card_changes.mileage = ctx.auto.Mileage;
    			if (changed.results || changed.range) card_changes.date = ctx.auto.Date;
    			card.$set(card_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_11$1.name, type: "if", source: "(302:12) {#if auto.Images === undefined || auto.Images.length == 0}", ctx });
    	return block;
    }

    // (301:8) {#each results.slice(0, range) as auto}
    function create_each_block_6(ctx) {
    	var current_block_type_index, if_block, if_block_anchor, current;

    	var if_block_creators = [
    		create_if_block_11$1,
    		create_else_block_2$3
    	];

    	var if_blocks = [];

    	function select_block_type_3(changed, ctx) {
    		if (ctx.auto.Images === undefined || ctx.auto.Images.length == 0) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_3(null, ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_3(changed, ctx);
    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(changed, ctx);
    			} else {
    				group_outros();
    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});
    				check_outros();

    				if_block = if_blocks[current_block_type_index];
    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}
    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_6.name, type: "each", source: "(301:8) {#each results.slice(0, range) as auto}", ctx });
    	return block;
    }

    // (319:8) {#if range <= count && count > 0}
    function create_if_block_10$2(ctx) {
    	var button, dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Load More";
    			attr_dev(button, "id", "loadMore");
    			attr_dev(button, "class", "btn btn-primary svelte-r7ifs6");
    			add_location(button, file$k, 319, 12, 11029);
    			dispose = listen_dev(button, "click", ctx.click_handler_2);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_10$2.name, type: "if", source: "(319:8) {#if range <= count && count > 0}", ctx });
    	return block;
    }

    // (264:46) 
    function create_if_block_8$2(ctx) {
    	var h5, t;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			t = text(ctx.queryStatus);
    			set_style(h5, "text-align", "center");
    			set_style(h5, "margin-top", "40px");
    			add_location(h5, file$k, 264, 12, 8365);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			append_dev(h5, t);
    		},

    		p: function update(changed, ctx) {
    			if (changed.queryStatus) {
    				set_data_dev(t, ctx.queryStatus);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h5);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_8$2.name, type: "if", source: "(264:46) ", ctx });
    	return block;
    }

    // (259:8) {#if queryStatus == 'Loading'}
    function create_if_block_7$2(ctx) {
    	var div, img, t0, h5, t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			t0 = space();
    			h5 = element("h5");
    			t1 = text(ctx.queryStatus);
    			attr_dev(img, "src", "https://autoarch.blob.core.windows.net/resources/loader.gif");
    			attr_dev(img, "alt", "Loader");
    			add_location(img, file$k, 260, 16, 8139);
    			attr_dev(div, "class", "text-center svelte-r7ifs6");
    			add_location(div, file$k, 259, 12, 8097);
    			set_style(h5, "text-align", "center");
    			add_location(h5, file$k, 262, 12, 8256);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, h5, anchor);
    			append_dev(h5, t1);
    		},

    		p: function update(changed, ctx) {
    			if (changed.queryStatus) {
    				set_data_dev(t1, ctx.queryStatus);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    				detach_dev(t0);
    				detach_dev(h5);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_7$2.name, type: "if", source: "(259:8) {#if queryStatus == 'Loading'}", ctx });
    	return block;
    }

    // (324:4) {#if showFilter}
    function create_if_block_1$9(ctx) {
    	var div, button0, t1, button1, t3, select0, option0, t5, select1, option1, t7, select2, option2, t9, select3, option3, t11, input0, t12, input1, t13, input2, input2_updating = false, t14, input3, input3_updating = false, t15, input4, input4_updating = false, t16, input5, input5_updating = false, t17, button2, div_intro, div_outro, current, dispose;

    	let each_value_5 = ctx.cylList;

    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks_1[i] = create_each_block_5$1(get_each_context_5$1(ctx, each_value_5, i));
    	}

    	let each_value_4 = ctx.statusList;

    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4$1(get_each_context_4$1(ctx, each_value_4, i));
    	}

    	function select_block_type_4(changed, ctx) {
    		if (ctx.filters.endYear != '') return create_if_block_4$5;
    		return create_else_block_1$6;
    	}

    	var current_block_type = select_block_type_4(null, ctx);
    	var if_block0 = current_block_type(ctx);

    	function select_block_type_5(changed, ctx) {
    		if (ctx.filters.startYear != '') return create_if_block_2$8;
    		return create_else_block$a;
    	}

    	var current_block_type_1 = select_block_type_5(null, ctx);
    	var if_block1 = current_block_type_1(ctx);

    	function input2_input_handler() {
    		input2_updating = true;
    		ctx.input2_input_handler.call(input2);
    	}

    	function input3_input_handler() {
    		input3_updating = true;
    		ctx.input3_input_handler.call(input3);
    	}

    	function input4_input_handler() {
    		input4_updating = true;
    		ctx.input4_input_handler.call(input4);
    	}

    	function input5_input_handler() {
    		input5_updating = true;
    		ctx.input5_input_handler.call(input5);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			button0 = element("button");
    			button0.textContent = "Reset";
    			t1 = space();
    			button1 = element("button");
    			button1.textContent = "Close";
    			t3 = space();
    			select0 = element("select");
    			option0 = element("option");
    			option0.textContent = "CYL";

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t5 = space();
    			select1 = element("select");
    			option1 = element("option");
    			option1.textContent = "Status";

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t7 = space();
    			select2 = element("select");
    			option2 = element("option");
    			option2.textContent = "Start Year";
    			if_block0.c();
    			t9 = space();
    			select3 = element("select");
    			option3 = element("option");
    			option3.textContent = "End Year";
    			if_block1.c();
    			t11 = space();
    			input0 = element("input");
    			t12 = space();
    			input1 = element("input");
    			t13 = space();
    			input2 = element("input");
    			t14 = space();
    			input3 = element("input");
    			t15 = space();
    			input4 = element("input");
    			t16 = space();
    			input5 = element("input");
    			t17 = space();
    			button2 = element("button");
    			button2.textContent = "Filter";
    			set_style(button0, "margin-top", "10px");
    			set_style(button0, "margin-bottom", "10px");
    			set_style(button0, "float", "left");
    			attr_dev(button0, "class", "btn btn-warning");
    			add_location(button0, file$k, 325, 8, 11306);
    			set_style(button1, "margin-top", "10px");
    			set_style(button1, "margin-bottom", "10px");
    			set_style(button1, "float", "right");
    			attr_dev(button1, "class", "btn btn-danger");
    			add_location(button1, file$k, 326, 12, 11445);
    			option0.__value = "";
    			option0.value = option0.__value;
    			option0.disabled = true;
    			option0.selected = true;
    			add_location(option0, file$k, 328, 16, 11705);
    			if (ctx.filters.CYL === void 0) add_render_callback(() => ctx.select0_change_handler_1.call(select0));
    			attr_dev(select0, "class", "form-control filterInput svelte-r7ifs6");
    			attr_dev(select0, "aria-placeholder", "CYL");
    			add_location(select0, file$k, 327, 12, 11597);
    			option1.__value = "";
    			option1.value = option1.__value;
    			option1.disabled = true;
    			option1.selected = true;
    			add_location(option1, file$k, 335, 16, 11996);
    			if (ctx.filters.Status === void 0) add_render_callback(() => ctx.select1_change_handler_1.call(select1));
    			attr_dev(select1, "class", "form-control filterInput svelte-r7ifs6");
    			add_location(select1, file$k, 334, 12, 11908);
    			option2.__value = "";
    			option2.value = option2.__value;
    			option2.disabled = true;
    			option2.selected = true;
    			add_location(option2, file$k, 342, 16, 12304);
    			if (ctx.filters.startYear === void 0) add_render_callback(() => ctx.select2_change_handler.call(select2));
    			attr_dev(select2, "class", "form-control leftFilter svelte-r7ifs6");
    			add_location(select2, file$k, 341, 12, 12214);
    			option3.__value = "";
    			option3.value = option3.__value;
    			option3.disabled = true;
    			option3.selected = true;
    			add_location(option3, file$k, 357, 16, 12933);
    			if (ctx.filters.endYear === void 0) add_render_callback(() => ctx.select3_change_handler.call(select3));
    			attr_dev(select3, "class", "form-control rightFilter svelte-r7ifs6");
    			add_location(select3, file$k, 356, 12, 12844);
    			attr_dev(input0, "class", "form-control leftFilter svelte-r7ifs6");
    			attr_dev(input0, "onfocus", "this.type='Date'");
    			attr_dev(input0, "placeholder", "Start Date");
    			attr_dev(input0, "autocomplete", "off");
    			add_location(input0, file$k, 371, 12, 13475);
    			attr_dev(input1, "class", "form-control rightFilter svelte-r7ifs6");
    			attr_dev(input1, "onfocus", "this.type='Date'");
    			attr_dev(input1, "placeholder", "End Date");
    			attr_dev(input1, "autocomplete", "off");
    			add_location(input1, file$k, 372, 12, 13632);
    			attr_dev(input2, "type", "number");
    			attr_dev(input2, "class", "form-control leftFilter svelte-r7ifs6");
    			attr_dev(input2, "placeholder", "Min Mileage");
    			attr_dev(input2, "autocomplete", "off");
    			add_location(input2, file$k, 373, 12, 13786);
    			attr_dev(input3, "type", "number");
    			attr_dev(input3, "class", "form-control rightFilter svelte-r7ifs6");
    			attr_dev(input3, "placeholder", "Max Mileage");
    			attr_dev(input3, "autocomplete", "off");
    			add_location(input3, file$k, 374, 12, 13929);
    			attr_dev(input4, "type", "number");
    			attr_dev(input4, "class", "form-control leftFilter svelte-r7ifs6");
    			attr_dev(input4, "placeholder", "Min Bid");
    			attr_dev(input4, "autocomplete", "off");
    			add_location(input4, file$k, 375, 12, 14073);
    			attr_dev(input5, "type", "number");
    			attr_dev(input5, "class", "form-control rightFilter svelte-r7ifs6");
    			attr_dev(input5, "placeholder", "Max Bid");
    			attr_dev(input5, "autocomplete", "off");
    			add_location(input5, file$k, 376, 12, 14211);
    			set_style(button2, "margin-top", "10px");
    			set_style(button2, "margin-bottom", "10px");
    			set_style(button2, "width", "50%");
    			set_style(button2, "margin-left", "25%");
    			attr_dev(button2, "class", "btn btn-info");
    			add_location(button2, file$k, 377, 12, 14350);
    			attr_dev(div, "id", "filterblock");
    			attr_dev(div, "class", "container-fluid svelte-r7ifs6");
    			add_location(div, file$k, 324, 8, 11180);

    			dispose = [
    				listen_dev(button0, "click", ctx.clearFields),
    				listen_dev(button1, "click", ctx.click_handler_3),
    				listen_dev(select0, "change", ctx.select0_change_handler_1),
    				listen_dev(select1, "change", ctx.select1_change_handler_1),
    				listen_dev(select2, "change", ctx.select2_change_handler),
    				listen_dev(select3, "change", ctx.select3_change_handler),
    				listen_dev(input0, "input", ctx.input0_input_handler),
    				listen_dev(input1, "input", ctx.input1_input_handler),
    				listen_dev(input2, "input", input2_input_handler),
    				listen_dev(input3, "input", input3_input_handler),
    				listen_dev(input4, "input", input4_input_handler),
    				listen_dev(input5, "input", input5_input_handler),
    				listen_dev(button2, "click", ctx.filterResults)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button0);
    			append_dev(div, t1);
    			append_dev(div, button1);
    			append_dev(div, t3);
    			append_dev(div, select0);
    			append_dev(select0, option0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select0, null);
    			}

    			select_option(select0, ctx.filters.CYL);

    			append_dev(div, t5);
    			append_dev(div, select1);
    			append_dev(select1, option1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select1, null);
    			}

    			select_option(select1, ctx.filters.Status);

    			append_dev(div, t7);
    			append_dev(div, select2);
    			append_dev(select2, option2);
    			if_block0.m(select2, null);

    			select_option(select2, ctx.filters.startYear);

    			append_dev(div, t9);
    			append_dev(div, select3);
    			append_dev(select3, option3);
    			if_block1.m(select3, null);

    			select_option(select3, ctx.filters.endYear);

    			append_dev(div, t11);
    			append_dev(div, input0);

    			set_input_value(input0, ctx.filters.startDate);

    			append_dev(div, t12);
    			append_dev(div, input1);

    			set_input_value(input1, ctx.filters.endDate);

    			append_dev(div, t13);
    			append_dev(div, input2);

    			set_input_value(input2, ctx.filters.minMile);

    			append_dev(div, t14);
    			append_dev(div, input3);

    			set_input_value(input3, ctx.filters.maxMile);

    			append_dev(div, t15);
    			append_dev(div, input4);

    			set_input_value(input4, ctx.filters.minBid);

    			append_dev(div, t16);
    			append_dev(div, input5);

    			set_input_value(input5, ctx.filters.maxBid);

    			append_dev(div, t17);
    			append_dev(div, button2);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (changed.cylList) {
    				each_value_5 = ctx.cylList;

    				let i;
    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5$1(ctx, each_value_5, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(changed, child_ctx);
    					} else {
    						each_blocks_1[i] = create_each_block_5$1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}
    				each_blocks_1.length = each_value_5.length;
    			}

    			if (changed.filters) select_option(select0, ctx.filters.CYL);

    			if (changed.statusList) {
    				each_value_4 = ctx.statusList;

    				let i;
    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4$1(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    					} else {
    						each_blocks[i] = create_each_block_4$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}
    				each_blocks.length = each_value_4.length;
    			}

    			if (changed.filters) select_option(select1, ctx.filters.Status);

    			if (current_block_type === (current_block_type = select_block_type_4(changed, ctx)) && if_block0) {
    				if_block0.p(changed, ctx);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);
    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(select2, null);
    				}
    			}

    			if (changed.filters) select_option(select2, ctx.filters.startYear);

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_5(changed, ctx)) && if_block1) {
    				if_block1.p(changed, ctx);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);
    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(select3, null);
    				}
    			}

    			if (changed.filters) select_option(select3, ctx.filters.endYear);
    			if (changed.filters && (input0.value !== ctx.filters.startDate)) set_input_value(input0, ctx.filters.startDate);
    			if (changed.filters && (input1.value !== ctx.filters.endDate)) set_input_value(input1, ctx.filters.endDate);
    			if (!input2_updating && changed.filters) set_input_value(input2, ctx.filters.minMile);
    			input2_updating = false;
    			if (!input3_updating && changed.filters) set_input_value(input3, ctx.filters.maxMile);
    			input3_updating = false;
    			if (!input4_updating && changed.filters) set_input_value(input4, ctx.filters.minBid);
    			input4_updating = false;
    			if (!input5_updating && changed.filters) set_input_value(input5, ctx.filters.maxBid);
    			input5_updating = false;
    		},

    		i: function intro(local) {
    			if (current) return;
    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				if (!div_intro) div_intro = create_in_transition(div, fly, { x:200, duration:500 });
    				div_intro.start();
    			});

    			current = true;
    		},

    		o: function outro(local) {
    			if (div_intro) div_intro.invalidate();

    			div_outro = create_out_transition(div, fly, { x:200, duration:500 });

    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			destroy_each(each_blocks_1, detaching);

    			destroy_each(each_blocks, detaching);

    			if_block0.d();
    			if_block1.d();

    			if (detaching) {
    				if (div_outro) div_outro.end();
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$9.name, type: "if", source: "(324:4) {#if showFilter}", ctx });
    	return block;
    }

    // (330:16) {#each cylList as cyl}
    function create_each_block_5$1(ctx) {
    	var option, t_value = ctx.cyl + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.cyl;
    			option.value = option.__value;
    			add_location(option, file$k, 330, 20, 11812);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_5$1.name, type: "each", source: "(330:16) {#each cylList as cyl}", ctx });
    	return block;
    }

    // (337:16) {#each statusList as status}
    function create_each_block_4$1(ctx) {
    	var option, t_value = ctx.status + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.status;
    			option.value = option.__value;
    			add_location(option, file$k, 337, 20, 12112);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_4$1.name, type: "each", source: "(337:16) {#each statusList as status}", ctx });
    	return block;
    }

    // (350:16) {:else}
    function create_else_block_1$6(ctx) {
    	var each_1_anchor;

    	let each_value_3 = ctx.yearList;

    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3$2(get_each_context_3$2(ctx, each_value_3, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.yearList) {
    				each_value_3 = ctx.yearList;

    				let i;
    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$2(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    					} else {
    						each_blocks[i] = create_each_block_3$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}
    				each_blocks.length = each_value_3.length;
    			}
    		},

    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);

    			if (detaching) {
    				detach_dev(each_1_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_1$6.name, type: "else", source: "(350:16) {:else}", ctx });
    	return block;
    }

    // (344:16) {#if filters.endYear != ''}
    function create_if_block_4$5(ctx) {
    	var each_1_anchor;

    	let each_value_2 = ctx.yearList;

    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$3(get_each_context_2$3(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.filters || changed.yearList) {
    				each_value_2 = ctx.yearList;

    				let i;
    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$3(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    					} else {
    						each_blocks[i] = create_each_block_2$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}
    				each_blocks.length = each_value_2.length;
    			}
    		},

    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);

    			if (detaching) {
    				detach_dev(each_1_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_4$5.name, type: "if", source: "(344:16) {#if filters.endYear != ''}", ctx });
    	return block;
    }

    // (351:20) {#each yearList as year}
    function create_each_block_3$2(ctx) {
    	var option, t_value = ctx.year + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.year;
    			option.value = option.__value;
    			add_location(option, file$k, 351, 24, 12720);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_3$2.name, type: "each", source: "(351:20) {#each yearList as year}", ctx });
    	return block;
    }

    // (346:24) {#if filters.endYear >= year}
    function create_if_block_5$2(ctx) {
    	var option, t_value = ctx.year + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.year;
    			option.value = option.__value;
    			add_location(option, file$k, 346, 28, 12530);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_5$2.name, type: "if", source: "(346:24) {#if filters.endYear >= year}", ctx });
    	return block;
    }

    // (345:20) {#each yearList as year}
    function create_each_block_2$3(ctx) {
    	var if_block_anchor;

    	var if_block = (ctx.filters.endYear >= ctx.year) && create_if_block_5$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (ctx.filters.endYear >= ctx.year) {
    				if (if_block) {
    					if_block.p(changed, ctx);
    				} else {
    					if_block = create_if_block_5$2(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},

    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_2$3.name, type: "each", source: "(345:20) {#each yearList as year}", ctx });
    	return block;
    }

    // (365:16) {:else}
    function create_else_block$a(ctx) {
    	var each_1_anchor;

    	let each_value_1 = ctx.yearList;

    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.yearList) {
    				each_value_1 = ctx.yearList;

    				let i;
    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    					} else {
    						each_blocks[i] = create_each_block_1$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}
    				each_blocks.length = each_value_1.length;
    			}
    		},

    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);

    			if (detaching) {
    				detach_dev(each_1_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$a.name, type: "else", source: "(365:16) {:else}", ctx });
    	return block;
    }

    // (359:16) {#if filters.startYear != ''}
    function create_if_block_2$8(ctx) {
    	var each_1_anchor;

    	let each_value = ctx.yearList;

    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.filters || changed.yearList) {
    				each_value = ctx.yearList;

    				let i;
    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, child_ctx);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}
    				each_blocks.length = each_value.length;
    			}
    		},

    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);

    			if (detaching) {
    				detach_dev(each_1_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$8.name, type: "if", source: "(359:16) {#if filters.startYear != ''}", ctx });
    	return block;
    }

    // (366:20) {#each yearList as year}
    function create_each_block_1$3(ctx) {
    	var option, t_value = ctx.year + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.year;
    			option.value = option.__value;
    			add_location(option, file$k, 366, 24, 13351);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_1$3.name, type: "each", source: "(366:20) {#each yearList as year}", ctx });
    	return block;
    }

    // (361:24) {#if filters.startYear <= year}
    function create_if_block_3$7(ctx) {
    	var option, t_value = ctx.year + "", t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = ctx.year;
    			option.value = option.__value;
    			add_location(option, file$k, 361, 28, 13161);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(option);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_3$7.name, type: "if", source: "(361:24) {#if filters.startYear <= year}", ctx });
    	return block;
    }

    // (360:20) {#each yearList as year}
    function create_each_block$5(ctx) {
    	var if_block_anchor;

    	var if_block = (ctx.filters.startYear <= ctx.year) && create_if_block_3$7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (ctx.filters.startYear <= ctx.year) {
    				if (if_block) {
    					if_block.p(changed, ctx);
    				} else {
    					if_block = create_if_block_3$7(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},

    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block$5.name, type: "each", source: "(360:20) {#each yearList as year}", ctx });
    	return block;
    }

    function create_fragment$l(ctx) {
    	var input, t0, t1, if_block1_anchor, current, dispose;

    	var if_block0 = (ctx.userSearch.length > 0 && ctx.$showResults == false) && create_if_block_15$1(ctx);

    	var if_block1 = (ctx.$showResults) && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			input = element("input");
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			attr_dev(input, "list", "hist");
    			attr_dev(input, "id", "search-mid");
    			attr_dev(input, "class", "form-control-lg svelte-r7ifs6");
    			attr_dev(input, "placeholder", "Search Model e.g Toyota Corolla");
    			attr_dev(input, "autocomplete", "off");
    			add_location(input, file$k, 247, 0, 7561);

    			dispose = [
    				listen_dev(input, "input", ctx.input_input_handler),
    				listen_dev(input, "keyup", ctx.keyup_handler)
    			];
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);

    			set_input_value(input, ctx.userInput);

    			insert_dev(target, t0, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (changed.userInput && (input.value !== ctx.userInput)) set_input_value(input, ctx.userInput);

    			if (ctx.userSearch.length > 0 && ctx.$showResults == false) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    				} else {
    					if_block0 = create_if_block_15$1(ctx);
    					if_block0.c();
    					if_block0.m(t1.parentNode, t1);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (ctx.$showResults) {
    				if (if_block1) {
    					if_block1.p(changed, ctx);
    					transition_in(if_block1, 1);
    				} else {
    					if_block1 = create_if_block$c(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();
    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});
    				check_outros();
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(input);
    				detach_dev(t0);
    			}

    			if (if_block0) if_block0.d(detaching);

    			if (detaching) {
    				detach_dev(t1);
    			}

    			if (if_block1) if_block1.d(detaching);

    			if (detaching) {
    				detach_dev(if_block1_anchor);
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$l.name, type: "component", source: "", ctx });
    	return block;
    }

    function goTop$1() {
        document.body.scrollTop = 0; 
        document.documentElement.scrollTop = 0;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let $acctTab, $searchTab, $showResults;

    	validate_store(acctTab$1, 'acctTab');
    	component_subscribe($$self, acctTab$1, $$value => { $acctTab = $$value; $$invalidate('$acctTab', $acctTab); });
    	validate_store(searchTab, 'searchTab');
    	component_subscribe($$self, searchTab, $$value => { $searchTab = $$value; $$invalidate('$searchTab', $searchTab); });
    	validate_store(showResults, 'showResults');
    	component_subscribe($$self, showResults, $$value => { $showResults = $$value; $$invalidate('$showResults', $showResults); });

    	

        let showFilter = false;

        let userInput = '';

        let results = [], prevResults = [];

        let xAxis, leftYAxis, rightYAxis;

        let xAxisPrev, leftYAxisPrev, rightYAxisPrev;

        let screenWidth = screen.width;

        let range = 100;

        let count = 0;

        let showMsg = false, statusColor = '', heading = '', message = ''; 

        let filters = {
            startYear : '', endYear : '',
            CYL : '',
            Status : '',
            startDate : '', endDate : '',
            minMile : '', maxMile : '',
            minBid : '', maxBid : ''
        };

        let sort, order;

        let userSearch = localStorage.getItem($acctTab.uuid) != null ? JSON.parse(localStorage.getItem($acctTab.uuid)).reverse() : [];

        if($searchTab.saved == true && $searchTab.results.length > 0) {

            $$invalidate('count', count = $searchTab.results.length);

            document.documentElement.style.setProperty('--input-xpos', '0%');
            document.documentElement.style.setProperty('--input-ypos', '0%');

            $$invalidate('userInput', userInput = $searchTab.userInput);

            $$invalidate('results', results = $searchTab.results); 

            prevResults = $searchTab.prevResults;

            $$invalidate('filters', filters = $searchTab.filter);

            $$invalidate('sort', sort = $searchTab.sort);

            $$invalidate('order', order = $searchTab.order);

            $$invalidate('xAxis', xAxis = $searchTab.xValues); xAxisPrev = $searchTab.xValuesPrev;

            $$invalidate('leftYAxis', leftYAxis = $searchTab.leftYValues); leftYAxisPrev = $searchTab.leftYValuesPrev;

            $$invalidate('rightYAxis', rightYAxis = $searchTab.rightYValues); rightYAxisPrev = $searchTab.rightYValuesPrev;
        }
        else {
            {document.documentElement.style.setProperty('--input-xpos', '20%');}        {document.documentElement.style.setProperty('--input-ypos', '22%');}    }

        let queryStatus = 'Loading';

        let cylList = ['A', 'CC', 'S', 'None'];

        let statusList = ['Salvageable', 'Normal', 'Irreparable', 'Writeoff (Hail)', 'Writeoff (Stolen)', 'Writeoff (Other)', 'Rebuilt'];

        let propList = ['Model', 'Year', 'Date', 'Bid', 'Mileage'];

        var currDate = new window.Date();

        let yearList = [];

        for(let i = currDate.getFullYear() + 1; i >= currDate.getFullYear() - 25; i--) 
            yearList.push(i);

        async function checkChar() {
            $$invalidate('count', count = 0);

            document.getElementById('search-mid').style.setProperty('--input-xpos', '0%');
            document.getElementById('search-mid').style.setProperty('--input-ypos', '0%');

            await getResults();

            showResults.set(true);

            let searchLog = await JSON.parse(localStorage.getItem($acctTab.uuid));

            if(searchLog.length > 0) {
                let found = false;
                for(let i = 0; i < searchLog.length; i++) {
                    if(searchLog[i] == userInput || searchLog[i].includes(userInput)) {
                        found = true;
                        break;
                    } 
                }

                if(found == false){
                    searchLog.push(userInput);
                    await localStorage.setItem($acctTab.uuid, JSON.stringify(searchLog));
                }
            }
            else {
                searchLog.push(userInput);
                await localStorage.setItem($acctTab.uuid, JSON.stringify(searchLog));
            }
        }

        function getResults() {

            clearFields();

            let Payload = {
                func : 'searchQuery', 
                query : userInput.toUpperCase()
            };

            invokeLambda(env.lambda.pythonAPI, Payload).then((response) => {

                console.log(response);

                if(response.Results.length == 0) {
                    $$invalidate('queryStatus', queryStatus = 'No Results');
                } else {
                    $$invalidate('results', results = response.Results);
                    prevResults = response.Results;
                    $$invalidate('xAxis', xAxis = response.Dates); xAxisPrev = response.Dates;
                    $$invalidate('leftYAxis', leftYAxis = response.Prices); leftYAxisPrev = response.Prices;
                    $$invalidate('rightYAxis', rightYAxis = response.Counts); rightYAxisPrev = response.Counts;
                    $$invalidate('count', count = results.length);

                    searchTab.update(state => {
                        state.saved = true;
                        state.results = response.Results;
                        state.prevResults = response.Results;
                        state.userInput = userInput;
                        state.xValues = response.Dates; state.xValuesPrev = response.Dates;
                        state.leftYValues = response.Prices; state.leftYValuesPrev = response.Prices;
                        state.rightYValues = response.Counts; state.rightYValuesPrev = response.Counts;
                        return state;
                    });
                }

            }).catch((err) => {

                showMsg = true, heading = 'Error', message = err, statusColor = 'red'; 

                setTimeout(function(){ 
                    showMsg = false, heading = '', message = '', statusColor = ''; 
                }, 5000);

            });
        }

        function filterResults() {
            $$invalidate('count', count = 0);

            let Payload = {
                func : 'filterResult', 
                filter : filters,
                result : results
            };

            invokeLambda(env.lambda.pythonAPI, Payload).then((response) => {

                if(response.Results.length == 0) {
                    $$invalidate('queryStatus', queryStatus = 'No Results');
                }
                else {
                    $$invalidate('results', results = response.Results);
                    $$invalidate('xAxis', xAxis = response.Dates);
                    $$invalidate('leftYAxis', leftYAxis = response.Prices);
                    $$invalidate('rightYAxis', rightYAxis = response.Counts);
                    $$invalidate('count', count = results.length);

                    searchTab.update(state => {
                        state.saved = true;
                        state.results = response.Results;
                        state.xValues = response.Dates;
                        state.leftYValues = response.Prices;
                        state.rightYValues = response.Counts;
                        state.filter = filters;
                        return state;
                    });
                }

            }).catch((err) => {

                showMsg = true, heading = 'Error', message = err, statusColor = 'red'; 

                setTimeout(function(){ 
                    showMsg = false, heading = '', message = '', statusColor = ''; 
                }, 5000);

            });
        }

        async function clearFields() {
            $$invalidate('count', count = 0);

            $$invalidate('filters', filters.startYear = '', filters); $$invalidate('filters', filters.endYear = '', filters); 
            $$invalidate('filters', filters.CYL = '', filters); $$invalidate('filters', filters.Status = '', filters); 
            $$invalidate('filters', filters.startDate = '', filters); filters.maxBid;
            $$invalidate('filters', filters.minBid = '', filters); $$invalidate('filters', filters.maxBid = '', filters); 
            $$invalidate('filters', filters.minMile = '', filters); $$invalidate('filters', filters.maxMile = '', filters);

            await searchTab.update(state => {
                state.results = prevResults;
                state.filter = filters;
                state.xValues = xAxisPrev;
                state.leftYValues = leftYAxisPrev;
                state.rightYValues = rightYAxisPrev;
                return state;
            });

            $$invalidate('xAxis', xAxis = xAxisPrev);
            $$invalidate('leftYAxis', leftYAxis = leftYAxisPrev);
            $$invalidate('rightYAxis', rightYAxis = rightYAxisPrev);

            $$invalidate('results', results = prevResults);
            $$invalidate('count', count = prevResults.length);
        }

        let searchLog;

    	function input_input_handler() {
    		userInput = this.value;
    		$$invalidate('userInput', userInput);
    	}

    	const keyup_handler = (event) => event.which == 13 && checkChar();

    	const click_handler = () => $$invalidate('showFilter', showFilter = true);

    	const click_handler_1 = () => $$invalidate('showFilter', showFilter = true);

    	function select0_change_handler() {
    		sort = select_value(this);
    		$$invalidate('sort', sort);
    		$$invalidate('propList', propList);
    	}

    	const change_handler = () => $$invalidate('results', results = sortResults(sort, order, results));

    	function select1_change_handler() {
    		order = select_value(this);
    		$$invalidate('order', order);
    	}

    	const change_handler_1 = () => $$invalidate('results', results = sortResults(sort, order, results));

    	const click_handler_2 = () => $$invalidate('range', range += 100);

    	const click_handler_3 = () => $$invalidate('showFilter', showFilter = false);

    	function select0_change_handler_1() {
    		filters.CYL = select_value(this);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	function select1_change_handler_1() {
    		filters.Status = select_value(this);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	function select2_change_handler() {
    		filters.startYear = select_value(this);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	function select3_change_handler() {
    		filters.endYear = select_value(this);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	function input0_input_handler() {
    		filters.startDate = this.value;
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	function input1_input_handler() {
    		filters.endDate = this.value;
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	function input2_input_handler() {
    		filters.minMile = to_number(this.value);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	function input3_input_handler() {
    		filters.maxMile = to_number(this.value);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	function input4_input_handler() {
    		filters.minBid = to_number(this.value);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	function input5_input_handler() {
    		filters.maxBid = to_number(this.value);
    		$$invalidate('filters', filters);
    		$$invalidate('cylList', cylList);
    	}

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('showFilter' in $$props) $$invalidate('showFilter', showFilter = $$props.showFilter);
    		if ('userInput' in $$props) $$invalidate('userInput', userInput = $$props.userInput);
    		if ('results' in $$props) $$invalidate('results', results = $$props.results);
    		if ('prevResults' in $$props) prevResults = $$props.prevResults;
    		if ('xAxis' in $$props) $$invalidate('xAxis', xAxis = $$props.xAxis);
    		if ('leftYAxis' in $$props) $$invalidate('leftYAxis', leftYAxis = $$props.leftYAxis);
    		if ('rightYAxis' in $$props) $$invalidate('rightYAxis', rightYAxis = $$props.rightYAxis);
    		if ('xAxisPrev' in $$props) xAxisPrev = $$props.xAxisPrev;
    		if ('leftYAxisPrev' in $$props) leftYAxisPrev = $$props.leftYAxisPrev;
    		if ('rightYAxisPrev' in $$props) rightYAxisPrev = $$props.rightYAxisPrev;
    		if ('screenWidth' in $$props) $$invalidate('screenWidth', screenWidth = $$props.screenWidth);
    		if ('range' in $$props) $$invalidate('range', range = $$props.range);
    		if ('count' in $$props) $$invalidate('count', count = $$props.count);
    		if ('showMsg' in $$props) showMsg = $$props.showMsg;
    		if ('statusColor' in $$props) statusColor = $$props.statusColor;
    		if ('heading' in $$props) heading = $$props.heading;
    		if ('message' in $$props) message = $$props.message;
    		if ('filters' in $$props) $$invalidate('filters', filters = $$props.filters);
    		if ('sort' in $$props) $$invalidate('sort', sort = $$props.sort);
    		if ('order' in $$props) $$invalidate('order', order = $$props.order);
    		if ('userSearch' in $$props) $$invalidate('userSearch', userSearch = $$props.userSearch);
    		if ('queryStatus' in $$props) $$invalidate('queryStatus', queryStatus = $$props.queryStatus);
    		if ('cylList' in $$props) $$invalidate('cylList', cylList = $$props.cylList);
    		if ('statusList' in $$props) $$invalidate('statusList', statusList = $$props.statusList);
    		if ('propList' in $$props) $$invalidate('propList', propList = $$props.propList);
    		if ('currDate' in $$props) currDate = $$props.currDate;
    		if ('yearList' in $$props) $$invalidate('yearList', yearList = $$props.yearList);
    		if ('searchLog' in $$props) searchLog = $$props.searchLog;
    		if ('$acctTab' in $$props) acctTab$1.set($acctTab);
    		if ('$searchTab' in $$props) searchTab.set($searchTab);
    		if ('$showResults' in $$props) showResults.set($showResults);
    	};

    	return {
    		showFilter,
    		userInput,
    		results,
    		xAxis,
    		leftYAxis,
    		rightYAxis,
    		screenWidth,
    		range,
    		count,
    		filters,
    		sort,
    		order,
    		userSearch,
    		queryStatus,
    		cylList,
    		statusList,
    		propList,
    		yearList,
    		checkChar,
    		filterResults,
    		clearFields,
    		$showResults,
    		input_input_handler,
    		keyup_handler,
    		click_handler,
    		click_handler_1,
    		select0_change_handler,
    		change_handler,
    		select1_change_handler,
    		change_handler_1,
    		click_handler_2,
    		click_handler_3,
    		select0_change_handler_1,
    		select1_change_handler_1,
    		select2_change_handler,
    		select3_change_handler,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		input4_input_handler,
    		input5_input_handler
    	};
    }

    class SearchBar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$l, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "SearchBar", options, id: create_fragment$l.name });
    	}
    }

    /* src/Pages/Search.svelte generated by Svelte v3.12.1 */

    const file$l = "src/Pages/Search.svelte";

    function create_fragment$m(ctx) {
    	var h1, t_1, current;

    	var searchbar = new SearchBar({ $$inline: true });

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Search";
    			t_1 = space();
    			searchbar.$$.fragment.c();
    			add_location(h1, file$l, 4, 0, 89);
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t_1, anchor);
    			mount_component(searchbar, target, anchor);
    			current = true;
    		},

    		p: noop,

    		i: function intro(local) {
    			if (current) return;
    			transition_in(searchbar.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(searchbar.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h1);
    				detach_dev(t_1);
    			}

    			destroy_component(searchbar, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$m.name, type: "component", source: "", ctx });
    	return block;
    }

    class Search extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, null, create_fragment$m, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Search", options, id: create_fragment$m.name });
    	}
    }

    /* src/Components/Shared/SideNav.svelte generated by Svelte v3.12.1 */

    const file$m = "src/Components/Shared/SideNav.svelte";

    // (112:20) {#if count > 0}
    function create_if_block_1$a(ctx) {
    	var span, t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(ctx.count);
    			attr_dev(span, "id", "badgeCount");
    			attr_dev(span, "class", "badge badge-primary svelte-1ykvmzz");
    			add_location(span, file$m, 112, 24, 4965);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},

    		p: function update(changed, ctx) {
    			if (changed.count) {
    				set_data_dev(t, ctx.count);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$a.name, type: "if", source: "(112:20) {#if count > 0}", ctx });
    	return block;
    }

    // (138:20) {#if count > 0}
    function create_if_block$d(ctx) {
    	var span, t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(ctx.count);
    			attr_dev(span, "id", "badgeCount-mob");
    			attr_dev(span, "class", "badge badge-primary svelte-1ykvmzz");
    			add_location(span, file$m, 138, 24, 5941);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},

    		p: function update(changed, ctx) {
    			if (changed.count) {
    				set_data_dev(t, ctx.count);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$d.name, type: "if", source: "(138:20) {#if count > 0}", ctx });
    	return block;
    }

    function create_fragment$n(ctx) {
    	var div0, table0, tr0, td0, span0, t1, i0, t2, tr1, td1, span1, t4, i1, t5, tr2, td2, span2, t7, i2, t8, tr3, td3, span3, t10, i3, t11, div1, table1, tr4, td4, i4, t12, td5, i5, t13, td6, i6, t14, td7, i7, dispose;

    	var if_block0 = (ctx.count > 0) && create_if_block_1$a(ctx);

    	var if_block1 = (ctx.count > 0) && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			table0 = element("table");
    			tr0 = element("tr");
    			td0 = element("td");
    			span0 = element("span");
    			span0.textContent = "Home";
    			t1 = space();
    			i0 = element("i");
    			t2 = space();
    			tr1 = element("tr");
    			td1 = element("td");
    			span1 = element("span");
    			span1.textContent = "Search";
    			t4 = space();
    			i1 = element("i");
    			t5 = space();
    			tr2 = element("tr");
    			td2 = element("td");
    			span2 = element("span");
    			span2.textContent = "Garage";
    			t7 = space();
    			i2 = element("i");
    			if (if_block0) if_block0.c();
    			t8 = space();
    			tr3 = element("tr");
    			td3 = element("td");
    			span3 = element("span");
    			span3.textContent = "Account";
    			t10 = space();
    			i3 = element("i");
    			t11 = space();
    			div1 = element("div");
    			table1 = element("table");
    			tr4 = element("tr");
    			td4 = element("td");
    			i4 = element("i");
    			t12 = space();
    			td5 = element("td");
    			i5 = element("i");
    			t13 = space();
    			td6 = element("td");
    			i6 = element("i");
    			if (if_block1) if_block1.c();
    			t14 = space();
    			td7 = element("td");
    			i7 = element("i");
    			set_style(span0, "color", "#fff");
    			add_location(span0, file$m, 97, 16, 4332);
    			attr_dev(i0, "class", "fa fa-home fa-3x svelte-1ykvmzz");
    			add_location(i0, file$m, 98, 16, 4387);
    			attr_dev(td0, "class", "tabIndex svelte-1ykvmzz");
    			attr_dev(td0, "align", "center");
    			add_location(td0, file$m, 96, 12, 4279);
    			add_location(tr0, file$m, 95, 8, 4262);
    			set_style(span1, "color", "#fff");
    			add_location(span1, file$m, 103, 16, 4564);
    			attr_dev(i1, "class", "fa fa-search svelte-1ykvmzz");
    			add_location(i1, file$m, 104, 16, 4620);
    			attr_dev(td1, "class", "tabIndex svelte-1ykvmzz");
    			attr_dev(td1, "align", "center");
    			add_location(td1, file$m, 102, 12, 4511);
    			add_location(tr1, file$m, 101, 8, 4494);
    			set_style(span2, "color", "#fff");
    			add_location(span2, file$m, 109, 16, 4793);
    			attr_dev(i2, "class", "fa fa-car svelte-1ykvmzz");
    			add_location(i2, file$m, 110, 16, 4849);
    			attr_dev(td2, "class", "tabIndex svelte-1ykvmzz");
    			attr_dev(td2, "align", "center");
    			add_location(td2, file$m, 108, 12, 4740);
    			add_location(tr2, file$m, 107, 8, 4723);
    			set_style(span3, "color", "#fff");
    			add_location(span3, file$m, 119, 16, 5187);
    			attr_dev(i3, "class", "fa fa-user fa-3x svelte-1ykvmzz");
    			add_location(i3, file$m, 120, 16, 5244);
    			attr_dev(td3, "class", "tabIndex svelte-1ykvmzz");
    			attr_dev(td3, "align", "center");
    			add_location(td3, file$m, 118, 12, 5134);
    			add_location(tr3, file$m, 117, 8, 5117);
    			attr_dev(table0, "id", "sidebar-inner");
    			attr_dev(table0, "class", "svelte-1ykvmzz");
    			add_location(table0, file$m, 94, 4, 4227);
    			attr_dev(div0, "id", "sidebar-outer");
    			attr_dev(div0, "class", "svelte-1ykvmzz");
    			add_location(div0, file$m, 93, 0, 4198);
    			attr_dev(i4, "class", "fa fa-home svelte-1ykvmzz");
    			add_location(i4, file$m, 130, 16, 5569);
    			attr_dev(td4, "class", "tabIndex svelte-1ykvmzz");
    			attr_dev(td4, "align", "center");
    			add_location(td4, file$m, 129, 12, 5482);
    			attr_dev(i5, "class", "fa fa-search svelte-1ykvmzz");
    			add_location(i5, file$m, 133, 16, 5713);
    			attr_dev(td5, "class", "tabIndex svelte-1ykvmzz");
    			attr_dev(td5, "align", "center");
    			add_location(td5, file$m, 132, 12, 5626);
    			attr_dev(i6, "class", "fa fa-car svelte-1ykvmzz");
    			add_location(i6, file$m, 136, 16, 5859);
    			attr_dev(td6, "class", "tabIndex svelte-1ykvmzz");
    			attr_dev(td6, "align", "center");
    			add_location(td6, file$m, 135, 12, 5772);
    			attr_dev(i7, "class", "fa fa-user svelte-1ykvmzz");
    			add_location(i7, file$m, 143, 16, 6174);
    			attr_dev(td7, "class", "tabIndex svelte-1ykvmzz");
    			attr_dev(td7, "align", "center");
    			add_location(td7, file$m, 142, 12, 6087);
    			attr_dev(tr4, "height", "50");
    			add_location(tr4, file$m, 128, 8, 5453);
    			attr_dev(table1, "id", "sidebar-inner-mob");
    			attr_dev(table1, "cellpadding", "10");
    			attr_dev(table1, "class", "svelte-1ykvmzz");
    			add_location(table1, file$m, 127, 4, 5397);
    			attr_dev(div1, "id", "sidebar-outer-mob");
    			attr_dev(div1, "class", "svelte-1ykvmzz");
    			add_location(div1, file$m, 126, 0, 5364);

    			dispose = [
    				listen_dev(i0, "click", ctx.click_handler),
    				listen_dev(i1, "click", ctx.click_handler_1),
    				listen_dev(i2, "click", ctx.click_handler_2),
    				listen_dev(i3, "click", ctx.click_handler_3),
    				listen_dev(td4, "click", ctx.click_handler_4),
    				listen_dev(td5, "click", ctx.click_handler_5),
    				listen_dev(td6, "click", ctx.click_handler_6),
    				listen_dev(td7, "click", ctx.click_handler_7)
    			];
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, table0);
    			append_dev(table0, tr0);
    			append_dev(tr0, td0);
    			append_dev(td0, span0);
    			append_dev(td0, t1);
    			append_dev(td0, i0);
    			append_dev(table0, t2);
    			append_dev(table0, tr1);
    			append_dev(tr1, td1);
    			append_dev(td1, span1);
    			append_dev(td1, t4);
    			append_dev(td1, i1);
    			append_dev(table0, t5);
    			append_dev(table0, tr2);
    			append_dev(tr2, td2);
    			append_dev(td2, span2);
    			append_dev(td2, t7);
    			append_dev(td2, i2);
    			if (if_block0) if_block0.m(i2, null);
    			append_dev(table0, t8);
    			append_dev(table0, tr3);
    			append_dev(tr3, td3);
    			append_dev(td3, span3);
    			append_dev(td3, t10);
    			append_dev(td3, i3);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, table1);
    			append_dev(table1, tr4);
    			append_dev(tr4, td4);
    			append_dev(td4, i4);
    			append_dev(tr4, t12);
    			append_dev(tr4, td5);
    			append_dev(td5, i5);
    			append_dev(tr4, t13);
    			append_dev(tr4, td6);
    			append_dev(td6, i6);
    			if (if_block1) if_block1.m(i6, null);
    			append_dev(tr4, t14);
    			append_dev(tr4, td7);
    			append_dev(td7, i7);
    		},

    		p: function update(changed, ctx) {
    			if (ctx.count > 0) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    				} else {
    					if_block0 = create_if_block_1$a(ctx);
    					if_block0.c();
    					if_block0.m(i2, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (ctx.count > 0) {
    				if (if_block1) {
    					if_block1.p(changed, ctx);
    				} else {
    					if_block1 = create_if_block$d(ctx);
    					if_block1.c();
    					if_block1.m(i6, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},

    		i: noop,
    		o: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div0);
    			}

    			if (if_block0) if_block0.d();

    			if (detaching) {
    				detach_dev(t11);
    				detach_dev(div1);
    			}

    			if (if_block1) if_block1.d();
    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$n.name, type: "component", source: "", ctx });
    	return block;
    }

    let current = 'home';

    function changeIndex(idx) {
        showFilter.set(false);

        if(idx == 0) {
            tabIndex.set(idx);
            document.documentElement.style.setProperty('--home-color', '#ffc107');
            document.documentElement.style.setProperty('--search-color', '#fff');
            document.documentElement.style.setProperty('--garage-color', '#fff');
            document.documentElement.style.setProperty('--account-color', '#fff');
        }
        else if(idx == 1) {
            tabIndex.set(idx);
            document.documentElement.style.setProperty('--home-color', '#fff');
            document.documentElement.style.setProperty('--search-color', '#ffc107');
            document.documentElement.style.setProperty('--garage-color', '#fff');
            document.documentElement.style.setProperty('--account-color', '#fff');
        }
        else if(idx == 2) {
            tabIndex.set(idx);
            document.documentElement.style.setProperty('--home-color', '#fff');
            document.documentElement.style.setProperty('--search-color', '#fff');
            document.documentElement.style.setProperty('--garage-color', '#ffc107');
            document.documentElement.style.setProperty('--account-color', '#fff');
        }
        else {
            tabIndex.set(idx);
            document.documentElement.style.setProperty('--home-color', '#fff');
            document.documentElement.style.setProperty('--search-color', '#fff');
            document.documentElement.style.setProperty('--garage-color', '#fff');
            document.documentElement.style.setProperty('--account-color', '#ffc107');
        }
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let $garageTab, $tabIndex;

    	validate_store(garageTab, 'garageTab');
    	component_subscribe($$self, garageTab, $$value => { $garageTab = $$value; $$invalidate('$garageTab', $garageTab); });
    	validate_store(tabIndex, 'tabIndex');
    	component_subscribe($$self, tabIndex, $$value => { $tabIndex = $$value; $$invalidate('$tabIndex', $tabIndex); });

    	

        let count;

        if(screen.width <= 1024) {
            $$invalidate('count', count = $garageTab.shared.length + $garageTab.owned.length);
        }
        else {
            $$invalidate('count', count = $garageTab.compare.length + $garageTab.shared.length + $garageTab.owned.length);
        }

        setTimeout(function() {
            if($tabIndex == 0) {
                document.documentElement.style.setProperty('--home-color', '#ffc107');
                document.documentElement.style.setProperty('--search-color', '#fff');
                document.documentElement.style.setProperty('--garage-color', '#fff');
                document.documentElement.style.setProperty('--account-color', '#fff');
            }
            else if($tabIndex == 1) {
                document.documentElement.style.setProperty('--home-color', '#fff');
                document.documentElement.style.setProperty('--search-color', '#ffc107');
                document.documentElement.style.setProperty('--garage-color', '#fff');
                document.documentElement.style.setProperty('--account-color', '#fff');
            }
            else if($tabIndex == 2) {
                document.documentElement.style.setProperty('--home-color', '#fff');
                document.documentElement.style.setProperty('--search-color', '#fff');
                document.documentElement.style.setProperty('--garage-color', '#ffc107');
                document.documentElement.style.setProperty('--account-color', '#fff');
            }
            else {
                document.documentElement.style.setProperty('--home-color', '#fff');
                document.documentElement.style.setProperty('--search-color', '#fff');
                document.documentElement.style.setProperty('--garage-color', '#fff');
                document.documentElement.style.setProperty('--account-color', '#ffc107');
            }
        }, 1000);

        setInterval(function() {
            if(screen.width <= 1024) {
                $$invalidate('count', count = $garageTab.shared.length + $garageTab.owned.length);
            }
            else {
                $$invalidate('count', count = $garageTab.compare.length + $garageTab.shared.length + $garageTab.owned.length);
            }
        }, 1);

        let margin = 0.2 * screen.height;

        document.documentElement.style.setProperty('--top-margin', margin + 'px');

    	const click_handler = () => changeIndex(0);

    	const click_handler_1 = () => changeIndex(1);

    	const click_handler_2 = () => changeIndex(2);

    	const click_handler_3 = () => changeIndex(3);

    	const click_handler_4 = () => changeIndex(0);

    	const click_handler_5 = () => changeIndex(1);

    	const click_handler_6 = () => changeIndex(2);

    	const click_handler_7 = () => changeIndex(3);

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('count' in $$props) $$invalidate('count', count = $$props.count);
    		if ('margin' in $$props) margin = $$props.margin;
    		if ('current' in $$props) current = $$props.current;
    		if ('$garageTab' in $$props) garageTab.set($garageTab);
    		if ('$tabIndex' in $$props) tabIndex.set($tabIndex);
    	};

    	return {
    		count,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		click_handler_7
    	};
    }

    class SideNav extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$n, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "SideNav", options, id: create_fragment$n.name });
    	}
    }

    class Message {

        constructor(user_id, name, timestamp, message) {
            this.user_id = user_id;
            this.name = name;
            this.timestamp = timestamp;
            this.message = message;
        }
    }

    class Customer {

        constructor(tokens, user, userID) { 

            this.tokens = tokens != null ? tokens : null;
            this.isAuth = true;

            this.name = user.Name;
            this.email = user.Email;
            this.user_id = userID;
            this.picture = user.Picture;
            this.username = user.Username;
            this.access_level = user.Type;
            this.compare = user.Garage.Compare;
            this.owned = user.Garage.Owned;
            this.shared = user.Garage.Shared;
            
            for(let i = 0; i < user.messages.length; i++) {

                let currMess = user.messages[i];

                this.messages.push(new Message(currMess.id, currMess.Name, currMess.Time, currMess.Message));
            }
        }
    }

    class Admin extends Customer {

        constructor(tokens, keyCode, user, userID) {
            super(tokens, user, userID);

            this.keyCode = keyCode != null ? keyCode : null;
        }
    }

    class Business extends Customer {

        constructor(token, user, userID) {
            super(token, user, userID);

            this.business_name = user.BusinessName;
            this.customer_id = user.CustomerID;
            this.auction_cars = user.Auctions;
        }
    }

    function userInit(userID, user) {

        if(user.Type == 'AUSER') {
            currUser.update(state => {
                state = new Admin(state.tokens, state.keyCode, user, userID);
                return state;
            });
        } else if (user.Type == 'BUSER') {
            currUser.update(state => {
                state = new Business(state.tokens, user, userID);
                return state;
            });
        } else if (user.Type == 'CUSER') {
            currUser.update(state => {
                state = new Customer(state.tokens, user, userID);
                return state;
            });
        }
    }

    /* src/Components/Account/Entry.svelte generated by Svelte v3.12.1 */

    const file$n = "src/Components/Account/Entry.svelte";

    // (525:0) {#if showMsg}
    function create_if_block_19$1(ctx) {
    	var div, div_intro, div_outro, current;

    	var message_1 = new StatusMsg({
    		props: {
    		heading: ctx.heading,
    		message: ctx.message,
    		status: ctx.statusColor
    	},
    		$$inline: true
    	});

    	const block = {
    		c: function create() {
    			div = element("div");
    			message_1.$$.fragment.c();
    			attr_dev(div, "id", "status");
    			attr_dev(div, "class", "container-fluid svelte-x3hxnv");
    			add_location(div, file$n, 525, 4, 16214);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(message_1, div, null);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var message_1_changes = {};
    			if (changed.heading) message_1_changes.heading = ctx.heading;
    			if (changed.message) message_1_changes.message = ctx.message;
    			if (changed.statusColor) message_1_changes.status = ctx.statusColor;
    			message_1.$set(message_1_changes);
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(message_1.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				if (!div_intro) div_intro = create_in_transition(div, fly, { x:200, duration:500 });
    				div_intro.start();
    			});

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(message_1.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();

    			div_outro = create_out_transition(div, fly, { x:200, duration:500 });

    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			destroy_component(message_1);

    			if (detaching) {
    				if (div_outro) div_outro.end();
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_19$1.name, type: "if", source: "(525:0) {#if showMsg}", ctx });
    	return block;
    }

    // (540:0) {#if showSignIn}
    function create_if_block_7$3(ctx) {
    	var if_block_anchor;

    	function select_block_type(changed, ctx) {
    		if (ctx.signInFlow == 0) return create_if_block_8$3;
    		if (ctx.signInFlow == 1) return create_if_block_12$2;
    		if (ctx.signInFlow == 2) return create_if_block_17$1;
    	}

    	var current_block_type = select_block_type(null, ctx);
    	var if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (current_block_type === (current_block_type = select_block_type(changed, ctx)) && if_block) {
    				if_block.p(changed, ctx);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);
    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},

    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_7$3.name, type: "if", source: "(540:0) {#if showSignIn}", ctx });
    	return block;
    }

    // (595:30) 
    function create_if_block_17$1(ctx) {
    	var div, h6, t1, input0, t2, input1, t3, button, dispose;

    	function select_block_type_5(changed, ctx) {
    		if (ctx.logLoading) return create_if_block_18$1;
    		return create_else_block_6$1;
    	}

    	var current_block_type = select_block_type_5(null, ctx);
    	var if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h6 = element("h6");
    			h6.textContent = "Fill Out Verification Code and New Password";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			input1 = element("input");
    			t3 = space();
    			button = element("button");
    			if_block.c();
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$n, 596, 12, 20301);
    			attr_dev(input0, "class", "form-control login svelte-x3hxnv");
    			attr_dev(input0, "placeholder", "Verification Code");
    			attr_dev(input0, "autocomplete", "off");
    			add_location(input0, file$n, 597, 12, 20394);
    			attr_dev(input1, "type", "password");
    			attr_dev(input1, "class", "form-control login svelte-x3hxnv");
    			attr_dev(input1, "placeholder", "New Password");
    			attr_dev(input1, "autocomplete", "off");
    			add_location(input1, file$n, 598, 12, 20517);
    			attr_dev(button, "class", "btn btn-success svelte-x3hxnv");
    			button.disabled = ctx.logLoading;
    			add_location(button, file$n, 599, 12, 20717);
    			attr_dev(div, "id", "signIn");
    			attr_dev(div, "class", "container-fluid svelte-x3hxnv");
    			add_location(div, file$n, 595, 8, 20246);

    			dispose = [
    				listen_dev(input0, "input", ctx.input0_input_handler_2),
    				listen_dev(input1, "input", ctx.input1_input_handler_2),
    				listen_dev(input1, "keydown", ctx.keydown_handler_4),
    				listen_dev(button, "click", ctx.resetPassword)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h6);
    			append_dev(div, t1);
    			append_dev(div, input0);

    			set_input_value(input0, ctx.regCode);

    			append_dev(div, t2);
    			append_dev(div, input1);

    			set_input_value(input1, ctx.logPassword);

    			append_dev(div, t3);
    			append_dev(div, button);
    			if_block.m(button, null);
    		},

    		p: function update(changed, ctx) {
    			if (changed.regCode && (input0.value !== ctx.regCode)) set_input_value(input0, ctx.regCode);
    			if (changed.logPassword && (input1.value !== ctx.logPassword)) set_input_value(input1, ctx.logPassword);

    			if (current_block_type !== (current_block_type = select_block_type_5(changed, ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);
    				if (if_block) {
    					if_block.c();
    					if_block.m(button, null);
    				}
    			}

    			if (changed.logLoading) {
    				prop_dev(button, "disabled", ctx.logLoading);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			if_block.d();
    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_17$1.name, type: "if", source: "(595:30) ", ctx });
    	return block;
    }

    // (566:30) 
    function create_if_block_12$2(ctx) {
    	var div, h6, t1, input, t2, t3, button, t5, dispose;

    	var if_block0 = (ctx.isAdmin) && create_if_block_16$1(ctx);

    	function select_block_type_2(changed, ctx) {
    		if (ctx.isAdmin) return create_if_block_13$2;
    		return create_else_block_4$2;
    	}

    	var current_block_type = select_block_type_2(null, ctx);
    	var if_block1 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h6 = element("h6");
    			h6.textContent = "Please Fill Out Your Username or Email";
    			t1 = space();
    			input = element("input");
    			t2 = space();
    			if (if_block0) if_block0.c();
    			t3 = space();
    			button = element("button");
    			button.textContent = "Back";
    			t5 = space();
    			if_block1.c();
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$n, 567, 12, 18602);
    			attr_dev(input, "class", "form-control login svelte-x3hxnv");
    			attr_dev(input, "placeholder", "username or email");
    			attr_dev(input, "autocomplete", "off");
    			add_location(input, file$n, 568, 12, 18690);
    			attr_dev(button, "class", "btn btn-danger svelte-x3hxnv");
    			set_style(button, "float", "left");
    			set_style(button, "margin-left", "0px");
    			set_style(button, "width", "30%");
    			add_location(button, file$n, 573, 12, 19282);
    			attr_dev(div, "id", "signIn");
    			attr_dev(div, "class", "container-fluid svelte-x3hxnv");
    			add_location(div, file$n, 566, 8, 18547);

    			dispose = [
    				listen_dev(input, "input", ctx.input_input_handler_1),
    				listen_dev(input, "keyup", ctx.checkForAdmin),
    				listen_dev(input, "keydown", ctx.keydown_handler_2),
    				listen_dev(button, "click", ctx.click_handler_4)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h6);
    			append_dev(div, t1);
    			append_dev(div, input);

    			set_input_value(input, ctx.logUsername);

    			append_dev(div, t2);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t3);
    			append_dev(div, button);
    			append_dev(div, t5);
    			if_block1.m(div, null);
    		},

    		p: function update(changed, ctx) {
    			if (changed.logUsername && (input.value !== ctx.logUsername)) set_input_value(input, ctx.logUsername);

    			if (ctx.isAdmin) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    				} else {
    					if_block0 = create_if_block_16$1(ctx);
    					if_block0.c();
    					if_block0.m(div, t3);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (current_block_type === (current_block_type = select_block_type_2(changed, ctx)) && if_block1) {
    				if_block1.p(changed, ctx);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);
    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			if (if_block0) if_block0.d();
    			if_block1.d();
    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_12$2.name, type: "if", source: "(566:30) ", ctx });
    	return block;
    }

    // (541:4) {#if signInFlow == 0}
    function create_if_block_8$3(ctx) {
    	var div, h6, t1, input0, t2, input1, t3, t4, button0, t5, p, t7, t8, hr, t9, button1, i0, t10, t11, button2, i1, t12, dispose;

    	var if_block0 = (ctx.isAdmin) && create_if_block_11$2(ctx);

    	function select_block_type_1(changed, ctx) {
    		if (ctx.logLoading) return create_if_block_10$3;
    		return create_else_block_2$4;
    	}

    	var current_block_type = select_block_type_1(null, ctx);
    	var if_block1 = current_block_type(ctx);

    	var if_block2 = (ctx.screenWidth <= 1024) && create_if_block_9$3(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h6 = element("h6");
    			h6.textContent = "Sign Into Your Account";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			input1 = element("input");
    			t3 = space();
    			if (if_block0) if_block0.c();
    			t4 = space();
    			button0 = element("button");
    			if_block1.c();
    			t5 = space();
    			p = element("p");
    			p.textContent = "Forgot Password?";
    			t7 = space();
    			if (if_block2) if_block2.c();
    			t8 = space();
    			hr = element("hr");
    			t9 = space();
    			button1 = element("button");
    			i0 = element("i");
    			t10 = text(" Login in wIth Facebook");
    			t11 = space();
    			button2 = element("button");
    			i1 = element("i");
    			t12 = text(" Login in wIth Google");
    			set_style(h6, "text-align", "center");
    			set_style(h6, "margin-top", "-10px");
    			add_location(h6, file$n, 542, 12, 16741);
    			attr_dev(input0, "class", "form-control login svelte-x3hxnv");
    			attr_dev(input0, "placeholder", "username or email");
    			attr_dev(input0, "autocomplete", "off");
    			add_location(input0, file$n, 543, 12, 16830);
    			attr_dev(input1, "type", "password");
    			attr_dev(input1, "class", "form-control login svelte-x3hxnv");
    			attr_dev(input1, "placeholder", "password");
    			attr_dev(input1, "autocomplete", "off");
    			add_location(input1, file$n, 544, 12, 16984);
    			attr_dev(button0, "class", "btn btn-success svelte-x3hxnv");
    			button0.disabled = ctx.logLoading;
    			add_location(button0, file$n, 548, 12, 17399);
    			set_style(p, "text-align", "center");
    			set_style(p, "margin-top", "20px");
    			set_style(p, "cursor", "pointer");
    			add_location(p, file$n, 555, 12, 17710);
    			add_location(hr, file$n, 560, 12, 18106);
    			attr_dev(i0, "class", "fa fa-facebook-square");
    			add_location(i0, file$n, 562, 124, 18239);
    			attr_dev(button1, "class", "btn-primary btn svelte-x3hxnv");
    			set_style(button1, "width", "100%");
    			set_style(button1, "margin-left", "0");
    			add_location(button1, file$n, 562, 12, 18127);
    			attr_dev(i1, "class", "fa fa-google");
    			add_location(i1, file$n, 563, 121, 18431);
    			attr_dev(button2, "class", "btn-danger btn svelte-x3hxnv");
    			set_style(button2, "width", "100%");
    			set_style(button2, "margin-left", "0");
    			add_location(button2, file$n, 563, 12, 18322);
    			attr_dev(div, "id", "signIn");
    			attr_dev(div, "class", "container-fluid svelte-x3hxnv");
    			add_location(div, file$n, 541, 8, 16686);

    			dispose = [
    				listen_dev(input0, "input", ctx.input0_input_handler),
    				listen_dev(input0, "keyup", ctx.checkForAdmin),
    				listen_dev(input1, "input", ctx.input1_input_handler),
    				listen_dev(input1, "keydown", ctx.keydown_handler),
    				listen_dev(button0, "click", ctx.logIn),
    				listen_dev(p, "click", ctx.click_handler),
    				listen_dev(button1, "click", ctx.click_handler_2),
    				listen_dev(button2, "click", ctx.click_handler_3)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h6);
    			append_dev(div, t1);
    			append_dev(div, input0);

    			set_input_value(input0, ctx.logUsername);

    			append_dev(div, t2);
    			append_dev(div, input1);

    			set_input_value(input1, ctx.logPassword);

    			append_dev(div, t3);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t4);
    			append_dev(div, button0);
    			if_block1.m(button0, null);
    			append_dev(div, t5);
    			append_dev(div, p);
    			append_dev(div, t7);
    			if (if_block2) if_block2.m(div, null);
    			append_dev(div, t8);
    			append_dev(div, hr);
    			append_dev(div, t9);
    			append_dev(div, button1);
    			append_dev(button1, i0);
    			append_dev(button1, t10);
    			append_dev(div, t11);
    			append_dev(div, button2);
    			append_dev(button2, i1);
    			append_dev(button2, t12);
    		},

    		p: function update(changed, ctx) {
    			if (changed.logUsername && (input0.value !== ctx.logUsername)) set_input_value(input0, ctx.logUsername);
    			if (changed.logPassword && (input1.value !== ctx.logPassword)) set_input_value(input1, ctx.logPassword);

    			if (ctx.isAdmin) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    				} else {
    					if_block0 = create_if_block_11$2(ctx);
    					if_block0.c();
    					if_block0.m(div, t4);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (current_block_type !== (current_block_type = select_block_type_1(changed, ctx))) {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);
    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(button0, null);
    				}
    			}

    			if (changed.logLoading) {
    				prop_dev(button0, "disabled", ctx.logLoading);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			if (if_block0) if_block0.d();
    			if_block1.d();
    			if (if_block2) if_block2.d();
    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_8$3.name, type: "if", source: "(541:4) {#if signInFlow == 0}", ctx });
    	return block;
    }

    // (603:16) {:else}
    function create_else_block_6$1(ctx) {
    	var i, t;

    	const block = {
    		c: function create() {
    			i = element("i");
    			t = text(" Reset Password");
    			attr_dev(i, "class", "fa fa-refresh");
    			add_location(i, file$n, 603, 20, 20941);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    			insert_dev(target, t, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(i);
    				detach_dev(t);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_6$1.name, type: "else", source: "(603:16) {:else}", ctx });
    	return block;
    }

    // (601:16) {#if logLoading}
    function create_if_block_18$1(ctx) {
    	var i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fa fa-spinner fa-pulse");
    			add_location(i, file$n, 601, 20, 20856);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(i);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_18$1.name, type: "if", source: "(601:16) {#if logLoading}", ctx });
    	return block;
    }

    // (570:12) {#if isAdmin}
    function create_if_block_16$1(ctx) {
    	var input0, t, input1, dispose;

    	const block = {
    		c: function create() {
    			input0 = element("input");
    			t = space();
    			input1 = element("input");
    			attr_dev(input0, "type", "password");
    			attr_dev(input0, "class", "form-control login svelte-x3hxnv");
    			attr_dev(input0, "placeholder", "Password");
    			attr_dev(input0, "autocomplete", "off");
    			add_location(input0, file$n, 570, 16, 18933);
    			attr_dev(input1, "type", "password");
    			attr_dev(input1, "class", "form-control login svelte-x3hxnv");
    			attr_dev(input1, "placeholder", "New Password");
    			attr_dev(input1, "autocomplete", "off");
    			add_location(input1, file$n, 571, 16, 19071);

    			dispose = [
    				listen_dev(input0, "input", ctx.input0_input_handler_1),
    				listen_dev(input1, "input", ctx.input1_input_handler_1),
    				listen_dev(input1, "keydown", ctx.keydown_handler_3)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, input0, anchor);

    			set_input_value(input0, ctx.logPassword);

    			insert_dev(target, t, anchor);
    			insert_dev(target, input1, anchor);

    			set_input_value(input1, ctx.regPassword);
    		},

    		p: function update(changed, ctx) {
    			if (changed.logPassword && (input0.value !== ctx.logPassword)) set_input_value(input0, ctx.logPassword);
    			if (changed.regPassword && (input1.value !== ctx.regPassword)) set_input_value(input1, ctx.regPassword);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(input0);
    				detach_dev(t);
    				detach_dev(input1);
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_16$1.name, type: "if", source: "(570:12) {#if isAdmin}", ctx });
    	return block;
    }

    // (585:12) {:else}
    function create_else_block_4$2(ctx) {
    	var button, dispose;

    	function select_block_type_4(changed, ctx) {
    		if (ctx.logLoading) return create_if_block_15$2;
    		return create_else_block_5$1;
    	}

    	var current_block_type = select_block_type_4(null, ctx);
    	var if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			button = element("button");
    			if_block.c();
    			attr_dev(button, "class", "btn btn-success svelte-x3hxnv");
    			set_style(button, "float", "right");
    			set_style(button, "width", "30%");
    			button.disabled = ctx.logLoading;
    			add_location(button, file$n, 585, 16, 19844);
    			dispose = listen_dev(button, "click", ctx.checkUser);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			if_block.m(button, null);
    		},

    		p: function update(changed, ctx) {
    			if (current_block_type !== (current_block_type = select_block_type_4(changed, ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);
    				if (if_block) {
    					if_block.c();
    					if_block.m(button, null);
    				}
    			}

    			if (changed.logLoading) {
    				prop_dev(button, "disabled", ctx.logLoading);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    			}

    			if_block.d();
    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_4$2.name, type: "else", source: "(585:12) {:else}", ctx });
    	return block;
    }

    // (577:12) {#if isAdmin}
    function create_if_block_13$2(ctx) {
    	var button, dispose;

    	function select_block_type_3(changed, ctx) {
    		if (ctx.logLoading) return create_if_block_14$2;
    		return create_else_block_3$3;
    	}

    	var current_block_type = select_block_type_3(null, ctx);
    	var if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			button = element("button");
    			if_block.c();
    			attr_dev(button, "class", "btn btn-success svelte-x3hxnv");
    			set_style(button, "float", "right");
    			set_style(button, "width", "30%");
    			button.disabled = ctx.logLoading;
    			add_location(button, file$n, 577, 16, 19483);
    			dispose = listen_dev(button, "click", ctx.logIn);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			if_block.m(button, null);
    		},

    		p: function update(changed, ctx) {
    			if (current_block_type !== (current_block_type = select_block_type_3(changed, ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);
    				if (if_block) {
    					if_block.c();
    					if_block.m(button, null);
    				}
    			}

    			if (changed.logLoading) {
    				prop_dev(button, "disabled", ctx.logLoading);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(button);
    			}

    			if_block.d();
    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_13$2.name, type: "if", source: "(577:12) {#if isAdmin}", ctx });
    	return block;
    }

    // (589:20) {:else}
    function create_else_block_5$1(ctx) {
    	var t;

    	const block = {
    		c: function create() {
    			t = text("Next");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(t);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_5$1.name, type: "else", source: "(589:20) {:else}", ctx });
    	return block;
    }

    // (587:20) {#if logLoading}
    function create_if_block_15$2(ctx) {
    	var i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fa fa-spinner fa-pulse");
    			add_location(i, file$n, 587, 24, 20018);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(i);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_15$2.name, type: "if", source: "(587:20) {#if logLoading}", ctx });
    	return block;
    }

    // (581:20) {:else}
    function create_else_block_3$3(ctx) {
    	var t;

    	const block = {
    		c: function create() {
    			t = text("Reset");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(t);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_3$3.name, type: "else", source: "(581:20) {:else}", ctx });
    	return block;
    }

    // (579:20) {#if logLoading}
    function create_if_block_14$2(ctx) {
    	var i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fa fa-spinner fa-pulse");
    			add_location(i, file$n, 579, 24, 19653);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(i);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_14$2.name, type: "if", source: "(579:20) {#if logLoading}", ctx });
    	return block;
    }

    // (546:12) {#if isAdmin}
    function create_if_block_11$2(ctx) {
    	var input, dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "class", "form-control login svelte-x3hxnv");
    			attr_dev(input, "placeholder", "One-Time Passcode");
    			attr_dev(input, "autocomplete", "off");
    			add_location(input, file$n, 546, 16, 17203);

    			dispose = [
    				listen_dev(input, "input", ctx.input_input_handler),
    				listen_dev(input, "keydown", ctx.keydown_handler_1)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);

    			set_input_value(input, ctx.regCode);
    		},

    		p: function update(changed, ctx) {
    			if (changed.regCode && (input.value !== ctx.regCode)) set_input_value(input, ctx.regCode);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(input);
    			}

    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_11$2.name, type: "if", source: "(546:12) {#if isAdmin}", ctx });
    	return block;
    }

    // (552:16) {:else}
    function create_else_block_2$4(ctx) {
    	var i, t;

    	const block = {
    		c: function create() {
    			i = element("i");
    			t = text(" Login");
    			attr_dev(i, "class", "fa fa-sign-in");
    			add_location(i, file$n, 552, 20, 17615);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    			insert_dev(target, t, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(i);
    				detach_dev(t);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_2$4.name, type: "else", source: "(552:16) {:else}", ctx });
    	return block;
    }

    // (550:16) {#if logLoading}
    function create_if_block_10$3(ctx) {
    	var i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fa fa-spinner fa-pulse");
    			add_location(i, file$n, 550, 20, 17530);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(i);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_10$3.name, type: "if", source: "(550:16) {#if logLoading}", ctx });
    	return block;
    }

    // (557:12) {#if screenWidth <= 1024}
    function create_if_block_9$3(ctx) {
    	var p, t, span, dispose;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text("Don't Have an Account? ");
    			span = element("span");
    			span.textContent = "Sign Up";
    			set_style(span, "color", "blue");
    			add_location(span, file$n, 557, 161, 18027);
    			set_style(p, "text-align", "center");
    			set_style(p, "margin-top", "20px");
    			set_style(p, "cursor", "pointer");
    			add_location(p, file$n, 557, 16, 17882);
    			dispose = listen_dev(p, "click", ctx.click_handler_1);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    			append_dev(p, span);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(p);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_9$3.name, type: "if", source: "(557:12) {#if screenWidth <= 1024}", ctx });
    	return block;
    }

    // (613:0) {#if showSignUp}
    function create_if_block$e(ctx) {
    	var if_block_anchor;

    	function select_block_type_6(changed, ctx) {
    		if (ctx.signUpFlow == 0) return create_if_block_1$b;
    		if (ctx.signUpFlow == 1) return create_if_block_4$6;
    		if (ctx.signUpFlow == 2) return create_if_block_6$3;
    	}

    	var current_block_type = select_block_type_6(null, ctx);
    	var if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},

    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (current_block_type === (current_block_type = select_block_type_6(changed, ctx)) && if_block) {
    				if_block.p(changed, ctx);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);
    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},

    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$e.name, type: "if", source: "(613:0) {#if showSignUp}", ctx });
    	return block;
    }

    // (647:30) 
    function create_if_block_6$3(ctx) {
    	var div, h5, i, t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h5 = element("h5");
    			i = element("i");
    			t = text(" Sign In with Your Crednetials");
    			attr_dev(i, "class", "fa fa-arrow-left");
    			add_location(i, file$n, 648, 43, 23544);
    			set_style(h5, "text-align", "center");
    			add_location(h5, file$n, 648, 12, 23513);
    			attr_dev(div, "id", "signUp");
    			attr_dev(div, "class", "container-fluid svelte-x3hxnv");
    			set_style(div, "margin-top", "25%");
    			add_location(div, file$n, 647, 8, 23434);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h5);
    			append_dev(h5, i);
    			append_dev(h5, t);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_6$3.name, type: "if", source: "(647:30) ", ctx });
    	return block;
    }

    // (634:30) 
    function create_if_block_4$6(ctx) {
    	var div, h6, t1, input, t2, button0, t4, button1, dispose;

    	function select_block_type_8(changed, ctx) {
    		if (ctx.regLoading) return create_if_block_5$3;
    		return create_else_block_1$7;
    	}

    	var current_block_type = select_block_type_8(null, ctx);
    	var if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h6 = element("h6");
    			h6.textContent = "Check Your Email for Code";
    			t1 = space();
    			input = element("input");
    			t2 = space();
    			button0 = element("button");
    			button0.textContent = "Resend";
    			t4 = space();
    			button1 = element("button");
    			if_block.c();
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$n, 635, 12, 22683);
    			attr_dev(input, "class", "form-control login svelte-x3hxnv");
    			attr_dev(input, "placeholder", "code");
    			attr_dev(input, "autocomplete", "off");
    			add_location(input, file$n, 636, 12, 22758);
    			attr_dev(button0, "class", "btn btn-primary svelte-x3hxnv");
    			set_style(button0, "float", "left");
    			set_style(button0, "margin-left", "0px");
    			set_style(button0, "margin-top", "20px");
    			set_style(button0, "width", "30%");
    			add_location(button0, file$n, 637, 12, 22924);
    			attr_dev(button1, "class", "btn btn-success svelte-x3hxnv");
    			set_style(button1, "float", "right");
    			set_style(button1, "width", "30%");
    			button1.disabled = ctx.regLoading;
    			add_location(button1, file$n, 638, 12, 23071);
    			attr_dev(div, "id", "signUp");
    			attr_dev(div, "class", "container-fluid svelte-x3hxnv");
    			set_style(div, "margin-top", "20%");
    			add_location(div, file$n, 634, 8, 22604);

    			dispose = [
    				listen_dev(input, "input", ctx.input_input_handler_2),
    				listen_dev(input, "keydown", ctx.keydown_handler_6),
    				listen_dev(button0, "click", ctx.resendCode),
    				listen_dev(button1, "click", ctx.confirmCode)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h6);
    			append_dev(div, t1);
    			append_dev(div, input);

    			set_input_value(input, ctx.regCode);

    			append_dev(div, t2);
    			append_dev(div, button0);
    			append_dev(div, t4);
    			append_dev(div, button1);
    			if_block.m(button1, null);
    		},

    		p: function update(changed, ctx) {
    			if (changed.regCode && (input.value !== ctx.regCode)) set_input_value(input, ctx.regCode);

    			if (current_block_type !== (current_block_type = select_block_type_8(changed, ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);
    				if (if_block) {
    					if_block.c();
    					if_block.m(button1, null);
    				}
    			}

    			if (changed.regLoading) {
    				prop_dev(button1, "disabled", ctx.regLoading);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			if_block.d();
    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_4$6.name, type: "if", source: "(634:30) ", ctx });
    	return block;
    }

    // (614:4) {#if signUpFlow == 0}
    function create_if_block_1$b(ctx) {
    	var div, h6, t1, input0, t2, input1, t3, input2, t4, input3, t5, input4, t6, button, t7, dispose;

    	function select_block_type_7(changed, ctx) {
    		if (ctx.regLoading) return create_if_block_3$8;
    		return create_else_block$b;
    	}

    	var current_block_type = select_block_type_7(null, ctx);
    	var if_block0 = current_block_type(ctx);

    	var if_block1 = (ctx.screenWidth <= 1024) && create_if_block_2$9(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h6 = element("h6");
    			h6.textContent = "Sign Up For An Account";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			input1 = element("input");
    			t3 = space();
    			input2 = element("input");
    			t4 = space();
    			input3 = element("input");
    			t5 = space();
    			input4 = element("input");
    			t6 = space();
    			button = element("button");
    			if_block0.c();
    			t7 = space();
    			if (if_block1) if_block1.c();
    			set_style(h6, "text-align", "center");
    			add_location(h6, file$n, 615, 12, 21205);
    			attr_dev(input0, "class", "form-control login svelte-x3hxnv");
    			attr_dev(input0, "placeholder", "name");
    			attr_dev(input0, "autocomplete", "off");
    			add_location(input0, file$n, 616, 12, 21277);
    			attr_dev(input1, "class", "form-control login svelte-x3hxnv");
    			attr_dev(input1, "placeholder", "email");
    			attr_dev(input1, "autocomplete", "off");
    			add_location(input1, file$n, 617, 12, 21387);
    			attr_dev(input2, "class", "form-control login svelte-x3hxnv");
    			attr_dev(input2, "placeholder", "username");
    			attr_dev(input2, "autocomplete", "off");
    			add_location(input2, file$n, 618, 12, 21499);
    			attr_dev(input3, "type", "password");
    			attr_dev(input3, "class", "form-control login svelte-x3hxnv");
    			attr_dev(input3, "placeholder", "password (min 8 characters)");
    			attr_dev(input3, "autocomplete", "off");
    			add_location(input3, file$n, 619, 12, 21617);
    			attr_dev(input4, "type", "password");
    			attr_dev(input4, "class", "form-control login svelte-x3hxnv");
    			attr_dev(input4, "placeholder", "confirm password");
    			attr_dev(input4, "autocomplete", "off");
    			add_location(input4, file$n, 620, 12, 21770);
    			attr_dev(button, "class", "btn btn-success svelte-x3hxnv");
    			button.disabled = ctx.regLoading;
    			add_location(button, file$n, 621, 12, 21972);
    			attr_dev(div, "id", "signUp");
    			attr_dev(div, "class", "container-fluid svelte-x3hxnv");
    			add_location(div, file$n, 614, 8, 21150);

    			dispose = [
    				listen_dev(input0, "input", ctx.input0_input_handler_3),
    				listen_dev(input1, "input", ctx.input1_input_handler_3),
    				listen_dev(input2, "input", ctx.input2_input_handler),
    				listen_dev(input3, "input", ctx.input3_input_handler),
    				listen_dev(input4, "input", ctx.input4_input_handler),
    				listen_dev(input4, "keydown", ctx.keydown_handler_5),
    				listen_dev(button, "click", ctx.register)
    			];
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h6);
    			append_dev(div, t1);
    			append_dev(div, input0);

    			set_input_value(input0, ctx.regName);

    			append_dev(div, t2);
    			append_dev(div, input1);

    			set_input_value(input1, ctx.regEmail);

    			append_dev(div, t3);
    			append_dev(div, input2);

    			set_input_value(input2, ctx.regUsername);

    			append_dev(div, t4);
    			append_dev(div, input3);

    			set_input_value(input3, ctx.regPassword);

    			append_dev(div, t5);
    			append_dev(div, input4);

    			set_input_value(input4, ctx.regConPassword);

    			append_dev(div, t6);
    			append_dev(div, button);
    			if_block0.m(button, null);
    			append_dev(div, t7);
    			if (if_block1) if_block1.m(div, null);
    		},

    		p: function update(changed, ctx) {
    			if (changed.regName && (input0.value !== ctx.regName)) set_input_value(input0, ctx.regName);
    			if (changed.regEmail && (input1.value !== ctx.regEmail)) set_input_value(input1, ctx.regEmail);
    			if (changed.regUsername && (input2.value !== ctx.regUsername)) set_input_value(input2, ctx.regUsername);
    			if (changed.regPassword && (input3.value !== ctx.regPassword)) set_input_value(input3, ctx.regPassword);
    			if (changed.regConPassword && (input4.value !== ctx.regConPassword)) set_input_value(input4, ctx.regConPassword);

    			if (current_block_type !== (current_block_type = select_block_type_7(changed, ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);
    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(button, null);
    				}
    			}

    			if (changed.regLoading) {
    				prop_dev(button, "disabled", ctx.regLoading);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			if_block0.d();
    			if (if_block1) if_block1.d();
    			run_all(dispose);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$b.name, type: "if", source: "(614:4) {#if signUpFlow == 0}", ctx });
    	return block;
    }

    // (642:16) {:else}
    function create_else_block_1$7(ctx) {
    	var t;

    	const block = {
    		c: function create() {
    			t = text("Confirm");
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(t);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_1$7.name, type: "else", source: "(642:16) {:else}", ctx });
    	return block;
    }

    // (640:16) {#if regLoading}
    function create_if_block_5$3(ctx) {
    	var i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fa fa-spinner fa-spin");
    			add_location(i, file$n, 640, 20, 23239);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(i);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_5$3.name, type: "if", source: "(640:16) {#if regLoading}", ctx });
    	return block;
    }

    // (625:16) {:else}
    function create_else_block$b(ctx) {
    	var i, t;

    	const block = {
    		c: function create() {
    			i = element("i");
    			t = text(" Register");
    			attr_dev(i, "class", "fa fa-user-plus");
    			add_location(i, file$n, 625, 20, 22191);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    			insert_dev(target, t, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(i);
    				detach_dev(t);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$b.name, type: "else", source: "(625:16) {:else}", ctx });
    	return block;
    }

    // (623:16) {#if regLoading}
    function create_if_block_3$8(ctx) {
    	var i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fa fa-spinner fa-pulse");
    			add_location(i, file$n, 623, 20, 22106);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(i);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_3$8.name, type: "if", source: "(623:16) {#if regLoading}", ctx });
    	return block;
    }

    // (630:12) {#if screenWidth <= 1024}
    function create_if_block_2$9(ctx) {
    	var p, t, span, dispose;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text("Already Have an Account? ");
    			span = element("span");
    			span.textContent = "Sign In";
    			set_style(span, "color", "blue");
    			add_location(span, file$n, 630, 163, 22483);
    			set_style(p, "text-align", "center");
    			set_style(p, "margin-top", "20px");
    			set_style(p, "cursor", "pointer");
    			add_location(p, file$n, 630, 16, 22336);
    			dispose = listen_dev(p, "click", ctx.click_handler_5);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    			append_dev(p, span);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(p);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$9.name, type: "if", source: "(630:12) {#if screenWidth <= 1024}", ctx });
    	return block;
    }

    function create_fragment$o(ctx) {
    	var t0, table, tr, td, img, t1, t2, t3, div, t4, if_block2_anchor, current;

    	var if_block0 = (ctx.showMsg) && create_if_block_19$1(ctx);

    	var modal = new Modal({ $$inline: true });

    	var if_block1 = (ctx.showSignIn) && create_if_block_7$3(ctx);

    	var if_block2 = (ctx.showSignUp) && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			table = element("table");
    			tr = element("tr");
    			td = element("td");
    			img = element("img");
    			t1 = space();
    			modal.$$.fragment.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			div = element("div");
    			t4 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    			attr_dev(img, "id", "Logo");
    			attr_dev(img, "alt", "Logo");
    			attr_dev(img, "src", 'https://autoarch.blob.core.windows.net/resources/LOGO.png');
    			attr_dev(img, "class", "svelte-x3hxnv");
    			add_location(img, file$n, 533, 12, 16488);
    			add_location(td, file$n, 532, 8, 16470);
    			add_location(tr, file$n, 531, 4, 16456);
    			attr_dev(table, "align", "center");
    			add_location(table, file$n, 530, 0, 16428);
    			attr_dev(div, "id", "divider");
    			attr_dev(div, "class", "svelte-x3hxnv");
    			add_location(div, file$n, 610, 0, 21069);
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, tr);
    			append_dev(tr, td);
    			append_dev(td, img);
    			insert_dev(target, t1, anchor);
    			mount_component(modal, target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (ctx.showMsg) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    					transition_in(if_block0, 1);
    				} else {
    					if_block0 = create_if_block_19$1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();
    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});
    				check_outros();
    			}

    			if (ctx.showSignIn) {
    				if (if_block1) {
    					if_block1.p(changed, ctx);
    				} else {
    					if_block1 = create_if_block_7$3(ctx);
    					if_block1.c();
    					if_block1.m(t3.parentNode, t3);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (ctx.showSignUp) {
    				if (if_block2) {
    					if_block2.p(changed, ctx);
    				} else {
    					if_block2 = create_if_block$e(ctx);
    					if_block2.c();
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);

    			transition_in(modal.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(modal.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);

    			if (detaching) {
    				detach_dev(t0);
    				detach_dev(table);
    				detach_dev(t1);
    			}

    			destroy_component(modal, detaching);

    			if (detaching) {
    				detach_dev(t2);
    			}

    			if (if_block1) if_block1.d(detaching);

    			if (detaching) {
    				detach_dev(t3);
    				detach_dev(div);
    				detach_dev(t4);
    			}

    			if (if_block2) if_block2.d(detaching);

    			if (detaching) {
    				detach_dev(if_block2_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$o.name, type: "component", source: "", ctx });
    	return block;
    }

    function externalSignIn(provider) {
        console.log(window.location.href);
        if(provider == 'FaceBook') {
            window.location.href = 'https://autoknct.auth.ca-central-1.amazoncognito.com/oauth2/authorize?identity_provider=Facebook&redirect_uri='+ window.location.href + '&response_type=token&client_id=hhj39244ktpq30gbq9ut6b84p&scope=email+openid+phone+profile';
        }
    }

    function instance$k($$self, $$props, $$invalidate) {
    	

        let Payload, isAdmin = false;

        let signUpFlow = 0, signInFlow = 0;

        let logUsername = '', logPassword = '';

        let regName = '', regEmail = '', regUsername = '', regPassword  = '', regConPassword = '', regCode = '';

        let logLoading = false, regLoading = false;

        let showMsg = false, statusColor = '', heading = '', message = ''; 

        document.documentElement.style.setProperty('--msg-color', statusColor);

        function checkForAdmin() {
            if(logUsername.includes('autoknct.com')) {
                $$invalidate('isAdmin', isAdmin = true);
            }
        }

        function checkUser() {

            if(logUsername != '') {

                $$invalidate('logLoading', logLoading = true);

                Payload = {
                    username : logUsername.toLowerCase(),
                    func : 'checkUser'
                };

                invokeLambda$1(env.lambda.nodeAPI, Payload).then((response) => {

                    if(response.CodeDeliveryDetails != undefined) {

                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'SUCCESS!'), $$invalidate('message', message = 'Please Check Email (Spam) For Verification Code'), $$invalidate('statusColor', statusColor = 'green'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 5000);

                        $$invalidate('logLoading', logLoading = false); $$invalidate('signInFlow', signInFlow = 2);

                    } else {

                        console.log(response);

                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error'), $$invalidate('message', message = "Please Try Again Later"), $$invalidate('statusColor', statusColor = 'red'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 2000);

                    }
                }).catch((err) => {

                    console.log(err);

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error'), $$invalidate('message', message = "Please Try Again Later"), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                });
            }
            else {
                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error'), $$invalidate('message', message = "Please Fill Username"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);
            }
        }

        function resetPassword() {

            if(logUsername != '' && regCode != '' && logPassword != '') {

                $$invalidate('logLoading', logLoading = true);

                Payload = {
                    username : logUsername.toLowerCase(),
                    password : logPassword,
                    code : regCode,
                    func : 'confirmPassword'
                };

                invokeLambda$1(env.lambda.nodeAPI, Payload).then((response) => {

                    console.log(response);

                    $$invalidate('logUsername', logUsername = ''), $$invalidate('logPassword', logPassword = ''), $$invalidate('regCode', regCode = '');

                    $$invalidate('logLoading', logLoading = false);

                    if(response == null) {

                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'SUCCESS!'), $$invalidate('message', message = 'Please Login With New Password'), $$invalidate('statusColor', statusColor = 'green'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 5000);

                        $$invalidate('signInFlow', signInFlow = 0);

                    } else {

                        console.log(response);

                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error'), $$invalidate('message', message = "Please Try Again Later"), $$invalidate('statusColor', statusColor = 'red'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 2000);

                    }

                }).catch((err) => {

                    console.log(err);

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error'), $$invalidate('message', message = "Please Try Again Later"), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                });
            }
            else {
                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error'), $$invalidate('message', message = "Please Fill Out Fields"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);
            }
        }

        let currentUser;

        function resetEmailPassword(email, password) {

            Payload = {
                func : 'resetEmail', 
                email : email,
                newPassword : password
            };

            invokeLambda$1(env.lambda.pythonAPI, Payload).then((response) => {

                if(response == 'SUCCESS') {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Success!'), $$invalidate('message', message = 'Password Changed'), $$invalidate('statusColor', statusColor = 'green'); 

                    setTimeout(function() { 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                } else {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Failed!'), $$invalidate('message', message = 'Password Not Changed'), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function() { 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                }

            }).catch((err) => {

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Profile'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            });

        }

        function logIn() {

            if(logUsername != '' && logPassword != '') {

                $$invalidate('logLoading', logLoading = true);

                Payload = { 
                    func : 'signIn', 
                    username : logUsername.toLowerCase(),
                    password : logPassword,
                    newPassword : regPassword,
                    code : regCode
                };

                invokeLambda$1(env.lambda.nodeAPI, Payload).then(async (response) => {

                    console.log(response);

                    await currUser.update(state => {
                        state.setKeyCode(response);
                        return state;
                    });
    /*
                    acctTab.update(state => {
                        state.keyCode = response.key != null ? response.key : '';
                        return state;
                    });
    */
                    if(response.tokns != null) {

                        await currUser.update(state => {
                            state.setTokens(response);
                            return state;
                        });
    /*
                        acctTab.update(state => {
                            state.tokens = response.tokns;
                            return state;
                        });
    */
                        initUser(response.tokns.idToken.payload);
                    } else {

                        await currUser.update(state => {
                            state.setTokens(response);
                            return state;
                        });
    /*                   
                        acctTab.update(state => {
                            state.tokens = response;
                            return state;
                        });
    */
                        initUser(response.idToken.payload);
                    }

                }).catch((err) => {

                    console.log(err);

                    $$invalidate('logLoading', logLoading = false);

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Sign In'), $$invalidate('message', message = 'Wrong Username or Password'), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function() { 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                });
            }
            else {

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Sign In'), $$invalidate('message', message = "Please Fill All Fields!"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            }
        }

        function initUser(response) {

            if(response.email_verified == "false") {

                $$invalidate('signUpFlow', signUpFlow = 1);

                $$invalidate('logLoading', logLoading = false);

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Sign In'), $$invalidate('message', message = 'Please Verify Your Email'), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            } else {

                Payload = { 
                    func : 'checkUser', 
                    username : response['cognito:username'],
                    name : response.name,
                    email : response.email
                };

                invokeLambda$1(env.lambda.pythonAPI, Payload).then(async (res) => {

                    console.log(res);

                    $$invalidate('logUsername', logUsername = ''), $$invalidate('logPassword', logPassword = ''), $$invalidate('regCode', regCode = '');

                    $$invalidate('logLoading', logLoading = false);

                    await userInit(res.user, res.id);
    /*
                    updateGarage(res.garage);
                    updateUser(res.user, res.id); 
    */
                    if(regPassword != '' && response.email.includes('autoknct.com'))
                        resetEmailPassword(response.email, regPassword);

                }).catch((err) => {

                    console.log(err);

                    $$invalidate('logLoading', logLoading = false);

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Sign In'), $$invalidate('message', message = 'Please Try Again Later'), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                });
            }
        }

        function register() {

            if(regEmail != '' && regName != '' && regUsername != '' && regPassword != '' && regConPassword != '') {

                if(regConPassword == regPassword) {

                    $$invalidate('regLoading', regLoading = true);

                    Payload = { 
                        func : 'signUp', 
                        username : regUsername.toLowerCase(),
                        password : regPassword,
                        name : regName,
                        email : regEmail,
                    };

                    invokeLambda$1(env.lambda.nodeAPI, Payload).then((response) => {

                        console.log(response);

                        $$invalidate('regLoading', regLoading = false);

                        if(response.user != null) 
                            $$invalidate('signUpFlow', signUpFlow = 1);
                        else {

                            $$invalidate('regLoading', regLoading = false);

                            $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Registration'), $$invalidate('message', message = "Please try Again"), $$invalidate('statusColor', statusColor = 'red'); 

                            setTimeout(function(){ 
                                $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                            }, 2000);

                        }

                    }).catch((err) => {

                        console.log(err);

                        $$invalidate('regLoading', regLoading = false);

                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Registration'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 2000);

                    });
                }
                else {

                    $$invalidate('regLoading', regLoading = false);

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Registration'), $$invalidate('message', message = "Passwords Do Not Match!"); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                }
            }
            else {

                $$invalidate('regLoading', regLoading = false);

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Registration'), $$invalidate('message', message = "Please Fill all Fields!"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            }
        }

        function resendCode() {

            Payload = { 
                func : 'confirmCode', 
                username : regUsername != '' ? regUsername.toLowerCase() : logUsername.toLowerCase(),
                resend : true
            };

            invokeLambda$1(env.lambda.nodeAPI, Payload).then((response) => {

                console.log(response);

                if(response.includes('resent')) {
                    $$invalidate('signUpFlow', signUpFlow = 1);
                }
                else {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Verification Code'), $$invalidate('message', message = response), $$invalidate('statusColor', statusColor = 'red'); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                }

            }).catch((err) => {

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Verification Code'), $$invalidate('message', message = err), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            });

        }

        function confirmCode() {

            if(regCode != '') {

                $$invalidate('regLoading', regLoading = true);

                Payload = { 
                    func : 'confirmCode', 
                    username : regUsername != '' ? regUsername.toLowerCase() : logUsername.toLowerCase(),
                    resend : false,
                    code : regCode
                };

                invokeLambda$1(env.lambda.nodeAPI, Payload).then((response) => {

                    $$invalidate('regLoading', regLoading = false);

                    if(response.includes("SUCCESS")) {

                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'SUCCESS!'), $$invalidate('message', message = 'Registration Complete!'), $$invalidate('statusColor', statusColor = 'green'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 2000);

                        if(screenWidth <= 1024) {
                            $$invalidate('showSignIn', showSignIn = true); $$invalidate('showSignUp', showSignUp = false);
                        }
                        else
                            $$invalidate('signUpFlow', signUpFlow = 2);
                    }
                    else {

                        $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Verification Code'), $$invalidate('message', message = response), $$invalidate('statusColor', statusColor = 'red'); 

                        setTimeout(function(){ 
                            $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                        }, 2000);

                    }

                }).catch((err) => {

                    $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Verification Code'), $$invalidate('message', message = err); 

                    setTimeout(function(){ 
                        $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                    }, 2000);

                });
            }
            else {

                $$invalidate('regLoading', regLoading = false);

                $$invalidate('showMsg', showMsg = true), $$invalidate('heading', heading = 'Error - Verification Code'), $$invalidate('message', message = "Please Fill all Fields!"), $$invalidate('statusColor', statusColor = 'red'); 

                setTimeout(function(){ 
                    $$invalidate('showMsg', showMsg = false), $$invalidate('heading', heading = ''), $$invalidate('message', message = ''), $$invalidate('statusColor', statusColor = ''); 
                }, 2000);

            }

        }

        let screenWidth = screen.width;

        let leftMargin = ((screen.width - 187) / 2) + 20;

        document.documentElement.style.setProperty('--left-Margin', leftMargin + 'px');

        let showSignUp = true, showSignIn = true;

        if(screenWidth < 1024) {
            $$invalidate('showSignUp', showSignUp = false);
        }

    	function input0_input_handler() {
    		logUsername = this.value;
    		$$invalidate('logUsername', logUsername);
    	}

    	function input1_input_handler() {
    		logPassword = this.value;
    		$$invalidate('logPassword', logPassword);
    	}

    	const keydown_handler = (event) => event.which === 13 && logIn();

    	function input_input_handler() {
    		regCode = this.value;
    		$$invalidate('regCode', regCode);
    	}

    	const keydown_handler_1 = (event) => event.which === 13 && logIn();

    	const click_handler = () => $$invalidate('signInFlow', signInFlow = 1);

    	const click_handler_1 = () => {$$invalidate('showSignIn', showSignIn = false); $$invalidate('showSignUp', showSignUp = true); };

    	const click_handler_2 = () => externalSignIn('FaceBook');

    	const click_handler_3 = () => externalSignIn('Google');

    	function input_input_handler_1() {
    		logUsername = this.value;
    		$$invalidate('logUsername', logUsername);
    	}

    	const keydown_handler_2 = (event) => event.which === 13 && checkUser();

    	function input0_input_handler_1() {
    		logPassword = this.value;
    		$$invalidate('logPassword', logPassword);
    	}

    	function input1_input_handler_1() {
    		regPassword = this.value;
    		$$invalidate('regPassword', regPassword);
    	}

    	const keydown_handler_3 = (event) => event.which === 13 && logIn();

    	const click_handler_4 = () => $$invalidate('signInFlow', signInFlow = 0);

    	function input0_input_handler_2() {
    		regCode = this.value;
    		$$invalidate('regCode', regCode);
    	}

    	function input1_input_handler_2() {
    		logPassword = this.value;
    		$$invalidate('logPassword', logPassword);
    	}

    	const keydown_handler_4 = (event) => event.which === 13 && resetPassword();

    	function input0_input_handler_3() {
    		regName = this.value;
    		$$invalidate('regName', regName);
    	}

    	function input1_input_handler_3() {
    		regEmail = this.value;
    		$$invalidate('regEmail', regEmail);
    	}

    	function input2_input_handler() {
    		regUsername = this.value;
    		$$invalidate('regUsername', regUsername);
    	}

    	function input3_input_handler() {
    		regPassword = this.value;
    		$$invalidate('regPassword', regPassword);
    	}

    	function input4_input_handler() {
    		regConPassword = this.value;
    		$$invalidate('regConPassword', regConPassword);
    	}

    	const keydown_handler_5 = (event) => event.which === 13 && register();

    	const click_handler_5 = () => {$$invalidate('showSignIn', showSignIn = true); $$invalidate('showSignUp', showSignUp = false); };

    	function input_input_handler_2() {
    		regCode = this.value;
    		$$invalidate('regCode', regCode);
    	}

    	const keydown_handler_6 = (event) => event.which === 13 && regCode();

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('Payload' in $$props) Payload = $$props.Payload;
    		if ('isAdmin' in $$props) $$invalidate('isAdmin', isAdmin = $$props.isAdmin);
    		if ('signUpFlow' in $$props) $$invalidate('signUpFlow', signUpFlow = $$props.signUpFlow);
    		if ('signInFlow' in $$props) $$invalidate('signInFlow', signInFlow = $$props.signInFlow);
    		if ('logUsername' in $$props) $$invalidate('logUsername', logUsername = $$props.logUsername);
    		if ('logPassword' in $$props) $$invalidate('logPassword', logPassword = $$props.logPassword);
    		if ('regName' in $$props) $$invalidate('regName', regName = $$props.regName);
    		if ('regEmail' in $$props) $$invalidate('regEmail', regEmail = $$props.regEmail);
    		if ('regUsername' in $$props) $$invalidate('regUsername', regUsername = $$props.regUsername);
    		if ('regPassword' in $$props) $$invalidate('regPassword', regPassword = $$props.regPassword);
    		if ('regConPassword' in $$props) $$invalidate('regConPassword', regConPassword = $$props.regConPassword);
    		if ('regCode' in $$props) $$invalidate('regCode', regCode = $$props.regCode);
    		if ('logLoading' in $$props) $$invalidate('logLoading', logLoading = $$props.logLoading);
    		if ('regLoading' in $$props) $$invalidate('regLoading', regLoading = $$props.regLoading);
    		if ('showMsg' in $$props) $$invalidate('showMsg', showMsg = $$props.showMsg);
    		if ('statusColor' in $$props) $$invalidate('statusColor', statusColor = $$props.statusColor);
    		if ('heading' in $$props) $$invalidate('heading', heading = $$props.heading);
    		if ('message' in $$props) $$invalidate('message', message = $$props.message);
    		if ('currentUser' in $$props) currentUser = $$props.currentUser;
    		if ('screenWidth' in $$props) $$invalidate('screenWidth', screenWidth = $$props.screenWidth);
    		if ('leftMargin' in $$props) leftMargin = $$props.leftMargin;
    		if ('showSignUp' in $$props) $$invalidate('showSignUp', showSignUp = $$props.showSignUp);
    		if ('showSignIn' in $$props) $$invalidate('showSignIn', showSignIn = $$props.showSignIn);
    	};

    	return {
    		isAdmin,
    		signUpFlow,
    		signInFlow,
    		logUsername,
    		logPassword,
    		regName,
    		regEmail,
    		regUsername,
    		regPassword,
    		regConPassword,
    		regCode,
    		logLoading,
    		regLoading,
    		showMsg,
    		statusColor,
    		heading,
    		message,
    		checkForAdmin,
    		checkUser,
    		resetPassword,
    		logIn,
    		register,
    		resendCode,
    		confirmCode,
    		screenWidth,
    		showSignUp,
    		showSignIn,
    		input0_input_handler,
    		input1_input_handler,
    		keydown_handler,
    		input_input_handler,
    		keydown_handler_1,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		input_input_handler_1,
    		keydown_handler_2,
    		input0_input_handler_1,
    		input1_input_handler_1,
    		keydown_handler_3,
    		click_handler_4,
    		input0_input_handler_2,
    		input1_input_handler_2,
    		keydown_handler_4,
    		input0_input_handler_3,
    		input1_input_handler_3,
    		input2_input_handler,
    		input3_input_handler,
    		input4_input_handler,
    		keydown_handler_5,
    		click_handler_5,
    		input_input_handler_2,
    		keydown_handler_6
    	};
    }

    class Entry extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$o, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Entry", options, id: create_fragment$o.name });
    	}
    }

    /* src/App.svelte generated by Svelte v3.12.1 */

    const file$o = "src/App.svelte";

    // (71:0) {:else}
    function create_else_block$c(ctx) {
    	var table, tr, td, img, t0, t1, t2, current_block_type_index, if_block1, if_block1_anchor, current;

    	var sidenav = new SideNav({ $$inline: true });

    	var if_block0 = (ctx.showUser) && create_if_block_5$4(ctx);

    	var if_block_creators = [
    		create_if_block_1$c,
    		create_if_block_2$a,
    		create_if_block_3$9,
    		create_if_block_4$7
    	];

    	var if_blocks = [];

    	function select_block_type_3(changed, ctx) {
    		if (ctx.$tabIndex == 0) return 0;
    		if (ctx.$tabIndex == 1) return 1;
    		if (ctx.$tabIndex == 2) return 2;
    		if (ctx.$tabIndex == 3) return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_3(null, ctx))) {
    		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			table = element("table");
    			tr = element("tr");
    			td = element("td");
    			img = element("img");
    			t0 = space();
    			sidenav.$$.fragment.c();
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			attr_dev(img, "id", "Logo");
    			attr_dev(img, "alt", "Logo");
    			attr_dev(img, "src", 'https://autoarch.blob.core.windows.net/resources/LOGO.png');
    			attr_dev(img, "class", "svelte-wj8gko");
    			add_location(img, file$o, 74, 4, 1775);
    			attr_dev(td, "class", "svelte-wj8gko");
    			add_location(td, file$o, 73, 3, 1766);
    			attr_dev(tr, "class", "svelte-wj8gko");
    			add_location(tr, file$o, 72, 2, 1758);
    			attr_dev(table, "align", "center");
    			attr_dev(table, "class", "svelte-wj8gko");
    			add_location(table, file$o, 71, 1, 1733);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, tr);
    			append_dev(tr, td);
    			append_dev(td, img);
    			insert_dev(target, t0, anchor);
    			mount_component(sidenav, target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (~current_block_type_index) if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			if (ctx.showUser) {
    				if (if_block0) {
    					if_block0.p(changed, ctx);
    				} else {
    					if_block0 = create_if_block_5$4(ctx);
    					if_block0.c();
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			var previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_3(changed, ctx);
    			if (current_block_type_index !== previous_block_index) {
    				if (if_block1) {
    					group_outros();
    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});
    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block1 = if_blocks[current_block_type_index];
    					if (!if_block1) {
    						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block1.c();
    					}
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				} else {
    					if_block1 = null;
    				}
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(sidenav.$$.fragment, local);

    			transition_in(if_block1);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(sidenav.$$.fragment, local);
    			transition_out(if_block1);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(table);
    				detach_dev(t0);
    			}

    			destroy_component(sidenav, detaching);

    			if (detaching) {
    				detach_dev(t1);
    			}

    			if (if_block0) if_block0.d(detaching);

    			if (detaching) {
    				detach_dev(t2);
    			}

    			if (~current_block_type_index) if_blocks[current_block_type_index].d(detaching);

    			if (detaching) {
    				detach_dev(if_block1_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$c.name, type: "else", source: "(71:0) {:else}", ctx });
    	return block;
    }

    // (69:0) {#if $currUser.isAuth == false && sessionStorage.getItem(storageKey) == null}
    function create_if_block$f(ctx) {
    	var current;

    	var entry = new Entry({ $$inline: true });

    	const block = {
    		c: function create() {
    			entry.$$.fragment.c();
    		},

    		m: function mount(target, anchor) {
    			mount_component(entry, target, anchor);
    			current = true;
    		},

    		p: noop,

    		i: function intro(local) {
    			if (current) return;
    			transition_in(entry.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(entry.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			destroy_component(entry, detaching);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$f.name, type: "if", source: "(69:0) {#if $currUser.isAuth == false && sessionStorage.getItem(storageKey) == null}", ctx });
    	return block;
    }

    // (82:1) {#if showUser}
    function create_if_block_5$4(ctx) {
    	var table, tr, td0, div, t, td1;

    	function select_block_type_1(changed, ctx) {
    		if (ctx.Picture == null) return create_if_block_9$4;
    		return create_else_block_1$8;
    	}

    	var current_block_type = select_block_type_1(null, ctx);
    	var if_block0 = current_block_type(ctx);

    	function select_block_type_2(changed, ctx) {
    		if (ctx.Name !== undefined || ctx.Name != '') return create_if_block_6$4;
    		if (typeof ctx.Name == undefined || ctx.Name == '') return create_if_block_8$4;
    	}

    	var current_block_type_1 = select_block_type_2(null, ctx);
    	var if_block1 = current_block_type_1 && current_block_type_1(ctx);

    	const block = {
    		c: function create() {
    			table = element("table");
    			tr = element("tr");
    			td0 = element("td");
    			div = element("div");
    			if_block0.c();
    			t = space();
    			td1 = element("td");
    			if (if_block1) if_block1.c();
    			attr_dev(div, "id", "pic");
    			attr_dev(div, "class", "svelte-wj8gko");
    			add_location(div, file$o, 85, 5, 1985);
    			attr_dev(td0, "class", "svelte-wj8gko");
    			add_location(td0, file$o, 84, 4, 1975);
    			attr_dev(td1, "class", "svelte-wj8gko");
    			add_location(td1, file$o, 93, 4, 2340);
    			attr_dev(tr, "class", "svelte-wj8gko");
    			add_location(tr, file$o, 83, 3, 1966);
    			attr_dev(table, "align", "right");
    			attr_dev(table, "border", "0");
    			attr_dev(table, "class", "svelte-wj8gko");
    			add_location(table, file$o, 82, 2, 1930);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, tr);
    			append_dev(tr, td0);
    			append_dev(td0, div);
    			if_block0.m(div, null);
    			append_dev(tr, t);
    			append_dev(tr, td1);
    			if (if_block1) if_block1.m(td1, null);
    		},

    		p: function update(changed, ctx) {
    			if (current_block_type === (current_block_type = select_block_type_1(changed, ctx)) && if_block0) {
    				if_block0.p(changed, ctx);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);
    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div, null);
    				}
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_2(changed, ctx)) && if_block1) {
    				if_block1.p(changed, ctx);
    			} else {
    				if (if_block1) if_block1.d(1);
    				if_block1 = current_block_type_1 && current_block_type_1(ctx);
    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(td1, null);
    				}
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(table);
    			}

    			if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_5$4.name, type: "if", source: "(82:1) {#if showUser}", ctx });
    	return block;
    }

    // (89:6) {:else}
    function create_else_block_1$8(ctx) {
    	var img;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "alt", "picture");
    			attr_dev(img, "src", ctx.Picture);
    			set_style(img, "width", "40px");
    			set_style(img, "height", "40px");
    			set_style(img, "border-radius", "0.4rem");
    			set_style(img, "outline", "none");
    			attr_dev(img, "class", "svelte-wj8gko");
    			add_location(img, file$o, 89, 7, 2200);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: function update(changed, ctx) {
    			if (changed.Picture) {
    				attr_dev(img, "src", ctx.Picture);
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_1$8.name, type: "else", source: "(89:6) {:else}", ctx });
    	return block;
    }

    // (87:6) {#if Picture == null}
    function create_if_block_9$4(ctx) {
    	var img;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "alt", "picture");
    			attr_dev(img, "src", 'https://source.unsplash.com/900x900/?automobile');
    			set_style(img, "width", "40px");
    			set_style(img, "height", "40px");
    			set_style(img, "border-radius", "0.4rem");
    			set_style(img, "outline", "none");
    			attr_dev(img, "class", "svelte-wj8gko");
    			add_location(img, file$o, 87, 7, 2035);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(img);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_9$4.name, type: "if", source: "(87:6) {#if Picture == null}", ctx });
    	return block;
    }

    // (107:54) 
    function create_if_block_8$4(ctx) {
    	var h6;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			h6.textContent = "Hi User!";
    			attr_dev(h6, "id", "salute");
    			attr_dev(h6, "class", "svelte-wj8gko");
    			add_location(h6, file$o, 107, 6, 3107);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    		},

    		p: noop,

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(h6);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_8$4.name, type: "if", source: "(107:54) ", ctx });
    	return block;
    }

    // (95:5) {#if Name !== undefined || Name != ''}
    function create_if_block_6$4(ctx) {
    	var div1, button, t0, t1, t2, t3, div0, t4, span, t5, i, dispose;

    	var if_block = (ctx.$tabIndex != 3) && create_if_block_7$4(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			button = element("button");
    			t0 = text("Hi ");
    			t1 = text(ctx.Name);
    			t2 = text("!");
    			t3 = space();
    			div0 = element("div");
    			if (if_block) if_block.c();
    			t4 = space();
    			span = element("span");
    			t5 = text("Logout ");
    			i = element("i");
    			attr_dev(button, "class", "btn btn-secondary dropdown-toggle svelte-wj8gko");
    			attr_dev(button, "type", "button");
    			attr_dev(button, "id", "dropdownMenuButton");
    			attr_dev(button, "data-toggle", "dropdown");
    			attr_dev(button, "aria-haspopup", "true");
    			attr_dev(button, "aria-expanded", "false");
    			add_location(button, file$o, 96, 7, 2425);
    			attr_dev(i, "class", "fa fa-sign-out svelte-wj8gko");
    			add_location(i, file$o, 103, 92, 2981);
    			attr_dev(span, "class", "dropdown-item svelte-wj8gko");
    			set_style(span, "cursor", "pointer");
    			add_location(span, file$o, 103, 8, 2897);
    			attr_dev(div0, "class", "dropdown-menu dropdown-menu-right svelte-wj8gko");
    			attr_dev(div0, "aria-labelledby", "dropdownMenuButton");
    			add_location(div0, file$o, 99, 7, 2623);
    			attr_dev(div1, "class", "dropdown svelte-wj8gko");
    			add_location(div1, file$o, 95, 6, 2395);
    			dispose = listen_dev(span, "click", resetStates);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, button);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			append_dev(button, t2);
    			append_dev(div1, t3);
    			append_dev(div1, div0);
    			if (if_block) if_block.m(div0, null);
    			append_dev(div0, t4);
    			append_dev(div0, span);
    			append_dev(span, t5);
    			append_dev(span, i);
    		},

    		p: function update(changed, ctx) {
    			if (changed.Name) {
    				set_data_dev(t1, ctx.Name);
    			}

    			if (ctx.$tabIndex != 3) {
    				if (!if_block) {
    					if_block = create_if_block_7$4(ctx);
    					if_block.c();
    					if_block.m(div0, t4);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div1);
    			}

    			if (if_block) if_block.d();
    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_6$4.name, type: "if", source: "(95:5) {#if Name !== undefined || Name != ''}", ctx });
    	return block;
    }

    // (101:8) {#if $tabIndex != 3}
    function create_if_block_7$4(ctx) {
    	var span, t, i, dispose;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text("Profile ");
    			i = element("i");
    			attr_dev(i, "class", "fa fa-user svelte-wj8gko");
    			add_location(i, file$o, 101, 104, 2841);
    			attr_dev(span, "class", "dropdown-item svelte-wj8gko");
    			set_style(span, "cursor", "pointer");
    			add_location(span, file$o, 101, 9, 2746);
    			dispose = listen_dev(span, "click", ctx.click_handler);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    			append_dev(span, i);
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(span);
    			}

    			dispose();
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_7$4.name, type: "if", source: "(101:8) {#if $tabIndex != 3}", ctx });
    	return block;
    }

    // (127:26) 
    function create_if_block_4$7(ctx) {
    	var div, current;

    	var account = new Account({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			account.$$.fragment.c();
    			attr_dev(div, "class", "page svelte-wj8gko");
    			add_location(div, file$o, 127, 2, 3418);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(account, div, null);
    			current = true;
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(account.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(account.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			destroy_component(account);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_4$7.name, type: "if", source: "(127:26) ", ctx });
    	return block;
    }

    // (123:26) 
    function create_if_block_3$9(ctx) {
    	var div, current;

    	var garage = new Garage({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			garage.$$.fragment.c();
    			attr_dev(div, "class", "page svelte-wj8gko");
    			add_location(div, file$o, 123, 2, 3348);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(garage, div, null);
    			current = true;
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(garage.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(garage.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			destroy_component(garage);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_3$9.name, type: "if", source: "(123:26) ", ctx });
    	return block;
    }

    // (119:26) 
    function create_if_block_2$a(ctx) {
    	var div, current;

    	var search = new Search({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			search.$$.fragment.c();
    			attr_dev(div, "class", "page svelte-wj8gko");
    			add_location(div, file$o, 119, 2, 3278);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(search, div, null);
    			current = true;
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(search.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(search.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			destroy_component(search);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$a.name, type: "if", source: "(119:26) ", ctx });
    	return block;
    }

    // (115:1) {#if $tabIndex == 0}
    function create_if_block_1$c(ctx) {
    	var div, current;

    	var home = new Home$1({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			home.$$.fragment.c();
    			attr_dev(div, "class", "page svelte-wj8gko");
    			add_location(div, file$o, 115, 2, 3210);
    		},

    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(home, div, null);
    			current = true;
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(home.$$.fragment, local);

    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(home.$$.fragment, local);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if (detaching) {
    				detach_dev(div);
    			}

    			destroy_component(home);
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$c.name, type: "if", source: "(115:1) {#if $tabIndex == 0}", ctx });
    	return block;
    }

    function create_fragment$p(ctx) {
    	var show_if, current_block_type_index, if_block, if_block_anchor, current;

    	var if_block_creators = [
    		create_if_block$f,
    		create_else_block$c
    	];

    	var if_blocks = [];

    	function select_block_type(changed, ctx) {
    		if ((show_if == null) || changed.$currUser) show_if = !!(ctx.$currUser.isAuth == false && ctx.sessionStorage.getItem(storageKey) == null);
    		if (show_if) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(null, ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},

    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},

    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},

    		p: function update(changed, ctx) {
    			var previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(changed, ctx);
    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(changed, ctx);
    			} else {
    				group_outros();
    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});
    				check_outros();

    				if_block = if_blocks[current_block_type_index];
    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}
    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},

    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},

    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},

    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);

    			if (detaching) {
    				detach_dev(if_block_anchor);
    			}
    		}
    	};
    	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$p.name, type: "component", source: "", ctx });
    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let $currUser, $tabIndex;

    	validate_store(currUser, 'currUser');
    	component_subscribe($$self, currUser, $$value => { $currUser = $$value; $$invalidate('$currUser', $currUser); });
    	validate_store(tabIndex, 'tabIndex');
    	component_subscribe($$self, tabIndex, $$value => { $tabIndex = $$value; $$invalidate('$tabIndex', $tabIndex); });

    	

    	let Name, Email, Picture, showUser = false;

    	function initUser() {
    		let UserID = sessionStorage.getItem(storageKey);

            let Payload = { 
                func : 'checkUser', 
                id : UserID
            };

            invokeLambda(env.lambda.pythonAPI, Payload).then(async (res) => {

    			await userInit(res.user, res.id);

    			$$invalidate('Name', Name = $currUser.name);
    			Email = $currUser.email;
    			$$invalidate('Picture', Picture = $currUser.picture);
    /*
                updateUser(res.user, UserID); 
    			updateGarage(res.garage);

    			Name = $acctTab.name;
    			Email = $acctTab.email;
    			Picture = $acctTab.picture;
    */
    			$$invalidate('showUser', showUser = true);

            }).catch((err) => {
                console.log(err);
            });
    	}

    	setInterval(function() {
    		$$invalidate('Name', Name = $currUser.name);
    		Email = $currUser.email;
    		$$invalidate('Picture', Picture = $currUser.picture);
    /*
    		Name = $acctTab.name;
    		Email = $acctTab.email;
    		Picture = $acctTab.picture;
    */
    		$$invalidate('showUser', showUser = true);
    	}, 1000);

    	onMount(async () => {

    		if(sessionStorage.getItem(storageKey) != null && $currUser.isAuth) {
    			await initUser();
    		}
    			
    	});

    	const click_handler = () => tabIndex.set(3);

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ('Name' in $$props) $$invalidate('Name', Name = $$props.Name);
    		if ('Email' in $$props) Email = $$props.Email;
    		if ('Picture' in $$props) $$invalidate('Picture', Picture = $$props.Picture);
    		if ('showUser' in $$props) $$invalidate('showUser', showUser = $$props.showUser);
    		if ('$currUser' in $$props) currUser.set($currUser);
    		if ('$tabIndex' in $$props) tabIndex.set($tabIndex);
    	};

    	return {
    		Name,
    		Picture,
    		showUser,
    		sessionStorage,
    		$currUser,
    		$tabIndex,
    		click_handler
    	};
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$p, safe_not_equal, []);
    		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "App", options, id: create_fragment$p.name });
    	}
    }

    const app = new App({
    	target: document.body
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
